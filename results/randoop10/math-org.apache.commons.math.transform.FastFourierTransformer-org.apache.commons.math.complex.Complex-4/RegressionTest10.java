import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        java.lang.Object obj35 = null;
        printWriter34.print(obj35);
        java.io.PrintStream printStream39 = new java.io.PrintStream("ja");
        printStream39.print(100.0f);
        boolean boolean42 = printStream39.checkError();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale43.getDisplayCountry(locale45);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException(throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException54);
        java.lang.Throwable[] throwableArray56 = functionEvaluationException54.getSuppressed();
        java.io.PrintStream printStream57 = printStream39.printf(locale45, "", (java.lang.Object[]) throwableArray56);
        printStream57.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer60.inversetransform(doubleArray62);
        java.io.PrintStream printStream64 = printStream57.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray63);
        java.io.PrintWriter printWriter65 = printWriter34.printf("\u30c9\u30a4\u30c4", (java.lang.Object[]) complexArray63);
        printWriter34.write(0);
        printWriter34.flush();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "de" + "'", str46, "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printWriter65);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "zho");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zho");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.util.Locale locale6 = null;
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable10);
        double double12 = functionEvaluationException11.getArgument();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex15, complex18 };
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray20, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.transform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.transform(complexArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer14.transform2(complexArray33);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException(throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException51);
        java.lang.Throwable[] throwableArray53 = functionEvaluationException51.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray44, (java.lang.Throwable) mathException54);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer14.inversetransform(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, (double) (short) -1);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray60);
        functionEvaluationException11.addSuppressed((java.lang.Throwable) mathException61);
        double double63 = functionEvaluationException11.getArgument();
        java.lang.Throwable[] throwableArray64 = functionEvaluationException11.getSuppressed();
        java.io.PrintStream printStream65 = printStream1.printf(locale6, "\u4e2d\u6587", (java.lang.Object[]) throwableArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) throwableArray64);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Englisch (Kanada)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Englisch (Kanada)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        java.io.PrintStream printStream76 = printStream1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        printStream76.print((-1));
        java.io.PrintStream printStream80 = new java.io.PrintStream((java.io.OutputStream) printStream76, false);
        java.io.PrintStream printStream82 = printStream80.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        printStream80.println(false);
        java.io.PrintStream printStream86 = printStream80.append('x');
        boolean boolean87 = printStream86.checkError();
        printStream86.print((long) '#');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Japanese");
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder4.setLocale(locale5);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet13 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder14 = builder7.setLocale(locale8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        printStream16.print(true);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray30);
        java.io.PrintStream printStream32 = printStream16.printf("fr", (java.lang.Object[]) throwableArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream34, false);
        printStream34.print('#');
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = locale39.getDisplayName();
        java.util.Set<java.lang.Character> charSet42 = locale39.getExtensionKeys();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        java.io.PrintStream printStream52 = printStream34.format(locale39, "zh_TW", (java.lang.Object[]) throwableArray51);
        printStream16.println((java.lang.Object) locale39);
        java.util.Set<java.lang.String> strSet54 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder55 = builder7.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder58 = builder7.setUnicodeLocaleKeyword("italien", "ca");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Japanese" + "'", str12, "Japanese");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str41, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex33, complex36 };
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.inversetransform(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer32.transform(doubleArray47);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex52, complex55 };
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 0.0d);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException(throwable64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException66);
        java.lang.Throwable[] throwableArray68 = functionEvaluationException66.getSuppressed();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray59, (java.lang.Throwable) mathException69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer32.transform(complexArray59);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray59);
        java.io.PrintWriter printWriter73 = printWriter1.format("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray59);
        java.io.PrintWriter printWriter75 = printWriter73.append((java.lang.CharSequence) "jpn");
        printWriter75.println(false);
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.Writer) printWriter75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        double double83 = complex81.getImaginary();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex[] complexArray86 = new org.apache.commons.math.complex.Complex[] { complex81, complex84 };
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, 35.0d);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer80.inversetransform(complexArray90);
        java.io.PrintWriter printWriter92 = printWriter78.printf("ja-jp (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)", (java.lang.Object[]) complexArray90);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(printWriter92);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.8420233390980636d, 0.8414709848078965d);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer2.inversetransform(doubleArray4);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException11);
        java.lang.String str13 = functionEvaluationException11.getPattern();
        java.lang.String str14 = functionEvaluationException11.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "jpn", (java.lang.Object[]) complexArray5, (java.lang.Throwable) functionEvaluationException11);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream18, false);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray33, (java.lang.Throwable) mathException43);
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, Double.NaN);
        java.io.PrintStream printStream47 = printStream18.printf(locale22, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray46);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ja");
        printStream49.print(100.0f);
        printStream49.print(true);
        java.io.PrintStream printStream55 = printStream49.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream57 = new java.io.PrintStream("ja");
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream57.write(byteArray61);
        printStream55.write(byteArray61);
        printStream47.write(byteArray61);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream47, true);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ja");
        printStream69.print(100.0f);
        boolean boolean72 = printStream69.checkError();
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getCountry();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = locale73.getDisplayCountry(locale75);
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException(throwable82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException84);
        java.lang.Throwable[] throwableArray86 = functionEvaluationException84.getSuppressed();
        java.io.PrintStream printStream87 = printStream69.printf(locale75, "", (java.lang.Object[]) throwableArray86);
        printStream87.close();
        printStream87.println((float) (byte) 1);
        java.lang.Object[] objArray92 = new java.lang.Object[] {};
        java.io.PrintStream printStream93 = printStream87.format("fra", objArray92);
        java.io.PrintStream printStream94 = printStream66.printf("CAN", objArray92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException(1.179501321915592d);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", objArray92, (java.lang.Throwable) functionEvaluationException96);
        functionEvaluationException11.addSuppressed((java.lang.Throwable) mathException97);
        java.lang.Object[] objArray99 = mathException97.getArguments();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "de" + "'", str76, "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printStream94);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(' ');
        printWriter1.println((float) 10L);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray40);
        java.io.PrintWriter printWriter49 = printWriter1.printf("", (java.lang.Object[]) complexArray40);
        printWriter1.print("USA");
        printWriter1.println((float) '4');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.println();
        boolean boolean3 = printStream1.checkError();
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale6.getDisplayCountry();
        java.lang.String str8 = locale4.getDisplayVariant(locale6);
        java.lang.String str9 = locale4.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.inversetransform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer13.transform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer12.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex33, complex36 };
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.inversetransform(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer32.transform(doubleArray47);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray47, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer12.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer11.inversetransform(doubleArray51);
        java.io.PrintStream printStream54 = printStream1.printf(locale4, "zh_CN", (java.lang.Object[]) complexArray53);
        printStream1.println("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra");
        java.io.PrintStream printStream58 = printStream1.append('4');
        printStream58.print("\u30a4\u30bf\u30ea\u30a2\u8a9e)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str7, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printStream58);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        boolean boolean13 = locale10.hasExtensions();
        java.util.Locale.Builder builder14 = builder3.setLocale(locale10);
        java.util.Locale.Builder builder15 = builder3.clearExtensions();
        java.util.Locale.Builder builder16 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder3.setLanguageTag("org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        double double2 = complex1.abs();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex11 = complex6.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex3.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        boolean boolean16 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex21 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex22 = complex17.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex21.pow(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex30.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex23.add(complex33);
        boolean boolean36 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex37.exp();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex39.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.exp();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex45.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex42.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex35.divide(complex42);
        org.apache.commons.math.complex.Complex complex51 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex15.multiply(complex35);
        org.apache.commons.math.complex.Complex complex53 = complex35.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("FR", (double) (byte) 0);
        java.lang.String str3 = languageRange2.getRange();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex17, complex20 };
        org.apache.commons.math.complex.Complex[] complexArray24 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer6.transform2(complexArray25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray36, (java.lang.Throwable) mathException46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer6.inversetransform(complexArray36);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex53, complex56 };
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 0.0d);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException67);
        java.lang.Throwable[] throwableArray69 = functionEvaluationException67.getSuppressed();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray60, (java.lang.Throwable) mathException70);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer6.transform2(complexArray73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("zh-TW", (java.lang.Throwable) mathException75);
        boolean boolean78 = languageRange2.equals((java.lang.Object) mathException77);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.flush();
        printStream1.println((int) 'x');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException");
        printWriter18.print((float) (byte) 0);
        java.util.Locale locale21 = null;
        java.lang.Object[] objArray23 = null;
        java.io.PrintWriter printWriter24 = printWriter18.format(locale21, "Deutsch", objArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.inversetransform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer36.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex57, complex60 };
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.transform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex67, complex70 };
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer66.transform(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer56.transform2(complexArray75);
        double[] doubleArray79 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer56.transform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer36.transform2(doubleArray79);
        double[] doubleArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer26.inversetransform(doubleArray83);
        java.io.PrintWriter printWriter85 = printWriter24.printf("DEU", (java.lang.Object[]) complexArray84);
        java.io.PrintStream printStream86 = printStream1.printf("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", (java.lang.Object[]) complexArray84);
        printStream1.print((int) 'u');
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(printStream86);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale.Builder builder13 = builder9.setLanguage("");
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale.Builder builder13 = builder9.setLanguage("");
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder21 = builder18.setVariant("taiwan");
        java.util.Locale locale22 = builder18.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ja");
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream7.write(byteArray11);
        printStream3.write(byteArray11);
        java.io.PrintStream printStream15 = printStream3.append('4');
        printStream15.print(0.0f);
        printStream15.close();
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter28.print((int) 'x');
        java.util.Locale locale34 = new java.util.Locale("org.apache.commons.math.functionevaluationexception", "deu", "\u65e5\u6587");
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray45, (java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException56.getSuppressed();
        java.io.PrintWriter printWriter58 = printWriter28.format(locale34, "tw", (java.lang.Object[]) throwableArray57);
        printWriter28.println(' ');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "\u65e5\u6587");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("chn_JAPAN", 1.5707963267948966d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.5707963267948966");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) (-1L), 1.464088715865924d);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.negate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex10 = complex5.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex5.tan();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex5);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u6cd5\u6587" + "'", str2, "\u6cd5\u6587");
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.inversetransform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform(doubleArray15);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex20, complex23 };
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.0d);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException34);
        java.lang.Throwable[] throwableArray36 = functionEvaluationException34.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray27, (java.lang.Throwable) mathException37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer0.transform(complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.inversetransform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer40.transform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex60, complex63 };
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.transform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.inversetransform(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer59.transform(doubleArray74);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray74, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer80.inversetransform(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, 1.179501321915592d);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform2(doubleArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(univariateRealFunction91, 2.788172660615703d, (-1.0d), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder9 = builder6.setExtension('u', "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        char[] charArray59 = new char[] {};
        printStream1.print(charArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream62.print((-1.0f));
        printStream62.flush();
        java.io.PrintStream printStream67 = printStream62.append('u');
        printStream67.println(true);
        printStream67.print(' ');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getISO3Country();
        java.util.Locale.Builder builder23 = builder20.setLocale(locale21);
        java.util.Locale.Builder builder25 = builder20.setLanguageTag("CHN");
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale.Builder builder27 = builder25.clear();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale locale29 = builder28.build();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("ja");
        printWriter31.println((float) 10);
        printWriter31.println((int) (byte) 10);
        printWriter31.print(false);
        java.lang.Object[] objArray39 = null;
        java.io.PrintWriter printWriter40 = printWriter31.printf("de", objArray39);
        printWriter31.print((int) (byte) 1);
        java.io.PrintWriter printWriter44 = printWriter31.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("ja");
        printWriter47.println((float) 10);
        printWriter47.println((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream55 = new java.io.PrintStream("ja");
        printStream55.print(100.0f);
        boolean boolean58 = printStream55.checkError();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getCountry();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale59.getDisplayCountry(locale61);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.io.PrintStream printStream73 = printStream55.printf(locale61, "", (java.lang.Object[]) throwableArray72);
        printStream73.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer76.inversetransform(doubleArray78);
        java.io.PrintStream printStream80 = printStream73.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray79);
        java.io.PrintWriter printWriter81 = printWriter47.format(locale52, "ja", (java.lang.Object[]) complexArray79);
        java.io.PrintWriter printWriter82 = printWriter31.format("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray79);
        printWriter82.println((long) 1);
        printWriter82.println(100.0f);
        printWriter82.write("org.apache.commons.math.FunctionEvaluationException: hi!");
        boolean boolean89 = printWriter82.checkError();
        printWriter82.print((int) (byte) 10);
        java.io.PrintStream printStream93 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream93, false);
        printStream95.print(true);
        printWriter82.print((java.lang.Object) true);
        boolean boolean99 = locale29.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "de" + "'", str62, "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream7 = printStream1.append('a');
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getDisplayName();
        java.lang.String str17 = locale10.getDisplayLanguage(locale14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer21.inversetransform(doubleArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray24);
        java.io.PrintStream printStream26 = printStream9.printf(locale14, "CN", (java.lang.Object[]) complexArray24);
        java.util.Set<java.lang.String> strSet27 = locale14.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream31 = new java.io.PrintStream("ja");
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = locale32.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getDisplayName();
        java.lang.String str39 = locale32.getDisplayLanguage(locale36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer43.inversetransform(doubleArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray46);
        java.io.PrintStream printStream48 = printStream31.printf(locale36, "CN", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray46);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.io.PrintStream printStream51 = printStream7.printf(locale14, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray50);
        java.util.Locale locale55 = new java.util.Locale("\u30c9\u30a4\u30c4", "org.apache.commons.math.FunctionEvaluationException: fra", "jpn");
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale14.getDisplayScript(locale55);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.toLanguageTag();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale58.getDisplayName(locale60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.lang.String str66 = locale58.getDisplayScript(locale64);
        java.io.PrintStream printStream68 = new java.io.PrintStream("ja");
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = locale69.getScript();
        java.lang.String str72 = locale69.getDisplayLanguage();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getScript();
        java.lang.String str75 = locale73.getDisplayName();
        java.lang.String str76 = locale69.getDisplayLanguage(locale73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer80.inversetransform(doubleArray82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray83);
        java.io.PrintStream printStream85 = printStream68.printf(locale73, "CN", (java.lang.Object[]) complexArray83);
        java.lang.String str86 = locale58.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet87 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str88 = locale58.getDisplayCountry();
        java.lang.String str89 = locale14.getDisplayVariant(locale58);
        java.lang.String str90 = locale58.getISO3Country();
        java.lang.String str91 = locale58.getCountry();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str35, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str38, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str39, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertEquals(locale55.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ja" + "'", str59, "ja");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr" + "'", str61, "fr");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "japonais" + "'", str63, "japonais");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str72, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str75, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str76, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str86, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        double[] doubleArray23 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex39, complex42 };
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer28.transform2(complexArray47);
        double[] doubleArray51 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer28.transform2(doubleArray51);
        java.io.PrintStream printStream53 = printStream26.printf("CN", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer55.inversetransform(doubleArray57);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, 1.3128648970655075d);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.transform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.024457451144070205d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[13.128648970655075]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[13.128648970655075]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream7.println(0L);
        printStream7.println();
        printStream7.print(true);
        printStream7.println(0.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.write((int) '#');
        printStream16.close();
        printStream16.println((java.lang.Object) 10.0d);
        printStream16.write(100);
        printStream16.println(false);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        boolean boolean28 = printStream16.checkError();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream16, true);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("ja");
        printWriter32.flush();
        printWriter32.close();
        printWriter32.print("CN");
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream41 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream41, false);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        java.io.PrintStream printStream70 = printStream41.printf(locale45, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter38.format("ja", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream73 = new java.io.PrintStream("ja");
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale74);
        java.lang.String str76 = locale74.getScript();
        java.lang.String str77 = locale74.getDisplayLanguage();
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getScript();
        java.lang.String str80 = locale78.getDisplayName();
        java.lang.String str81 = locale74.getDisplayLanguage(locale78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer85.inversetransform(doubleArray87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray88);
        java.io.PrintStream printStream90 = printStream73.printf(locale78, "CN", (java.lang.Object[]) complexArray88);
        char[] charArray91 = new char[] {};
        printStream73.print(charArray91);
        printWriter38.print(charArray91);
        printWriter32.println(charArray91);
        printStream16.print(charArray91);
        printStream7.println(charArray91);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str77, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str80, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str81, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[]");
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println(10);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ja");
        printStream8.print(100.0f);
        boolean boolean11 = printStream8.checkError();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "de");
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = locale16.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder21 = builder15.setLocale(locale17);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Throwable[] throwableArray41 = functionEvaluationException39.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray32, (java.lang.Throwable) mathException42);
        java.io.PrintStream printStream44 = printStream8.printf(locale17, "ja", (java.lang.Object[]) complexArray32);
        java.io.PrintStream printStream45 = printStream1.format("\u65e5\u6587", (java.lang.Object[]) complexArray32);
        printStream45.write((int) (short) 0);
        printStream45.print("Japan");
        printStream45.print((int) (byte) 1);
        printStream45.print((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream57 = printStream45.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str20, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        printStream9.print(100.0f);
        boolean boolean12 = printStream9.checkError();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException(throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException24.getSuppressed();
        java.io.PrintStream printStream27 = printStream9.printf(locale15, "", (java.lang.Object[]) throwableArray26);
        printStream27.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer30.inversetransform(doubleArray32);
        java.io.PrintStream printStream34 = printStream27.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray33);
        java.io.PrintWriter printWriter35 = printWriter1.format(locale6, "ja", (java.lang.Object[]) complexArray33);
        java.util.Locale locale36 = locale6.stripExtensions();
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale36.getDisplayLanguage(locale38);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('a', "de");
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getVariant();
        java.lang.String str48 = locale46.getVariant();
        java.lang.String str49 = locale45.getDisplayLanguage(locale46);
        java.util.Locale.Builder builder50 = builder44.setLocale(locale46);
        java.util.Locale.Builder builder52 = builder50.setLanguageTag("de");
        java.util.Locale.Builder builder54 = builder50.setLanguage("");
        java.util.Locale.Builder builder55 = builder50.clear();
        java.util.Locale.Builder builder57 = builder55.removeUnicodeLocaleAttribute("deu");
        java.util.Locale locale58 = builder57.build();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale59.getScript();
        java.lang.String str61 = locale59.getDisplayName();
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale58.getDisplayName(locale59);
        java.lang.String str64 = locale36.getDisplayCountry(locale58);
        java.lang.String str65 = locale58.getDisplayLanguage();
        java.lang.Object obj66 = locale58.clone();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str49, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japanese" + "'", str61, "Japanese");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Taiwan" + "'", str64, "Taiwan");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "");
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(0.0d);
        java.lang.String str2 = functionEvaluationException1.getPattern();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException1);
        java.lang.Object[] objArray4 = mathException3.getArguments();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Evaluation failed for argument = {0}" + "'", str2, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayName();
        java.lang.String str9 = locale2.getDisplayLanguage(locale6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer13.inversetransform(doubleArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray16);
        java.io.PrintStream printStream18 = printStream1.printf(locale6, "CN", (java.lang.Object[]) complexArray16);
        printStream1.println('a');
        printStream1.flush();
        java.io.PrintStream printStream24 = new java.io.PrintStream("ja");
        printStream24.print(100.0f);
        printStream24.print(true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.transform(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.inversetransform(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer30.transform(doubleArray45);
        java.io.PrintStream printStream48 = printStream24.printf("\u65e5\u672c\u8a9e", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 0.6156264703860141d);
        java.io.PrintStream printStream51 = printStream1.printf("FRA", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex53 = complex52.acos();
        org.apache.commons.math.complex.Complex complex54 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.exp();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex58.divide(complex60);
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = complex55.add(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex54.add(complex55);
        double double65 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex66 = complex64.sinh();
        boolean boolean67 = complex66.isNaN();
        printStream51.println((java.lang.Object) complex66);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str5, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fr", (double) (short) 1);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        java.lang.String str6 = languageRange2.getRange();
        java.lang.String str7 = languageRange2.getRange();
        double double8 = languageRange2.getWeight();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print((java.lang.Object) printWriter53);
        printWriter53.println();
        printWriter53.write("zh", (int) (short) -1, (int) (short) 0);
        printWriter53.print((int) (short) 1);
        printWriter53.println("");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.println((-1.0d));
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: fra");
        printStream1.println((double) (byte) 100);
        printStream1.print("");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        printStream11.print(100.0f);
        boolean boolean14 = printStream11.checkError();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale15.getDisplayCountry(locale17);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        java.io.PrintStream printStream29 = printStream11.printf(locale17, "", (java.lang.Object[]) throwableArray28);
        printStream29.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer32.inversetransform(doubleArray34);
        java.io.PrintStream printStream36 = printStream29.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray35);
        printStream29.print("fr");
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream43 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream43, false);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex51, complex54 };
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, 0.0d);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException65);
        java.lang.Throwable[] throwableArray67 = functionEvaluationException65.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray58, (java.lang.Throwable) mathException68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, Double.NaN);
        java.io.PrintStream printStream72 = printStream43.printf(locale47, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter73 = printWriter40.format("ja", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter("ja");
        printWriter75.println((float) 10);
        printWriter75.println((int) (byte) 10);
        printWriter75.print(false);
        java.lang.Object[] objArray83 = null;
        java.io.PrintWriter printWriter84 = printWriter75.printf("de", objArray83);
        char[] charArray85 = new char[] {};
        printWriter75.write(charArray85);
        printWriter73.println(charArray85);
        printStream29.println(charArray85);
        boolean boolean89 = printStream29.checkError();
        byte[] byteArray95 = new byte[] { (byte) 100, (byte) -1, (byte) 100, (byte) 10, (byte) -1 };
        printStream29.write(byteArray95);
        printStream1.write(byteArray95);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "de" + "'", str18, "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[100, -1, 100, 10, -1]");
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.println((long) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer25.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer25.transform2(complexArray44);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException(throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException51);
        java.lang.String str53 = functionEvaluationException51.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray45, (java.lang.Throwable) functionEvaluationException51);
        java.lang.Object[] objArray55 = functionEvaluationException54.getArguments();
        java.io.PrintStream printStream56 = printStream19.format("org.apache.commons.math.FunctionEvaluationException: fra", objArray55);
        printStream19.flush();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(printStream56);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.io.PrintStream printStream4 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.toLanguageTag();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale7.getDisplayName(locale9);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ja");
        printStream18.print(100.0f);
        boolean boolean21 = printStream18.checkError();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream18.printf(locale24, "", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter37 = printWriter15.printf("fra", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex39, complex42 };
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, 0.0d);
        java.io.PrintWriter printWriter47 = printWriter37.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform(complexArray57);
        java.io.PrintWriter printWriter59 = printWriter37.format("fra", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter6.format(locale7, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray58);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException(throwable64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException66);
        java.lang.String str68 = functionEvaluationException66.getPattern();
        java.lang.String str69 = functionEvaluationException66.getPattern();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("CA", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException66);
        functionEvaluationException1.addSuppressed((java.lang.Throwable) functionEvaluationException66);
        double double72 = functionEvaluationException1.getArgument();
        java.lang.String str73 = functionEvaluationException1.getPattern();
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "japonais" + "'", str12, "japonais");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Evaluation failed for argument = {0}" + "'", str73, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.exp();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.divide(complex5);
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex0.add(complex5);
        org.apache.commons.math.complex.Complex complex9 = complex0.cosh();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.lang.String str12 = locale11.getDisplayScript();
        boolean boolean13 = complex9.equals((java.lang.Object) locale11);
        org.apache.commons.math.complex.Complex complex14 = complex9.tan();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        double double16 = complex14.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5998406268185329d + "'", double16 == 0.5998406268185329d);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Chinook jargon (JAPAN)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinookjargon(japan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.functionevaluationexception: de", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        java.util.Locale locale2 = java.util.Locale.US;
        java.lang.String str3 = locale2.getCountry();
        java.util.Locale locale6 = new java.util.Locale("\u4e2d\u56fd\u8a9e", "fran\347ais (France)");
        java.lang.String str7 = locale2.getDisplayName(locale6);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException(throwable13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException15);
        java.lang.Throwable[] throwableArray17 = functionEvaluationException15.getSuppressed();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.toLanguageTag();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale32);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayCountry(locale38);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getISO3Country();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayCountry(locale50);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale29, locale31, locale32, locale34, locale35, locale38, locale41, locale42, locale44, locale46, locale47, locale48, locale53, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList57);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex62.exp();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex64.divide(complex66);
        java.lang.Object[] objArray69 = new java.lang.Object[] { locale59, (short) -1, 'a', complex64, (short) 10 };
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("ja", objArray69, (java.lang.Throwable) functionEvaluationException76);
        mathException18.addSuppressed((java.lang.Throwable) mathException77);
        java.lang.Throwable[] throwableArray79 = mathException77.getSuppressed();
        java.lang.Object[] objArray80 = mathException77.getArguments();
        java.io.PrintStream printStream81 = printStream1.format(locale6, "FR", objArray80);
        printStream81.println((long) 100);
        printStream81.print((float) (byte) 0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US" + "'", str3, "US");
        org.junit.Assert.assertEquals(locale6.toString(), "\u4e2d\u56fd\u8a9e_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (United States)" + "'", str7, "English (United States)");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr" + "'", str30, "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de" + "'", str54, "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex8, complex11 };
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray13, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.transform(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.inversetransform(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer7.transform(doubleArray22);
        java.io.PrintStream printStream25 = printStream1.printf("\u65e5\u672c\u8a9e", (java.lang.Object[]) complexArray24);
        printStream25.print('x');
        printStream25.write((int) '#');
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream25);
        printWriter30.write("ca");
        printWriter30.write("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream1.println('#');
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale22.getDisplayScript();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.transform(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer26.transform2(complexArray45);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer26.inversetransform(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (short) -1);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream74 = printStream1.printf(locale22, "\u65e5\u672c\u8a9e\u65e5\u672c)", (java.lang.Object[]) complexArray72);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream74, false);
        printWriter76.close();
        printWriter76.print((int) 'x');
        printWriter76.print("anglais");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printStream74);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println((int) 'a');
        printWriter1.print('u');
        printWriter1.println("\u30a4\u30bf\u30ea\u30a2\u8a9e");
        java.io.PrintStream printStream38 = new java.io.PrintStream("ja");
        printStream38.print(100.0f);
        printStream38.print((-1.0f));
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream38, true);
        printStream38.print("");
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getScript();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = locale47.getDisplayCountry(locale49);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex54, complex57 };
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray59, 0.0d);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable[] throwableArray70 = functionEvaluationException68.getSuppressed();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray61, (java.lang.Throwable) mathException71);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, Double.NaN);
        java.io.PrintStream printStream75 = printStream38.format(locale49, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray74);
        java.io.PrintWriter printWriter76 = printWriter1.format("\u65e5\u672c\u8a9e\u65e5\u672c\u65e5\u6587)", (java.lang.Object[]) complexArray74);
        printWriter76.flush();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        java.util.Locale locale3 = new java.util.Locale("", "twn", "chn_JAPAN");
        org.junit.Assert.assertEquals(locale3.toString(), "_TWN_chn_JAPAN");
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer22.inversetransform(doubleArray24);
        java.io.PrintStream printStream26 = printStream19.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray25);
        printStream19.print("fr");
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream33 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException55.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException58);
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, Double.NaN);
        java.io.PrintStream printStream62 = printStream33.printf(locale37, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray61);
        java.io.PrintWriter printWriter63 = printWriter30.format("ja", (java.lang.Object[]) complexArray61);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("ja");
        printWriter65.println((float) 10);
        printWriter65.println((int) (byte) 10);
        printWriter65.print(false);
        java.lang.Object[] objArray73 = null;
        java.io.PrintWriter printWriter74 = printWriter65.printf("de", objArray73);
        char[] charArray75 = new char[] {};
        printWriter65.write(charArray75);
        printWriter63.println(charArray75);
        printStream19.println(charArray75);
        boolean boolean79 = printStream19.checkError();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) -1, (byte) 100, (byte) 10, (byte) -1 };
        printStream19.write(byteArray85);
        java.io.PrintStream printStream88 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[100, -1, 100, 10, -1]");
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str1, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer1.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex32, complex35 };
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.transform(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer21.transform2(complexArray40);
        double[] doubleArray44 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer21.transform2(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer1.transform2(doubleArray44);
        double[] doubleArray49 = new double[] { (-0.5403023058681398d), 0L };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer1.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer51.inversetransform(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray53, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer1.transform2(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex60, complex63 };
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.transform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex70, complex73 };
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer59.transform2(complexArray78);
        double[] doubleArray82 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer59.transform2(doubleArray82);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer1.transform(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, (-0.9485431290768083d));
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) complexArray87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((-0.7071067811865476d), "kor");
        java.lang.Throwable[] throwableArray96 = functionEvaluationException95.getSuppressed();
        mathException92.addSuppressed((java.lang.Throwable) functionEvaluationException95);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-0.5403023058681398, 0.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream7 = printStream1.append('a');
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getDisplayName();
        java.lang.String str17 = locale10.getDisplayLanguage(locale14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer21.inversetransform(doubleArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray24);
        java.io.PrintStream printStream26 = printStream9.printf(locale14, "CN", (java.lang.Object[]) complexArray24);
        java.util.Set<java.lang.String> strSet27 = locale14.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream31 = new java.io.PrintStream("ja");
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = locale32.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getDisplayName();
        java.lang.String str39 = locale32.getDisplayLanguage(locale36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer43.inversetransform(doubleArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray46);
        java.io.PrintStream printStream48 = printStream31.printf(locale36, "CN", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray46);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.io.PrintStream printStream51 = printStream7.printf(locale14, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream("ja");
        printStream53.print(100.0f);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ja");
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream57.write(byteArray61);
        printStream53.write(byteArray61);
        printStream51.write(byteArray61);
        printStream51.print((double) (short) 1);
        java.io.PrintStream printStream68 = printStream51.append('4');
        printStream51.print((double) (-1L));
        printStream51.println("\u4e2d\u6587");
        printStream51.write((int) ' ');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str35, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str38, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str39, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.exp();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex3.divide(complex5);
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex0.add(complex5);
        org.apache.commons.math.complex.Complex complex9 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        printStream12.print(100.0f);
        boolean boolean15 = printStream12.checkError();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayCountry(locale18);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException27);
        java.lang.Throwable[] throwableArray29 = functionEvaluationException27.getSuppressed();
        java.io.PrintStream printStream30 = printStream12.printf(locale18, "", (java.lang.Object[]) throwableArray29);
        printStream30.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer33.inversetransform(doubleArray35);
        java.io.PrintStream printStream37 = printStream30.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray36);
        printStream30.print("fr");
        boolean boolean40 = complex10.equals((java.lang.Object) "fr");
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex46.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex50.exp();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex52.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex49.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex49.asin();
        org.apache.commons.math.complex.Complex complex58 = complex43.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex10.pow(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex9.pow(complex58);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.toLanguageTag();
        boolean boolean65 = locale63.hasExtensions();
        java.lang.String str66 = locale61.getDisplayName(locale63);
        boolean boolean67 = complex60.equals((java.lang.Object) locale63);
        org.apache.commons.math.complex.Complex complex68 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex68.sin();
        org.apache.commons.math.complex.Complex complex70 = complex68.cos();
        org.apache.commons.math.complex.Complex complex71 = complex68.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fr" + "'", str64, "fr");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "japonais" + "'", str66, "japonais");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable8);
        double double10 = functionEvaluationException9.getArgument();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.transform(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer12.transform2(complexArray31);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray42, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer12.inversetransform(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, (double) (short) -1);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray58);
        functionEvaluationException9.addSuppressed((java.lang.Throwable) mathException59);
        double double61 = functionEvaluationException9.getArgument();
        java.lang.Object[] objArray62 = functionEvaluationException9.getArguments();
        java.lang.String str63 = functionEvaluationException9.getPattern();
        boolean boolean64 = languageRange1.equals((java.lang.Object) functionEvaluationException9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it" + "'", str2, "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.transform(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.inversetransform(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer22.transform(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer21.inversetransform2(doubleArray37);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream42, false);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException(throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException64);
        java.lang.Throwable[] throwableArray66 = functionEvaluationException64.getSuppressed();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray57, (java.lang.Throwable) mathException67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, Double.NaN);
        java.io.PrintStream printStream71 = printStream42.printf(locale46, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer21.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer0.inversetransform2(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.transform(univariateRealFunction75, 0.20928455749004518d, 0.5403023058681397d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayCountry(locale21);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getScript();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayCountry(locale33);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale12, locale14, locale15, locale17, locale18, locale21, locale24, locale25, locale27, locale29, locale30, locale31, locale36, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList40);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex45.exp();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex47.divide(complex49);
        java.lang.Object[] objArray52 = new java.lang.Object[] { locale42, (short) -1, 'a', complex47, (short) 10 };
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException(throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ja", objArray52, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, (java.lang.Throwable) functionEvaluationException59);
        java.lang.Object[] objArray62 = functionEvaluationException59.getArguments();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("France", objArray62);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "de" + "'", str22, "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "de" + "'", str34, "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "de" + "'", str37, "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println((int) 'a');
        printWriter1.print('u');
        printWriter1.println(' ');
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ja");
        printStream38.write((int) '#');
        printStream38.print("fr");
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        printWriter43.println(100L);
        printWriter43.print((long) 1);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter43, false);
        printWriter43.print("\u30ab\u30ca\u30c0");
        printWriter36.print((java.lang.Object) printWriter43);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str2 = locale1.getDisplayName();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.print(100.0f);
        boolean boolean13 = printStream10.checkError();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getCountry();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayCountry(locale16);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Throwable[] throwableArray27 = functionEvaluationException25.getSuppressed();
        java.io.PrintStream printStream28 = printStream10.printf(locale16, "", (java.lang.Object[]) throwableArray27);
        java.io.PrintWriter printWriter29 = printWriter7.printf("fra", (java.lang.Object[]) throwableArray27);
        printWriter7.println(false);
        printWriter7.println((float) (short) 100);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter7, true);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getLanguage();
        java.io.PrintStream printStream41 = new java.io.PrintStream("ja");
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getScript();
        java.lang.String str48 = locale46.getDisplayName();
        java.lang.String str49 = locale42.getDisplayLanguage(locale46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer53.inversetransform(doubleArray55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray56);
        java.io.PrintStream printStream58 = printStream41.printf(locale46, "CN", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray56);
        java.io.PrintWriter printWriter60 = printWriter7.format(locale36, "\u4e2d\u56fd\u8a9e", (java.lang.Object[]) complexArray56);
        printWriter60.flush();
        boolean boolean62 = locale5.equals((java.lang.Object) printWriter60);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "de" + "'", str17, "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ko" + "'", str37, "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str45, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str48, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str49, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream("ja");
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream5.write(byteArray9);
        printStream1.write(byteArray9);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Country();
        boolean boolean14 = locale12.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex17, complex20 };
        org.apache.commons.math.complex.Complex[] complexArray24 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer16.transform2(complexArray35);
        double[] doubleArray39 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer16.transform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex43, complex46 };
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer42.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.inversetransform(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer42.transform(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer41.inversetransform2(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer63.inversetransform(doubleArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer41.transform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer69.inversetransform(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 1.179501321915592d);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer41.transform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer16.transform(complexArray79);
        java.io.PrintStream printStream81 = printStream1.format(locale12, "CHN", (java.lang.Object[]) complexArray79);
        printStream81.println(true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        printStream19.print(0.0d);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("fra", strMap26);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double31 = languageRange30.getWeight();
        java.util.Locale.LanguageRange languageRange34 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] { languageRange30, languageRange34 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList39, (java.util.Collection<java.lang.String>) strSet42);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet42);
        printStream19.println((java.lang.Object) strList44);
        java.io.PrintStream printStream47 = printStream19.append('#');
        java.io.PrintStream printStream49 = printStream19.append('4');
        printStream19.println(false);
        printStream19.println();
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        java.io.PrintStream printStream56 = printStream19.append('4');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream56);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        char[] charArray59 = new char[] {};
        printStream1.print(charArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print("french_ITALIAN");
        java.io.PrintStream printStream68 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream70 = printStream68.append((java.lang.CharSequence) "");
        printStream70.print((int) (short) 100);
        java.io.PrintStream printStream74 = new java.io.PrintStream("ja");
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream74.write(byteArray78);
        printStream70.write(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray78, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100, 0, -1]");
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.print((float) (-1L));
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream30 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream30, false);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray45, (java.lang.Throwable) mathException55);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, Double.NaN);
        java.io.PrintStream printStream59 = printStream30.printf(locale34, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter27.format("ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("ja");
        printWriter62.println((float) 10);
        printWriter62.println((int) (byte) 10);
        printWriter62.print(false);
        java.lang.Object[] objArray70 = null;
        java.io.PrintWriter printWriter71 = printWriter62.printf("de", objArray70);
        char[] charArray72 = new char[] {};
        printWriter62.write(charArray72);
        printWriter60.println(charArray72);
        printWriter23.println(charArray72);
        printWriter23.print((-0.5403023058681398d));
        printWriter23.print((float) '#');
        printWriter23.print(1.0f);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[]");
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        java.io.PrintWriter printWriter12 = printWriter10.append('x');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter16 = printWriter12.append((java.lang.CharSequence) "chinois (Chine)", (int) 'u', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -116");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print((-1.0f));
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        boolean boolean9 = locale8.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.transform(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer12.transform2(complexArray31);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray42, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer12.inversetransform(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, (double) (short) -1);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray58);
        java.io.PrintStream printStream60 = printStream1.printf(locale8, "Evaluation failed for argument = {0}", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter66 = printWriter62.append((java.lang.CharSequence) "und", (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("it");
        printWriter1.print((long) 1);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        java.util.Locale locale2 = new java.util.Locale("ja", "");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale3.getDisplayName();
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale3.getDisplayScript(locale6);
        java.lang.String str8 = locale2.getDisplayLanguage(locale3);
        java.lang.String str9 = locale2.getISO3Country();
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str5, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex0.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        java.util.Locale locale1 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        boolean boolean4 = locale1.hasExtensions();
        java.util.Locale.setDefault(locale1);
        java.lang.String str6 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        printStream3.close();
        printStream3.print((int) (byte) 0);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.write((int) '#');
        printStream10.close();
        printStream10.println((java.lang.Object) 10.0d);
        printStream10.write(100);
        printStream10.println(false);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream10, true);
        printStream10.print('4');
        printStream10.print("\u53f0\u6e7e");
        java.io.PrintStream printStream27 = printStream10.append('a');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("ja");
        printWriter29.println((float) 10);
        printWriter29.println((int) (byte) 10);
        printWriter29.print(false);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter29.printf("de", objArray37);
        char[] charArray39 = new char[] {};
        printWriter29.write(charArray39);
        printStream10.print(charArray39);
        printStream3.println(charArray39);
        printStream3.print(false);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ja");
        printStream47.print(100.0f);
        boolean boolean50 = printStream47.checkError();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = locale51.getCountry();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayCountry(locale53);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        java.io.PrintStream printStream65 = printStream47.printf(locale53, "", (java.lang.Object[]) throwableArray64);
        printStream65.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream65);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        double double73 = complex71.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex71, complex74 };
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 35.0d);
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable83);
        double double85 = functionEvaluationException84.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray80, (java.lang.Throwable) functionEvaluationException84);
        java.io.PrintWriter printWriter87 = printWriter67.printf("zho", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream88 = printStream3.format("Kanada", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream88, false);
        printStream88.print(true);
        printStream88.println((int) (short) 100);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de" + "'", str54, "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex1.subtract(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math.complex.Complex complex12 = complex11.atan();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex14.asin();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex6.divide(complex14);
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.setDefault(locale6);
        boolean boolean9 = locale6.hasExtensions();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "chn");
        java.util.Locale.Builder builder15 = builder10.setLanguageTag("twn");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str7, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale.Builder builder13 = builder9.setLanguage("");
        java.util.Locale.Builder builder16 = builder9.setExtension('u', "zh_TW");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("Japan");
        java.util.Locale.Builder builder22 = builder19.setExtension('x', "zho");
        java.util.Locale locale23 = builder19.build();
        java.lang.String str24 = locale23.getLanguage();
        java.lang.Object obj25 = locale23.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "");
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ja");
        printStream2.print(100.0f);
        printStream2.println(10);
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        printStream9.print(100.0f);
        boolean boolean12 = printStream9.checkError();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "de");
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getVariant();
        java.lang.String str20 = locale18.getVariant();
        java.lang.String str21 = locale17.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder22 = builder16.setLocale(locale18);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray33, (java.lang.Throwable) mathException43);
        java.io.PrintStream printStream45 = printStream9.printf(locale18, "ja", (java.lang.Object[]) complexArray33);
        java.io.PrintStream printStream46 = printStream2.format("\u65e5\u6587", (java.lang.Object[]) complexArray33);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ja");
        printStream50.print(100.0f);
        boolean boolean53 = printStream50.checkError();
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale54.getCountry();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale54.getDisplayCountry(locale56);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException65);
        java.lang.Throwable[] throwableArray67 = functionEvaluationException65.getSuppressed();
        java.io.PrintStream printStream68 = printStream50.printf(locale56, "", (java.lang.Object[]) throwableArray67);
        printStream68.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer71.inversetransform(doubleArray73);
        java.io.PrintStream printStream75 = printStream68.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "Japanese", (java.lang.Object[]) complexArray74);
        double double77 = functionEvaluationException76.getArgument();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("\u30a4\u30bf\u30ea\u30a2\u8a9e", (java.lang.Object[]) complexArray33, (java.lang.Throwable) functionEvaluationException76);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        java.lang.String str80 = mathException78.toString();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str21, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "de" + "'", str57, "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 120.0d + "'", double77 == 120.0d);
        org.junit.Assert.assertNotNull(objArray79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str80, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex9, complex12 };
        org.apache.commons.math.complex.Complex[] complexArray16 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, 0.0d);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException(throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException23);
        java.lang.Throwable[] throwableArray25 = functionEvaluationException23.getSuppressed();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray16, (java.lang.Throwable) mathException26);
        boolean boolean28 = complex6.equals((java.lang.Object) "fra");
        org.apache.commons.math.complex.Complex complex29 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex0.multiply(complex29);
        boolean boolean31 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex0.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: CHN");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(1.9820622389532458d, (java.lang.Throwable) mathException2);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex4.pow(complex6);
        double double11 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex14.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.exp();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex20.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex17.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex17.asin();
        org.apache.commons.math.complex.Complex complex26 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex17.cos();
        org.apache.commons.math.complex.Complex complex28 = complex10.pow(complex17);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        printWriter1.print((int) (byte) 1);
        printWriter1.println();
        java.io.PrintWriter printWriter15 = printWriter1.append((java.lang.CharSequence) "FRAN\347AIS (FRANCE)");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("ja");
        printWriter17.println((float) 10);
        java.io.PrintWriter printWriter21 = printWriter17.append((java.lang.CharSequence) "HI!");
        boolean boolean22 = printWriter21.checkError();
        boolean boolean23 = printWriter21.checkError();
        java.io.PrintStream printStream25 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream27 = printStream25.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream32 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream32, false);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException(throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException54);
        java.lang.Throwable[] throwableArray56 = functionEvaluationException54.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray47, (java.lang.Throwable) mathException57);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, Double.NaN);
        java.io.PrintStream printStream61 = printStream32.printf(locale36, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter29.format("ja", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("ja");
        printWriter64.println((float) 10);
        printWriter64.println((int) (byte) 10);
        printWriter64.print(false);
        java.lang.Object[] objArray72 = null;
        java.io.PrintWriter printWriter73 = printWriter64.printf("de", objArray72);
        char[] charArray74 = new char[] {};
        printWriter64.write(charArray74);
        printWriter62.println(charArray74);
        printStream27.print(charArray74);
        printWriter21.println(charArray74);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray74, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.exp();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex26.divide(complex28);
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex23.add(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex22.add(complex23);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ja");
        printStream34.print(100.0f);
        boolean boolean37 = printStream34.checkError();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        java.io.PrintStream printStream52 = printStream34.printf(locale40, "", (java.lang.Object[]) throwableArray51);
        printStream52.close();
        printStream52.println('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex68, complex71 };
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer57.transform2(complexArray76);
        java.io.PrintStream printStream78 = printStream52.printf("deu", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex84 = complex79.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        double double87 = complex85.getImaginary();
        org.apache.commons.math.complex.Complex complex88 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex83.pow(complex85);
        printStream52.println((java.lang.Object) complex89);
        org.apache.commons.math.complex.Complex complex91 = complex32.pow(complex89);
        org.apache.commons.math.complex.Complex complex92 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex93 = complex32.log();
        org.apache.commons.math.complex.Complex complex94 = complex32.exp();
        org.apache.commons.math.complex.Complex complex95 = complex18.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex18.asin();
        org.apache.commons.math.complex.Complex complex97 = complex96.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException(throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException13);
        java.lang.Throwable[] throwableArray15 = functionEvaluationException13.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream17 = printStream1.printf("fr", (java.lang.Object[]) throwableArray15);
        boolean boolean18 = printStream1.checkError();
        printStream1.print((float) 'x');
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getCountry();
        boolean boolean4 = locale2.hasExtensions();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("ja");
        printWriter6.println((float) 10);
        printWriter6.println((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        printStream14.print(100.0f);
        boolean boolean17 = printStream14.checkError();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getCountry();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayCountry(locale20);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException(throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException29);
        java.lang.Throwable[] throwableArray31 = functionEvaluationException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream14.printf(locale20, "", (java.lang.Object[]) throwableArray31);
        printStream32.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer35.inversetransform(doubleArray37);
        java.io.PrintStream printStream39 = printStream32.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray38);
        java.io.PrintWriter printWriter40 = printWriter6.format(locale11, "ja", (java.lang.Object[]) complexArray38);
        java.util.Locale locale41 = locale11.stripExtensions();
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale41.getDisplayScript(locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        java.lang.String str47 = locale2.getDisplayCountry(locale44);
        java.lang.String str48 = locale1.getDisplayName(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = locale44.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "de" + "'", str21, "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        java.lang.Object obj35 = null;
        printWriter34.print(obj35);
        printWriter34.print('#');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.inversetransform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex8, complex11 };
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray13, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.transform(complexArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ja");
        printStream18.print(100.0f);
        boolean boolean21 = printStream18.checkError();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream18.printf(locale24, "", (java.lang.Object[]) throwableArray35);
        printStream36.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer39.inversetransform(doubleArray41);
        java.io.PrintStream printStream43 = printStream36.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        java.io.PrintStream printStream53 = printStream43.printf("japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer7.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex56, complex59 };
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer65.transform(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer55.transform2(complexArray74);
        double[] doubleArray78 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer55.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer7.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer81.inversetransform(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer7.inversetransform(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex88 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex89 = complex88.cosh();
        double double90 = complex88.getImaginary();
        org.apache.commons.math.complex.Complex complex91 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex92 = complex91.cosh();
        org.apache.commons.math.complex.Complex[] complexArray93 = new org.apache.commons.math.complex.Complex[] { complex88, complex91 };
        org.apache.commons.math.complex.Complex[] complexArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray93, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer87.transform(complexArray95);
        org.apache.commons.math.complex.Complex[] complexArray98 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray96, (double) 10);
        org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform2(complexArray98);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0d + "'", double90 == 1.0d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray98);
        org.junit.Assert.assertNotNull(complexArray99);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        char[] charArray59 = new char[] {};
        printStream1.print(charArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream64.println(0);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex70, complex73 };
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.0d);
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException(throwable82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException84);
        java.lang.Throwable[] throwableArray86 = functionEvaluationException84.getSuppressed();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray77, (java.lang.Throwable) mathException87);
        java.lang.Object[] objArray89 = mathException87.getArguments();
        java.io.PrintStream printStream90 = printStream64.printf("", objArray89);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("cn", "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex8.tanh();
        boolean boolean13 = complex12.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5403023058681398d + "'", double10 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable2);
        double double4 = functionEvaluationException3.getArgument();
        java.io.PrintStream printStream8 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream8, false);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex16, complex19 };
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 0.0d);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray23, (java.lang.Throwable) mathException33);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, Double.NaN);
        java.io.PrintStream printStream37 = printStream8.printf(locale12, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex[] complexArray47 = new org.apache.commons.math.complex.Complex[] { complex42, complex45 };
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, 0.0d);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException(throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException56);
        java.lang.Throwable[] throwableArray58 = functionEvaluationException56.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray49, (java.lang.Throwable) mathException59);
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, Double.NaN);
        java.io.PrintStream printStream63 = printStream37.printf(locale38, "hi!", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException80);
        java.lang.Throwable[] throwableArray82 = functionEvaluationException80.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray73, (java.lang.Throwable) mathException83);
        java.lang.Throwable[] throwableArray85 = functionEvaluationException84.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException84);
        functionEvaluationException3.addSuppressed((java.lang.Throwable) functionEvaluationException84);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.negate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex10 = complex5.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex5.tan();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex5);
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println(false);
        boolean boolean6 = printStream1.checkError();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex10, complex13 };
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.inversetransform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer8.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex39, complex42 };
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer28.transform2(complexArray47);
        double[] doubleArray51 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer8.transform2(doubleArray51);
        java.io.PrintStream printStream54 = printStream1.printf("hi!", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream56 = printStream1.append(' ');
        printStream56.println();
        printStream56.println(52.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printStream56);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder3.clearExtensions();
        java.util.Locale.Builder builder12 = builder3.setRegion("de");
        java.util.Locale.Builder builder14 = builder3.setLanguageTag("deu");
        java.util.Locale.Builder builder16 = builder14.setLanguage("ja");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setUnicodeLocaleKeyword("chinois (Taiwan)", "org.apache.commons.math.FunctionEvaluationException: zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: chinois (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.println((long) 0);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.io.PrintStream printStream24 = printStream22.append('u');
        java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream24, true);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        printStream26.println(true);
        printStream26.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream24);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException(throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException13);
        java.lang.Throwable[] throwableArray15 = functionEvaluationException13.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream17 = printStream1.printf("fr", (java.lang.Object[]) throwableArray15);
        boolean boolean18 = printStream17.checkError();
        java.io.PrintStream printStream20 = new java.io.PrintStream("ja");
        printStream20.print(100.0f);
        printStream20.print(true);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        java.io.PrintStream printStream36 = printStream20.printf("fr", (java.lang.Object[]) throwableArray34);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream38, false);
        printStream38.write((int) 'u');
        printStream38.println("jpn");
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ja");
        printStream50.print(100.0f);
        printStream50.print((-1.0f));
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream50, true);
        printStream50.print("");
        printStream50.println((int) '4');
        printStream50.print((int) (short) 10);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ja");
        printStream64.write((int) '#');
        printStream64.close();
        printStream64.println((java.lang.Object) 10.0d);
        printStream64.write(100);
        printStream64.println(false);
        java.io.PrintStream printStream75 = new java.io.PrintStream((java.io.OutputStream) printStream64, true);
        printStream64.print('4');
        printStream64.print("\u53f0\u6e7e");
        java.io.PrintStream printStream81 = printStream64.append('a');
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter("ja");
        printWriter83.println((float) 10);
        printWriter83.println((int) (byte) 10);
        printWriter83.print(false);
        java.lang.Object[] objArray91 = null;
        java.io.PrintWriter printWriter92 = printWriter83.printf("de", objArray91);
        char[] charArray93 = new char[] {};
        printWriter83.write(charArray93);
        printStream64.print(charArray93);
        printStream50.print(charArray93);
        printWriter48.write(charArray93);
        printStream36.println(charArray93);
        printStream17.print(charArray93);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[]");
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        printWriter1.write((int) (byte) 10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex16, complex19 };
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.inversetransform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.transform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer33.inversetransform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer15.inversetransform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer39.transform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer38.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer15.transform2(doubleArray54);
        java.io.PrintWriter printWriter59 = printWriter1.printf("\u30d5\u30e9\u30f3\u30b9", (java.lang.Object[]) complexArray58);
        printWriter59.println("fr-FR");
        java.io.PrintWriter printWriter63 = printWriter59.append((java.lang.CharSequence) "\u65e5\u6587");
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter63);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        java.util.Locale locale34 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.inversetransform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer36.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex57, complex60 };
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.transform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.inversetransform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer56.transform(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer36.transform2(doubleArray75);
        java.io.PrintWriter printWriter77 = printWriter33.format(locale34, "org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray76);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter33, true);
        printWriter33.println("Taiwan");
        printWriter33.print('u');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        double double7 = complex5.getImaginary();
        boolean boolean8 = complex5.isNaN();
        double double9 = complex5.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.465752699391296d + "'", double7 == 2.465752699391296d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.6998110267869735d + "'", double9 == 0.6998110267869735d);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        printWriter1.flush();
        printWriter1.write((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getDisplayName();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.inversetransform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer20.transform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer19.inversetransform2(doubleArray35);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream40, false);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray55, (java.lang.Throwable) mathException65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, Double.NaN);
        java.io.PrintStream printStream69 = printStream40.printf(locale44, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer19.transform(complexArray68);
        java.io.PrintWriter printWriter72 = printWriter1.printf(locale14, "hi!", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter74 = printWriter72.append(' ');
        printWriter72.print(0);
        printWriter72.print((long) '4');
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter74);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) 100L, 1.3386875148630042d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 1.3386875148630042]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        boolean boolean4 = printStream1.checkError();
        printStream1.println((int) 'x');
        printStream1.write((int) '4');
        java.io.PrintStream printStream10 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream12 = printStream10.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Throwable[] throwableArray41 = functionEvaluationException39.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray32, (java.lang.Throwable) mathException42);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, Double.NaN);
        java.io.PrintStream printStream46 = printStream17.printf(locale21, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter47 = printWriter14.format("ja", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("ja");
        printWriter49.println((float) 10);
        printWriter49.println((int) (byte) 10);
        printWriter49.print(false);
        java.lang.Object[] objArray57 = null;
        java.io.PrintWriter printWriter58 = printWriter49.printf("de", objArray57);
        char[] charArray59 = new char[] {};
        printWriter49.write(charArray59);
        printWriter47.println(charArray59);
        printStream12.print(charArray59);
        printStream1.println(charArray59);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.println((int) (short) -1);
        printWriter23.println(true);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder28.setExtension('a', "de");
        java.util.Locale.Builder builder32 = builder28.clear();
        java.util.Locale.Builder builder33 = builder28.clear();
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder37 = builder33.removeUnicodeLocaleAttribute("CHN");
        java.util.Locale locale38 = builder37.build();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex51, complex54 };
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform(complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer40.transform2(complexArray59);
        java.io.PrintWriter printWriter61 = printWriter23.format(locale38, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray60);
        printWriter61.print((float) 'a');
        printWriter61.print("org.apache.commons.math.functionevaluationexception: hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray17 = mathException16.getArguments();
        java.io.PrintStream printStream18 = printStream1.format("\u65e5\u672c\u8a9e", objArray17);
        printStream1.print((int) '#');
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale21.getLanguage();
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.toLanguageTag();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray36, (java.lang.Throwable) mathException46);
        java.lang.String str48 = functionEvaluationException47.getPattern();
        java.lang.Throwable[] throwableArray49 = functionEvaluationException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream1.format(locale21, "fr", (java.lang.Object[]) throwableArray49);
        java.lang.CharSequence charSequence51 = null;
        java.io.PrintStream printStream52 = printStream50.append(charSequence51);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr" + "'", str22, "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream52);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println(false);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale7 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: de");
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray39 = functionEvaluationException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray30, (java.lang.Throwable) mathException40);
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, Double.NaN);
        java.io.PrintStream printStream44 = printStream15.printf(locale19, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray43);
        java.io.PrintWriter printWriter45 = printWriter12.format("ja", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        java.io.PrintStream printStream47 = printStream5.format(locale7, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Object[]) complexArray43);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ja");
        printStream49.write((int) '#');
        printStream49.close();
        printStream49.println((java.lang.Object) 10.0d);
        printStream49.write(100);
        printStream49.println(false);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream49, true);
        printStream49.print('4');
        printStream49.print("\u53f0\u6e7e");
        java.io.PrintStream printStream66 = printStream49.append('a');
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("ja");
        printWriter68.println((float) 10);
        printWriter68.println((int) (byte) 10);
        printWriter68.print(false);
        java.lang.Object[] objArray76 = null;
        java.io.PrintWriter printWriter77 = printWriter68.printf("de", objArray76);
        char[] charArray78 = new char[] {};
        printWriter68.write(charArray78);
        printStream49.print(charArray78);
        printStream47.print(charArray78);
        java.lang.Object[] objArray83 = null;
        java.io.PrintStream printStream84 = printStream47.format("\u65e5\u6587", objArray83);
        printStream47.println(true);
        printStream47.print((float) 'a');
        printStream47.write(0);
        org.junit.Assert.assertEquals(locale7.toString(), "org.apache.commons.math.functionevaluationexception: de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.functionevaluationexception: de" + "'", str8, "org.apache.commons.math.functionevaluationexception: de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[]");
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Japanese", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Japanese", strMap4);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode9 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet8, filteringMode9);
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale12.getISO3Language();
        java.lang.String str15 = locale12.getISO3Country();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("ja-JP", strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.print(0L);
        printStream24.println(2.465752699391296d);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        boolean boolean33 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex34 = complex31.asin();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.exp();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex40.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex40);
        org.apache.commons.math.complex.Complex complex45 = complex35.atan();
        org.apache.commons.math.complex.Complex complex46 = complex31.add(complex35);
        org.apache.commons.math.complex.Complex complex47 = complex35.asin();
        printStream24.print((java.lang.Object) complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.sqrt1z();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.parse("de");
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str54 = locale53.getDisplayName();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet55);
        boolean boolean57 = complex47.equals((java.lang.Object) strList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.parse("Japanese", strMap59);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale61);
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strSet63, filteringMode64);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strList56, filteringMode64);
        java.lang.String str67 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList66);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + filteringMode9 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode9.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "TWN" + "'", str13, "TWN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "TWN" + "'", str15, "TWN");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("de-de", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer10.inversetransform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex15, complex18 };
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray20, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.transform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.inversetransform(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer14.transform(doubleArray29);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer14.transform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex55, complex58 };
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.inversetransform(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer54.transform(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer14.transform2(doubleArray69);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray69, (double) 100.0f);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer10.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(doubleArray69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform(univariateRealFunction77, 0.5835053242126248d, (double) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1000.0, 3200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1000.0, 3200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        double[] doubleArray23 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex39, complex42 };
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer28.transform2(complexArray47);
        double[] doubleArray51 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer28.transform2(doubleArray51);
        java.io.PrintStream printStream53 = printStream26.printf("CN", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.transform2(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer55.inversetransform(doubleArray57);
        double[] doubleArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, 1.3128648970655075d);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.transform2(doubleArray60);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform(univariateRealFunction62, 0.8414709848078965d, (double) (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8414709848078965, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[13.128648970655075]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[13.128648970655075]");
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex5, complex8 };
        org.apache.commons.math.complex.Complex[] complexArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray10, 0.0d);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray12, (java.lang.Throwable) mathException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.7716133340725972d, (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException26);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.4819056024268544d, 0.8813735870195428d);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale locale23 = builder21.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintStream printStream40 = printStream37.append('#');
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale locale42 = builder41.build();
        java.util.Locale locale45 = new java.util.Locale("ja", "");
        java.lang.String str46 = locale42.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale42.getDisplayLanguage(locale47);
        java.util.Locale.setDefault(locale42);
        printStream40.print((java.lang.Object) locale42);
        java.lang.String str51 = locale42.getVariant();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.toLanguageTag();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale0.getDisplayName(locale2);
        java.util.Set<java.lang.Character> charSet6 = locale2.getExtensionKeys();
        boolean boolean7 = locale2.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException", "\u30c9\u30a4\u30c4");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream7 = new java.io.PrintStream("fr");
        printStream7.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] { languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale28);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.PRC;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayCountry(locale34);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getCountry();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayCountry(locale46);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale25, locale27, locale28, locale30, locale31, locale34, locale37, locale38, locale40, locale42, locale43, locale44, locale49, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode60 = null;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet59, filteringMode60);
        printStream7.print((java.lang.Object) languageRangeList14);
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex67, complex70 };
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer66.transform(complexArray74);
        java.io.PrintStream printStream76 = printStream7.printf(locale63, "de", (java.lang.Object[]) complexArray74);
        java.util.Set<java.lang.String> strSet77 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale63.getDisplayScript();
        java.util.Locale.setDefault(category5, locale63);
        java.lang.String str80 = locale4.getDisplayScript(locale63);
        java.lang.String str81 = locale63.getDisplayLanguage();
        java.lang.String str82 = locale63.getDisplayVariant();
        java.util.Locale locale83 = locale63.stripExtensions();
        java.lang.String str84 = locale2.getDisplayLanguage(locale63);
        java.lang.String str85 = locale2.getVariant();
        java.util.Set<java.lang.String> strSet86 = locale2.getUnicodeLocaleAttributes();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr" + "'", str26, "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de" + "'", str35, "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "de" + "'", str50, "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str81, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.mathexception" + "'", str84, "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strSet86);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        double[] doubleArray23 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.inversetransform(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer26.transform(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer25.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer47.inversetransform(doubleArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer25.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer53.inversetransform(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        double[] doubleArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray55, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        double[] doubleArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray55, 1.179501321915592d);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer25.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.inversetransform(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray70);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, Double.POSITIVE_INFINITY);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform2(doubleArray74);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray74, (-1.0d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[11.795013219155921]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-Infinity, -Infinity, Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-Infinity, -Infinity, Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-Infinity, -Infinity, Infinity, -Infinity]");
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr-ca");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.acos();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex14.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.exp();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex20.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex17.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex17.asin();
        org.apache.commons.math.complex.Complex complex26 = complex11.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex11.negate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        boolean boolean31 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.exp();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex34.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.exp();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex40.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex37.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.add(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex30.pow(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex11.pow(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex6.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex55 = complex53.sqrt1z();
        org.apache.commons.math.complex.Complex complex56 = complex55.asin();
        org.apache.commons.math.complex.Complex complex57 = complex56.acos();
        org.apache.commons.math.complex.Complex complex58 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex59 = complex50.add(complex58);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex63.exp();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex65.divide(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex60.multiply(complex65);
        org.apache.commons.math.complex.Complex complex70 = complex60.atan();
        org.apache.commons.math.complex.Complex complex71 = complex70.tanh();
        org.apache.commons.math.complex.Complex complex72 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex73 = complex59.add(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        printStream3.close();
        printStream3.print((int) (byte) 0);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.write((int) '#');
        printStream10.close();
        printStream10.println((java.lang.Object) 10.0d);
        printStream10.write(100);
        printStream10.println(false);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream10, true);
        printStream10.print('4');
        printStream10.print("\u53f0\u6e7e");
        java.io.PrintStream printStream27 = printStream10.append('a');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("ja");
        printWriter29.println((float) 10);
        printWriter29.println((int) (byte) 10);
        printWriter29.print(false);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter29.printf("de", objArray37);
        char[] charArray39 = new char[] {};
        printWriter29.write(charArray39);
        printStream10.print(charArray39);
        printStream3.println(charArray39);
        printStream3.print(false);
        java.lang.CharSequence charSequence45 = null;
        java.io.PrintStream printStream46 = printStream3.append(charSequence45);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ja");
        printStream6.print(100.0f);
        boolean boolean9 = printStream6.checkError();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getCountry();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayCountry(locale12);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream24 = printStream6.printf(locale12, "", (java.lang.Object[]) throwableArray23);
        java.io.PrintWriter printWriter25 = printWriter3.printf("fra", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex30, complex33 };
        org.apache.commons.math.complex.Complex[] complexArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray35, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.transform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer29.transform2(complexArray48);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.String str57 = functionEvaluationException55.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray49, (java.lang.Throwable) functionEvaluationException55);
        java.io.PrintWriter printWriter59 = printWriter25.format("fr", (java.lang.Object[]) complexArray49);
        printWriter59.println((float) '#');
        printWriter59.println();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex68, complex71 };
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(0.13891591109058607d, "org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray73);
        java.io.PrintWriter printWriter83 = printWriter59.format("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        java.lang.Throwable[] throwableArray92 = functionEvaluationException91.getSuppressed();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("ko", (java.lang.Object[]) throwableArray92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException96 = new org.apache.commons.math.FunctionEvaluationException((-0.8813735870195429d), "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) throwableArray92, (java.lang.Throwable) functionEvaluationException95);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "Italian", (java.lang.Object[]) complexArray73, (java.lang.Throwable) functionEvaluationException97);
        java.lang.Object[] objArray99 = functionEvaluationException97.getArguments();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de" + "'", str13, "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale18);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getScript();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayCountry(locale36);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale15, locale17, locale18, locale20, locale21, locale24, locale27, locale28, locale30, locale32, locale33, locale34, locale39, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale59);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Locale locale62 = java.util.Locale.PRC;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayCountry(locale65);
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = locale69.getISO3Country();
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.lang.String str72 = locale71.getScript();
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.lang.String str76 = locale75.getCountry();
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = locale75.getDisplayCountry(locale77);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale80.getLanguage();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale56, locale58, locale59, locale61, locale62, locale65, locale68, locale69, locale71, locale73, locale74, locale75, locale80, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale locale86 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale locale87 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap88);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "de" + "'", str37, "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "de" + "'", str40, "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fr" + "'", str57, "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "de" + "'", str66, "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "de" + "'", str78, "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "de" + "'", str81, "de");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(locale86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertNotNull(languageRangeList89);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex4.asin();
        boolean boolean8 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex4.cos();
        org.apache.commons.math.complex.Complex complex10 = complex3.pow(complex4);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex12.negate();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex4.multiply(complex15);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print('4');
        printStream1.print("\u53f0\u6e7e");
        java.io.PrintStream printStream18 = printStream1.append('a');
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream19.print(false);
        java.io.PrintStream printStream23 = printStream19.append('a');
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex2.cos();
        org.apache.commons.math.complex.Complex complex7 = complex2.sin();
        org.apache.commons.math.complex.Complex complex8 = complex2.sqrt();
        double double9 = complex2.abs();
        boolean boolean10 = complex2.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en", 1.2942559587467382d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.2942559587467382");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream7.println(0L);
        printStream7.println();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintStream printStream14 = printStream7.append('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex16, complex19 };
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.inversetransform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.transform(doubleArray30);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray42, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer15.transform(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex56, complex59 };
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.inversetransform(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer55.transform(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer15.transform2(doubleArray70);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) 100.0f);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (-7.700928986143563E-6d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        printStream14.print((java.lang.Object) doubleArray75);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-0.007700928986143563, -0.024642972755659402, 7.700928986143563E-4, -0.040044830727946526]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.007700928986143563, -0.024642972755659402, 7.700928986143563E-4, -0.040044830727946526]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-0.007700928986143563, -0.024642972755659402, 7.700928986143563E-4, -0.040044830727946526]");
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: ENGLISH (UNITED STATES)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception: english (united states)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        printStream19.print(0.0d);
        printStream19.print(true);
        java.io.PrintStream printStream28 = printStream19.append((java.lang.CharSequence) "ja");
        boolean boolean29 = printStream28.checkError();
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream28);
        printStream30.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex20, complex23 };
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.0d);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException34);
        java.lang.Throwable[] throwableArray36 = functionEvaluationException34.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray27, (java.lang.Throwable) mathException37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, Double.NaN);
        java.io.PrintStream printStream41 = printStream12.printf(locale16, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray40);
        boolean boolean42 = complex7.equals((java.lang.Object) complexArray40);
        org.apache.commons.math.complex.Complex complex43 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex46.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex50.exp();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex52.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex49.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex49.asin();
        org.apache.commons.math.complex.Complex complex58 = complex43.subtract(complex49);
        org.apache.commons.math.complex.Complex complex59 = complex49.atan();
        org.apache.commons.math.complex.Complex complex60 = complex49.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fra");
        printStream1.print((int) (byte) 10);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.flush();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList19);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale25);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayCountry(locale31);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getScript();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayCountry(locale43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale22, locale24, locale25, locale27, locale28, locale31, locale34, locale35, locale37, locale39, locale40, locale41, locale46, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList50);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex55.exp();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex57.divide(complex59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { locale52, (short) -1, 'a', complex57, (short) 10 };
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("ja", objArray62, (java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException69);
        double double72 = functionEvaluationException69.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException69);
        double double75 = functionEvaluationException74.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "France", (java.lang.Throwable) functionEvaluationException74);
        java.lang.Throwable[] throwableArray77 = functionEvaluationException76.getSuppressed();
        java.io.PrintStream printStream78 = printStream4.printf("ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: HI!", (java.lang.Object[]) throwableArray77);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "de" + "'", str32, "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(printStream78);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.atan();
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex0.add(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0253864209002483d + "'", double13 == 1.0253864209002483d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.lang.String str10 = locale5.getCountry();
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale5.getDisplayCountry(locale11);
        java.lang.String str13 = locale11.getDisplayVariant();
        java.lang.String str15 = locale11.getExtension('a');
        java.lang.String str16 = locale11.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str16, "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.exp();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex7.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex13.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex10.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex19.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex17.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex4.multiply(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        org.apache.commons.math.complex.Complex complex36 = complex29.multiply(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex37.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer3.transform2(complexArray22);
        double[] doubleArray26 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer3.transform2(doubleArray26);
        java.io.PrintStream printStream28 = printStream1.printf("CN", (java.lang.Object[]) complexArray27);
        printStream1.print('a');
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            printWriter32.write("", (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.functionevaluationexception");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex59.exp();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex61.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex65.exp();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex67.divide(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex64.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex64.tanh();
        printStream1.print((java.lang.Object) complex72);
        printStream1.print((double) 100L);
        printStream1.print(0L);
        java.io.PrintStream printStream79 = printStream1.append('a');
        printStream1.println();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(printStream79);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray13 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 35.0d);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable16);
        double double18 = functionEvaluationException17.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray13, (java.lang.Throwable) functionEvaluationException17);
        java.io.PrintStream printStream23 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.toLanguageTag();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream37 = new java.io.PrintStream("ja");
        printStream37.print(100.0f);
        boolean boolean40 = printStream37.checkError();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayCountry(locale43);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        java.io.PrintStream printStream55 = printStream37.printf(locale43, "", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter56 = printWriter34.printf("fra", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        java.io.PrintWriter printWriter66 = printWriter56.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        double double71 = complex69.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex69, complex72 };
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer68.transform(complexArray76);
        java.io.PrintWriter printWriter78 = printWriter56.format("fra", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter25.format(locale26, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Throwable) mathException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(1.179501321915592d, "org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray13, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException82);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ja" + "'", str27, "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr" + "'", str29, "fr");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "japonais" + "'", str31, "japonais");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.inversetransform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer18.inversetransform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.inversetransform(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer24.transform(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer23.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex55, complex58 };
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform(complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer44.transform2(complexArray63);
        double[] doubleArray67 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer44.transform2(doubleArray67);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer73.inversetransform(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 100);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) (byte) 10);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform(doubleArray81);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (double) (short) 100);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1000000.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1000000.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1000000.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1000000.0]");
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double5 = languageRange4.getWeight();
        java.util.Locale.LanguageRange languageRange8 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange8 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Locale.LanguageRange languageRange16 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double17 = languageRange16.getWeight();
        java.util.Locale.LanguageRange languageRange20 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] { languageRange16, languageRange20 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange languageRange26 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] { languageRange26 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale42);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getCountry();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayCountry(locale48);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getScript();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getCountry();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale58.getDisplayCountry(locale60);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getLanguage();
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale39, locale41, locale42, locale44, locale45, locale48, locale51, locale52, locale54, locale56, locale57, locale58, locale63, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList70, filteringMode71);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList70);
        java.lang.String str74 = locale0.getDisplayLanguage(locale73);
        java.lang.String str75 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fr" + "'", str40, "fr");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "de" + "'", str49, "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "de" + "'", str61, "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str74, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print('4');
        printStream1.print("fr_FR");
        printStream1.print(1.0f);
        printStream1.println((float) 1);
        printStream1.println("italien");
        printStream1.println();
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 2.3313818435625526d);
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, true);
        java.io.PrintWriter printWriter42 = printWriter40.append('4');
        printWriter42.println("TW");
        printWriter42.println((float) (byte) 1);
        printWriter42.print(7.838747943897383d);
        printWriter42.write("Canada", (int) (byte) -1, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.write((int) 'u');
        printStream1.println("jpn");
        printStream1.print((double) 1L);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex20, complex23 };
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.0d);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException(throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException34);
        java.lang.Throwable[] throwableArray36 = functionEvaluationException34.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray27, (java.lang.Throwable) mathException37);
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, Double.NaN);
        java.io.PrintStream printStream41 = printStream12.printf(locale16, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream42 = printStream1.printf("\u65e5\u672c\u8a9e", (java.lang.Object[]) complexArray40);
        printStream1.print((int) (short) 0);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ja");
        printStream47.print(100.0f);
        boolean boolean50 = printStream47.checkError();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = locale51.getCountry();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayCountry(locale53);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        java.io.PrintStream printStream65 = printStream47.printf(locale53, "", (java.lang.Object[]) throwableArray64);
        printStream65.close();
        printStream65.println('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        double double73 = complex71.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex71, complex74 };
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.transform(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        double double83 = complex81.getImaginary();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex[] complexArray86 = new org.apache.commons.math.complex.Complex[] { complex81, complex84 };
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer80.transform(complexArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer70.transform2(complexArray89);
        java.io.PrintStream printStream91 = printStream65.printf("deu", (java.lang.Object[]) complexArray90);
        java.io.PrintStream printStream92 = printStream1.printf("\u4e2d\u6587", (java.lang.Object[]) complexArray90);
        java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println((int) 'x');
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de" + "'", str54, "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(' ');
        printWriter1.println((float) 10L);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("ja");
        printWriter33.flush();
        printWriter33.close();
        printWriter33.print("CN");
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream42 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream42, false);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException(throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException64);
        java.lang.Throwable[] throwableArray66 = functionEvaluationException64.getSuppressed();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray57, (java.lang.Throwable) mathException67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, Double.NaN);
        java.io.PrintStream printStream71 = printStream42.printf(locale46, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray70);
        java.io.PrintWriter printWriter72 = printWriter39.format("ja", (java.lang.Object[]) complexArray70);
        java.io.PrintStream printStream74 = new java.io.PrintStream("ja");
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale75);
        java.lang.String str77 = locale75.getScript();
        java.lang.String str78 = locale75.getDisplayLanguage();
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.lang.String str80 = locale79.getScript();
        java.lang.String str81 = locale79.getDisplayName();
        java.lang.String str82 = locale75.getDisplayLanguage(locale79);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer86.inversetransform(doubleArray88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray89);
        java.io.PrintStream printStream91 = printStream74.printf(locale79, "CN", (java.lang.Object[]) complexArray89);
        char[] charArray92 = new char[] {};
        printStream74.print(charArray92);
        printWriter39.print(charArray92);
        printWriter33.println(charArray92);
        printWriter1.write(charArray92);
        boolean boolean97 = printWriter1.checkError();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str78, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str81, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str82, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double3 = languageRange2.getWeight();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange2, languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale12.getDisplayCountry(locale14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("ja");
        printWriter17.println((float) 10);
        printWriter17.println((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream25 = new java.io.PrintStream("ja");
        printStream25.print(100.0f);
        boolean boolean28 = printStream25.checkError();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayCountry(locale31);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        java.io.PrintStream printStream43 = printStream25.printf(locale31, "", (java.lang.Object[]) throwableArray42);
        printStream43.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer46.inversetransform(doubleArray48);
        java.io.PrintStream printStream50 = printStream43.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray49);
        java.io.PrintWriter printWriter51 = printWriter17.format(locale22, "ja", (java.lang.Object[]) complexArray49);
        java.util.Locale locale52 = locale22.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.toLanguageTag();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale22.getDisplayCountry(locale53);
        java.lang.String str57 = locale12.getDisplayName(locale22);
        java.util.Set<java.lang.String> strSet58 = locale22.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet58);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "de" + "'", str32, "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fr" + "'", str54, "fr");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u6587" + "'", str57, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 35.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer0.inversetransform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.inversetransform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer13.transform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer12.inversetransform2(doubleArray28);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ja");
        printStream33.print(100.0f);
        printStream33.print((-1.0f));
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, true);
        printStream33.print("");
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = locale42.getDisplayCountry(locale44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        java.io.PrintStream printStream70 = printStream33.format(locale44, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer12.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.getImaginary();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex74, complex77 };
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer73.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.inversetransform(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer73.transform(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform2(doubleArray88);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform(univariateRealFunction92, 0.0d, 0.0d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        char[] charArray11 = new char[] {};
        printWriter1.write(charArray11);
        printWriter1.print((long) 0);
        printWriter1.write((int) (short) 1);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.close();
        printWriter1.write((int) 'a');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        printWriter1.println((java.lang.Object) locale9);
        printWriter1.println();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("ja");
        printWriter13.println((float) 10);
        printWriter13.println((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream21 = new java.io.PrintStream("ja");
        printStream21.print(100.0f);
        boolean boolean24 = printStream21.checkError();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayCountry(locale27);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException36);
        java.lang.Throwable[] throwableArray38 = functionEvaluationException36.getSuppressed();
        java.io.PrintStream printStream39 = printStream21.printf(locale27, "", (java.lang.Object[]) throwableArray38);
        printStream39.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer42.inversetransform(doubleArray44);
        java.io.PrintStream printStream46 = printStream39.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter47 = printWriter13.format(locale18, "ja", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("ja");
        printWriter49.println((float) 10);
        char[] charArray57 = new char[] { 'u', 'a', '4', '#', 'a' };
        printWriter49.write(charArray57);
        printWriter47.print(charArray57);
        printWriter1.write(charArray57);
        printWriter1.println((long) (short) 100);
        printWriter1.print("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35");
        printWriter1.print((float) 100L);
        printWriter1.println("\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "de" + "'", str28, "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "ua4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "ua4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[u, a, 4, #, a]");
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.exp();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex12.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex9.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.add(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex2.pow(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex2.tan();
        org.apache.commons.math.complex.Complex complex22 = complex2.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        double double25 = complex23.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de-DE");
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        printWriter45.println();
        java.io.PrintStream printStream55 = new java.io.PrintStream("ja");
        printStream55.print(100.0f);
        printStream55.print((-1.0f));
        java.io.PrintStream printStream61 = new java.io.PrintStream((java.io.OutputStream) printStream55, true);
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getLanguage();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray67 = mathException66.getArguments();
        java.io.PrintStream printStream68 = printStream61.printf(locale62, "hi!", objArray67);
        java.io.PrintWriter printWriter69 = printWriter45.printf("fr_JA", objArray67);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.getImaginary();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex75, complex78 };
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 0.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(1.9820622389532458d, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray80, (java.lang.Throwable) functionEvaluationException92);
        java.io.PrintWriter printWriter95 = printWriter70.format("fra", (java.lang.Object[]) complexArray80);
        // The following exception was thrown during execution in test generation
        try {
            printWriter70.write("und-italien", 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ja" + "'", str63, "ja");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(printWriter95);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Japanese");
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.io.PrintStream printStream6 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.toLanguageTag();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ja");
        printStream20.print(100.0f);
        boolean boolean23 = printStream20.checkError();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayCountry(locale26);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Throwable[] throwableArray37 = functionEvaluationException35.getSuppressed();
        java.io.PrintStream printStream38 = printStream20.printf(locale26, "", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter17.printf("fra", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.io.PrintWriter printWriter49 = printWriter39.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex52, complex55 };
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.transform(complexArray59);
        java.io.PrintWriter printWriter61 = printWriter39.format("fra", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter8.format(locale9, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray60);
        java.util.Locale.Builder builder63 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("japonais");
        java.util.Locale locale66 = builder65.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder68 = builder65.removeUnicodeLocaleAttribute("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr" + "'", str12, "fr");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "japonais" + "'", str14, "japonais");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "japonais");
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.println((long) 0);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream19);
        java.lang.String[] strArray29 = java.util.Locale.getISOLanguages();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale44);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale48.getDisplayCountry(locale50);
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale54.getISO3Country();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getScript();
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getCountry();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale60.getDisplayCountry(locale62);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale65.getLanguage();
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale41, locale43, locale44, locale46, locale47, locale50, locale53, locale54, locale56, locale58, locale59, locale60, locale65, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList69);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex74.exp();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex76.divide(complex78);
        java.lang.Object[] objArray81 = new java.lang.Object[] { locale71, (short) -1, 'a', complex76, (short) 10 };
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException(throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("ja", objArray81, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "fr_JA", (java.lang.Object[]) strArray29, (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException(1.9820622389532458d, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", (java.lang.Throwable) functionEvaluationException90);
        printStream19.println((java.lang.Object) functionEvaluationException93);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "de" + "'", str63, "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "de" + "'", str66, "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(objArray81);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        boolean boolean3 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("ja");
        printWriter9.println((float) 10);
        printWriter9.println((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        printStream17.print(100.0f);
        boolean boolean20 = printStream17.checkError();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayCountry(locale23);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream17.printf(locale23, "", (java.lang.Object[]) throwableArray34);
        printStream35.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer38.inversetransform(doubleArray40);
        java.io.PrintStream printStream42 = printStream35.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray41);
        java.io.PrintWriter printWriter43 = printWriter9.format(locale14, "ja", (java.lang.Object[]) complexArray41);
        java.util.Locale locale44 = locale14.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getDisplayScript();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale14.getDisplayVariant(locale45);
        java.util.Locale.setDefault(category0, locale14);
        java.io.PrintStream printStream51 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream51, false);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException73);
        java.lang.Throwable[] throwableArray75 = functionEvaluationException73.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray66, (java.lang.Throwable) mathException76);
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, Double.NaN);
        java.io.PrintStream printStream80 = printStream51.printf(locale55, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray79);
        java.util.Locale locale83 = new java.util.Locale("chn", "Japan");
        java.lang.String str84 = locale83.getVariant();
        java.lang.String str85 = locale55.getDisplayVariant(locale83);
        java.util.Locale.setDefault(category0, locale55);
        boolean boolean87 = locale55.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertEquals(locale83.toString(), "chn_JAPAN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getScript();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getDisplayName();
        java.util.Locale.setDefault(locale9);
        java.lang.String str14 = locale5.getDisplayCountry(locale9);
        java.lang.String str15 = locale5.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jpn" + "'", str6, "jpn");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str7, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str12, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex11.divide(complex13);
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex19.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex25.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex22.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex29.add(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.atan();
        org.apache.commons.math.complex.Complex complex34 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.exp();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex38.divide(complex40);
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex35.add(complex40);
        org.apache.commons.math.complex.Complex complex44 = complex30.divide(complex40);
        org.apache.commons.math.complex.Complex complex45 = complex13.add(complex30);
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.cos();
        org.apache.commons.math.complex.Complex complex48 = complex7.add(complex45);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        printStream70.println(1.557407724654902d);
        printStream70.println();
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.OutputStream) printStream70, true);
        printWriter75.write("org.apache.commons.math.MathException: ");
        printWriter75.print((float) 100L);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream9.write(byteArray13);
        printStream7.write(byteArray13);
        printStream7.println((int) 'u');
        printStream7.print((long) (short) 1);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getScript();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer25.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer25.transform2(complexArray44);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray55, (java.lang.Throwable) mathException65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer25.inversetransform(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (short) -1);
        java.io.PrintStream printStream72 = printStream7.format(locale22, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray55);
        printStream72.println((-1.0f));
        printStream72.println(true);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer0.inversetransform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer20.transform2(complexArray39);
        double[] doubleArray43 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(doubleArray43);
        double[] doubleArray48 = new double[] { (-0.5403023058681398d), 0L };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer50.inversetransform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.transform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.transform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.inversetransform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer58.transform(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform2(complexArray75);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform2(univariateRealFunction77, (-7.700928986143563E-6d), 1.9820622389532458d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-0.5403023058681398, 0.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex16.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Locale locale5 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale0.getDisplayLanguage(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Deutschland" + "'", str3, "Deutschland");
        org.junit.Assert.assertEquals(locale5.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream41 = printStream39.append(' ');
        printStream41.print((float) 0L);
        java.io.PrintStream printStream45 = printStream41.append('a');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream49 = printStream41.append((java.lang.CharSequence) "\u82f1\u8a9e", (int) '4', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -42");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getDisplayVariant();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Locale locale6 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.toLanguageTag();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale7.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale7.getDisplayScript(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = locale18.getDisplayLanguage();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale22.getDisplayName();
        java.lang.String str25 = locale18.getDisplayLanguage(locale22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer29.inversetransform(doubleArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray32);
        java.io.PrintStream printStream34 = printStream17.printf(locale22, "CN", (java.lang.Object[]) complexArray32);
        java.lang.String str35 = locale7.getDisplayName(locale22);
        java.lang.String str36 = locale7.getDisplayScript();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('a', "de");
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getVariant();
        java.lang.String str44 = locale42.getVariant();
        java.lang.String str45 = locale41.getDisplayLanguage(locale42);
        java.util.Locale.Builder builder46 = builder40.setLocale(locale42);
        java.util.Locale.Builder builder49 = builder46.setExtension('u', "ja");
        java.util.Locale.Builder builder50 = builder46.clearExtensions();
        java.util.Locale locale51 = builder50.build();
        java.util.Locale.Builder builder52 = builder50.clearExtensions();
        java.util.Locale locale53 = builder52.build();
        java.lang.String str54 = locale53.getVariant();
        java.lang.String str55 = locale7.getDisplayName(locale53);
        java.lang.String str56 = locale6.getDisplayName(locale53);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder57.setExtension('a', "de");
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getVariant();
        java.lang.String str64 = locale62.getVariant();
        java.lang.String str65 = locale61.getDisplayLanguage(locale62);
        java.util.Locale.Builder builder66 = builder60.setLocale(locale62);
        java.lang.String str67 = locale62.getCountry();
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str69 = locale62.getDisplayCountry(locale68);
        java.lang.String str70 = locale68.getDisplayVariant();
        java.lang.String str71 = locale6.getDisplayVariant(locale68);
        java.lang.String str72 = locale1.getDisplayVariant(locale6);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale6.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "japonais" + "'", str12, "japonais");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str25, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str35, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str45, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str55, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str56, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str65, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getDisplayVariant();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale4.getDisplayCountry(locale6);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("ja");
        printWriter9.println((float) 10);
        printWriter9.println((int) (byte) 10);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        printStream17.print(100.0f);
        boolean boolean20 = printStream17.checkError();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayCountry(locale23);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        java.io.PrintStream printStream35 = printStream17.printf(locale23, "", (java.lang.Object[]) throwableArray34);
        printStream35.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer38.inversetransform(doubleArray40);
        java.io.PrintStream printStream42 = printStream35.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray41);
        java.io.PrintWriter printWriter43 = printWriter9.format(locale14, "ja", (java.lang.Object[]) complexArray41);
        java.util.Locale locale44 = locale14.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.toLanguageTag();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale14.getDisplayCountry(locale45);
        java.lang.String str49 = locale4.getDisplayName(locale14);
        java.lang.String str50 = locale14.getDisplayVariant();
        java.lang.String str51 = locale1.getDisplayVariant(locale14);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Locale locale57 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "fr_JA", "deu");
        java.lang.String str58 = locale52.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale1.getDisplayLanguage(locale57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = locale1.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: ENGLISH (UNITED STATES)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: ENGLISH (UNITED STATES)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fr" + "'", str46, "fr");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u6587" + "'", str49, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str53, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale57.toString(), "org.apache.commons.math.functionevaluationexception: hi!_FR_JA_deu");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japan" + "'", str58, "Japan");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese" + "'", str60, "Chinese");
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ja");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("CHN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getVariant();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale27);
        java.util.Locale locale31 = new java.util.Locale("ja", "");
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getVariant();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getScript();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale15, locale16, locale19, locale21, locale22, locale25, locale26, locale27, locale31, locale32, locale33, locale36, locale38, locale40, locale41, locale44, locale45, locale46, locale48 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap54);
        java.util.Collection<java.util.Locale> localeCollection56 = null;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter(languageRangeList55, localeCollection56);
        java.io.PrintStream printStream59 = new java.io.PrintStream("ja");
        printStream59.print(100.0f);
        boolean boolean62 = printStream59.checkError();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale63.getDisplayCountry(locale65);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException74);
        java.lang.Throwable[] throwableArray76 = functionEvaluationException74.getSuppressed();
        java.io.PrintStream printStream77 = printStream59.printf(locale65, "", (java.lang.Object[]) throwableArray76);
        java.util.Set<java.lang.String> strSet78 = locale65.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList55, (java.util.Collection<java.lang.String>) strSet78, filteringMode79);
        java.lang.String str81 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strList80);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList80, filteringMode82);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja" + "'", str42, "ja");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "de" + "'", str66, "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList83);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        java.io.PrintStream printStream76 = printStream1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        printStream76.print((-1));
        java.io.PrintStream printStream80 = new java.io.PrintStream((java.io.OutputStream) printStream76, false);
        java.io.PrintStream printStream82 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.OutputStream) printStream82, false);
        printStream80.println((java.lang.Object) false);
        printStream80.flush();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        boolean boolean4 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex5 = complex2.asin();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex11.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex6.atan();
        org.apache.commons.math.complex.Complex complex17 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex18 = complex6.asin();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "ENGLISH (UNITED STATES)");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex19, complex22 };
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 0.0d);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException36);
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, Double.NaN);
        java.io.PrintStream printStream40 = printStream11.printf(locale15, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter8.format("ja", (java.lang.Object[]) complexArray39);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray39);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("\u30c9\u30a4\u30c4 (org.apache.commons.math.functionevaluationexception: fra,jpn)", (java.lang.Object[]) complexArray39);
        functionEvaluationException2.addSuppressed((java.lang.Throwable) mathException44);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-0.8813735870195429d), 0.5707963267948968d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, (double) 10);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray11);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.flush();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.inversetransform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer6.transform(doubleArray21);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray33, (java.lang.Throwable) mathException43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer6.transform(complexArray33);
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, (double) ' ');
        java.io.PrintStream printStream48 = printStream1.printf("\u4e2d\u56fd\u8a9e", (java.lang.Object[]) complexArray47);
        java.io.PrintStream printStream50 = printStream48.append((java.lang.CharSequence) "org.apache.commons.math.functionevaluationexception: de");
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        printStream51.close();
        boolean boolean53 = printStream51.checkError();
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        java.util.Locale locale1 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale2.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TWN" + "'", str5, "TWN");
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer1.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex32, complex35 };
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.transform(complexArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer21.transform2(complexArray40);
        double[] doubleArray44 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer21.transform2(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer1.transform2(doubleArray44);
        double[] doubleArray49 = new double[] { (-0.5403023058681398d), 0L };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer1.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer51.inversetransform(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        double[] doubleArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray53, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer1.transform2(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex60, complex63 };
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.transform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex70, complex73 };
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer59.transform2(complexArray78);
        double[] doubleArray82 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer59.transform2(doubleArray82);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer1.transform(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray89, 0.9412319420909312d);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("italien", (java.lang.Object[]) complexArray91);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-0.5403023058681398, 0.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, true);
        java.io.PrintWriter printWriter42 = printWriter40.append('4');
        printWriter42.println("TW");
        printWriter42.flush();
        printWriter42.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex14.atan();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.cos();
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        org.apache.commons.math.complex.Complex complex20 = complex18.cos();
        org.apache.commons.math.complex.Complex complex21 = complex18.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        printWriter1.println((java.lang.Object) locale9);
        java.lang.String str11 = locale9.getScript();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayVariant();
        java.lang.String str14 = locale12.getDisplayName();
        java.lang.String str15 = locale12.getDisplayName();
        java.lang.String str16 = locale9.getDisplayName(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale9.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str14, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str15, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        printStream70.println(1.557407724654902d);
        printStream70.println((int) 'u');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex5, complex8 };
        org.apache.commons.math.complex.Complex[] complexArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray10, 0.0d);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray12, (java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray24 = functionEvaluationException23.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "\u30a4\u30bf\u30ea\u30a2\u8a9e", (java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) functionEvaluationException23);
        java.lang.String str27 = functionEvaluationException23.getPattern();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex10, complex13 };
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex20, complex23 };
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.transform(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer9.transform2(complexArray28);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.String str37 = functionEvaluationException35.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray29, (java.lang.Throwable) functionEvaluationException35);
        java.lang.Object[] objArray39 = functionEvaluationException38.getArguments();
        java.io.PrintStream printStream40 = printStream3.format("\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray39);
        printStream40.println(0.4819056024268544d);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(printStream40);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex5, complex8 };
        org.apache.commons.math.complex.Complex[] complexArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray10, 0.0d);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray12, (java.lang.Throwable) mathException22);
        boolean boolean24 = complex2.equals((java.lang.Object) "fra");
        org.apache.commons.math.complex.Complex complex25 = complex2.atan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex31 = complex26.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex37 = complex25.subtract(complex32);
        double double38 = complex37.getImaginary();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex(10.0d, (double) 0);
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex42.atan();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex45.tan();
        org.apache.commons.math.complex.Complex complex47 = complex37.divide(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.exp();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex53.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex48.multiply(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex57.asin();
        org.apache.commons.math.complex.Complex complex59 = complex58.atan();
        org.apache.commons.math.complex.Complex complex60 = complex58.tanh();
        org.apache.commons.math.complex.Complex complex61 = complex58.log();
        org.apache.commons.math.complex.Complex complex62 = complex45.subtract(complex58);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.3869044145582414d) + "'", double38 == (-0.3869044145582414d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream9.write(byteArray13);
        printStream7.write(byteArray13);
        printStream7.println((int) 'u');
        printStream7.print((long) (short) 1);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ja");
        printStream21.print(100.0f);
        boolean boolean24 = printStream21.checkError();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayCountry(locale27);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException36);
        java.lang.Throwable[] throwableArray38 = functionEvaluationException36.getSuppressed();
        java.io.PrintStream printStream39 = printStream21.printf(locale27, "", (java.lang.Object[]) throwableArray38);
        printStream39.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale42.getScript();
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream47 = printStream39.format(locale42, "fra", (java.lang.Object[]) strArray46);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ja");
        printStream49.print(100.0f);
        boolean boolean52 = printStream49.checkError();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder53.setExtension('a', "de");
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getVariant();
        java.lang.String str60 = locale58.getVariant();
        java.lang.String str61 = locale57.getDisplayLanguage(locale58);
        java.util.Locale.Builder builder62 = builder56.setLocale(locale58);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException80);
        java.lang.Throwable[] throwableArray82 = functionEvaluationException80.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray73, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream49.printf(locale58, "ja", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream87 = new java.io.PrintStream((java.io.OutputStream) printStream49, true);
        java.io.PrintStream printStream89 = new java.io.PrintStream("ja");
        byte[] byteArray93 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream89.write(byteArray93);
        printStream87.write(byteArray93);
        printStream47.write(byteArray93);
        printStream7.write(byteArray93);
        printStream7.println("Japanese (JPN)");
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "de" + "'", str28, "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str61, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[100, 0, -1]");
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale5 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "fr_JA", "deu");
        java.lang.String str6 = locale0.getDisplayCountry(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale5.getDisplayLanguage(locale10);
        java.util.Set<java.lang.String> strSet16 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str1, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale5.toString(), "org.apache.commons.math.functionevaluationexception: hi!_FR_JA_deu");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japan" + "'", str6, "Japan");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.functionevaluationexception: hi!" + "'", str15, "org.apache.commons.math.functionevaluationexception: hi!");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        java.io.PrintStream printStream76 = printStream1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        printStream1.print((float) 10L);
        java.io.PrintStream printStream80 = printStream1.append('#');
        printStream1.println();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale4.getLanguage();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.lang.String str14 = locale13.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale13);
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Deutsch" + "'", str16, "Deutsch");
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u4e2d\u6587");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("chn");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, false);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray21, (java.lang.Throwable) mathException31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, Double.NaN);
        java.io.PrintStream printStream35 = printStream6.printf(locale10, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException(throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException54);
        java.lang.Throwable[] throwableArray56 = functionEvaluationException54.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray47, (java.lang.Throwable) mathException57);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray47, Double.NaN);
        java.io.PrintStream printStream61 = printStream35.printf(locale36, "hi!", (java.lang.Object[]) complexArray60);
        java.util.Locale locale64 = new java.util.Locale("ko", "");
        java.lang.String str65 = locale36.getDisplayCountry(locale64);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale66.getISO3Country();
        java.lang.String str70 = locale66.getExtension('x');
        boolean boolean71 = locale66.hasExtensions();
        java.lang.String str72 = locale36.getDisplayLanguage(locale66);
        java.lang.String str73 = locale36.getDisplayCountry();
        java.lang.String str74 = locale36.getVariant();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "fra");
        java.lang.Throwable[] throwableArray80 = functionEvaluationException79.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(0.5403023058681398d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("en_CA", (java.lang.Object[]) throwableArray80, (java.lang.Throwable) functionEvaluationException85);
        java.io.PrintWriter printWriter87 = printWriter4.printf(locale36, "fr-FR", (java.lang.Object[]) throwableArray80);
        java.io.PrintWriter printWriter88 = printWriter1.printf("org.apache.commons.math.mathexception: org.apache.commons.math.mathexception", (java.lang.Object[]) throwableArray80);
        printWriter1.print("ZH_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\uc911\uad6d" + "'", str65, "\uc911\uad6d");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "CAN" + "'", str68, "CAN");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese" + "'", str72, "Chinese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "China" + "'", str73, "China");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray11 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList12);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale18);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getScript();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str38 = locale34.getDisplayCountry(locale36);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale15, locale17, locale18, locale20, locale21, locale24, locale27, locale28, locale30, locale32, locale33, locale34, locale39, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList43);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.exp();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex50.divide(complex52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { locale45, (short) -1, 'a', complex50, (short) 10 };
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException(throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("ja", objArray55, (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException62);
        double double65 = functionEvaluationException62.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException62);
        double double68 = functionEvaluationException67.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "France", (java.lang.Throwable) functionEvaluationException67);
        java.lang.Throwable[] throwableArray70 = functionEvaluationException67.getSuppressed();
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "de" + "'", str37, "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "de" + "'", str40, "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        printWriter1.print(true);
        printWriter1.println("zho");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(10);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-7.700928986143563E-6d), 0.0d);
        double double3 = complex2.getReal();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-7.700928986143563E-6d) + "'", double3 == (-7.700928986143563E-6d));
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", 0, (int) (short) 0);
        printWriter1.println((long) (short) 10);
        printWriter1.print(true);
        org.junit.Assert.assertNotNull(printWriter7);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.244806974225911d, (double) 10L);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", 0, (int) (short) 0);
        printWriter1.print('4');
        boolean boolean10 = printWriter1.checkError();
        printWriter1.write((-1));
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex12);
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        boolean boolean18 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex19 = complex16.asin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex25.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex20.multiply(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex20.atan();
        org.apache.commons.math.complex.Complex complex31 = complex16.add(complex20);
        org.apache.commons.math.complex.Complex complex32 = complex20.asin();
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex13.pow(complex32);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        printWriter1.print((int) (byte) 1);
        java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter14.println(true);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream24 = new java.io.PrintStream("ja");
        printStream24.print(100.0f);
        boolean boolean27 = printStream24.checkError();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getCountry();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayCountry(locale30);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Throwable[] throwableArray41 = functionEvaluationException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream24.printf(locale30, "", (java.lang.Object[]) throwableArray41);
        java.io.PrintWriter printWriter43 = printWriter21.printf("fra", (java.lang.Object[]) throwableArray41);
        printWriter21.println(false);
        printWriter21.println((float) (short) 100);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter21, true);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale50.getLanguage();
        java.io.PrintStream printStream55 = new java.io.PrintStream("ja");
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale56);
        java.lang.String str58 = locale56.getScript();
        java.lang.String str59 = locale56.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.lang.String str62 = locale60.getDisplayName();
        java.lang.String str63 = locale56.getDisplayLanguage(locale60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer67.inversetransform(doubleArray69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray70);
        java.io.PrintStream printStream72 = printStream55.printf(locale60, "CN", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray70);
        java.io.PrintWriter printWriter74 = printWriter21.format(locale50, "\u4e2d\u56fd\u8a9e", (java.lang.Object[]) complexArray70);
        java.io.PrintWriter printWriter75 = printWriter14.printf(locale17, "\u30c9\u30a4\u30c4", (java.lang.Object[]) complexArray70);
        java.lang.String str76 = locale17.getVariant();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = locale77.getDisplayLanguage();
        java.lang.String str79 = locale77.getDisplayName();
        java.lang.String str80 = locale17.getDisplayName(locale77);
        java.util.Locale locale83 = new java.util.Locale("org.apache.commons.math.functionevaluationexception", "org.apache.commons.math.FunctionEvaluationException: fra");
        java.lang.String str84 = locale83.getLanguage();
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        java.lang.String str86 = locale85.getLanguage();
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.lang.String str88 = locale87.toLanguageTag();
        boolean boolean89 = locale87.hasExtensions();
        java.lang.String str90 = locale85.getDisplayName(locale87);
        java.lang.String str91 = locale83.getDisplayVariant(locale87);
        java.lang.String str92 = locale77.getDisplayCountry(locale87);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "de" + "'", str31, "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str59, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str62, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str63, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str78, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str79, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str80, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale83.toString(), "org.apache.commons.math.functionevaluationexception_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.functionevaluationexception" + "'", str84, "org.apache.commons.math.functionevaluationexception");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ja" + "'", str86, "ja");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "fr" + "'", str88, "fr");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "japonais" + "'", str90, "japonais");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Chine" + "'", str92, "Chine");
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        boolean boolean6 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        double double8 = complex7.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        char[] charArray59 = new char[] {};
        printStream1.print(charArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        boolean boolean65 = printStream64.checkError();
        printStream64.println((int) (short) 10);
        printStream64.println((float) 10);
        printStream64.println("ja-JP");
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CA");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.io.PrintStream printStream5 = new java.io.PrintStream("ja");
        printStream5.write((int) '#');
        printStream5.close();
        printStream5.println((java.lang.Object) 10.0d);
        printStream5.write(100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.write((int) 'u');
        printStream14.println("jpn");
        printStream14.print((double) 1L);
        printStream14.println((int) 'u');
        printStream5.print((java.lang.Object) 'u');
        java.io.PrintStream printStream28 = new java.io.PrintStream("ja");
        printStream28.print(100.0f);
        boolean boolean31 = printStream28.checkError();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayCountry(locale34);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        java.io.PrintStream printStream46 = printStream28.printf(locale34, "", (java.lang.Object[]) throwableArray45);
        printStream46.println((long) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex53, complex56 };
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer52.transform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.getImaginary();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex63, complex66 };
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer62.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer52.transform2(complexArray71);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException(throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException78);
        java.lang.String str80 = functionEvaluationException78.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray72, (java.lang.Throwable) functionEvaluationException78);
        java.lang.Object[] objArray82 = functionEvaluationException81.getArguments();
        java.io.PrintStream printStream83 = printStream46.format("org.apache.commons.math.FunctionEvaluationException: fra", objArray82);
        java.io.PrintStream printStream84 = printStream5.printf("Japanese", objArray82);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.OutputStream) printStream84, false);
        printStream84.println();
        printStream84.print('a');
        boolean boolean90 = languageRange1.equals((java.lang.Object) printStream84);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de" + "'", str35, "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.println((int) (short) -1);
        printWriter23.println((long) (byte) 0);
        printWriter23.write("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.atan();
        boolean boolean4 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex5 = complex2.negate();
        org.apache.commons.math.complex.Complex complex6 = complex2.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println((int) 'a');
        printWriter1.print('u');
        java.io.PrintStream printStream35 = new java.io.PrintStream("fr");
        printStream35.println(false);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream35, false);
        printWriter1.print((java.lang.Object) printStream39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream42, false);
        printStream42.print('#');
        java.io.PrintStream printStream48 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintStream printStream52 = new java.io.PrintStream("ja");
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale53.getDisplayLanguage(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer64.inversetransform(doubleArray66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray67);
        java.io.PrintStream printStream69 = printStream52.printf(locale57, "CN", (java.lang.Object[]) complexArray67);
        char[] charArray70 = new char[] {};
        printStream52.print(charArray70);
        printStream48.println(charArray70);
        printStream42.print(charArray70);
        printWriter1.write(charArray70);
        printWriter1.println((int) '#');
        printWriter1.println();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str56, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str59, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str60, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[]");
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream7 = printStream1.append('a');
        java.io.PrintStream printStream9 = printStream7.append((java.lang.CharSequence) "fr_JA");
        printStream9.print((double) (short) 1);
        printStream9.println(true);
        printStream9.print(' ');
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream9.print("\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(35.0d);
        java.io.PrintStream printStream23 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.toLanguageTag();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream37 = new java.io.PrintStream("ja");
        printStream37.print(100.0f);
        boolean boolean40 = printStream37.checkError();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayCountry(locale43);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        java.io.PrintStream printStream55 = printStream37.printf(locale43, "", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter56 = printWriter34.printf("fra", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        java.io.PrintWriter printWriter66 = printWriter56.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        double double71 = complex69.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex69, complex72 };
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer68.transform(complexArray76);
        java.io.PrintWriter printWriter78 = printWriter56.format("fra", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter25.format(locale26, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray77);
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException(throwable83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException85);
        java.lang.String str87 = functionEvaluationException85.getPattern();
        java.lang.String str88 = functionEvaluationException85.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("CA", (java.lang.Object[]) complexArray77, (java.lang.Throwable) functionEvaluationException85);
        functionEvaluationException20.addSuppressed((java.lang.Throwable) functionEvaluationException85);
        printStream9.println((java.lang.Object) functionEvaluationException85);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ja" + "'", str27, "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr" + "'", str29, "fr");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "japonais" + "'", str31, "japonais");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.lang.String str38 = locale10.getDisplayName();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder39.setExtension('a', "de");
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = locale44.getVariant();
        java.lang.String str47 = locale43.getDisplayLanguage(locale44);
        java.util.Locale.Builder builder48 = builder42.setLocale(locale44);
        java.util.Locale.Builder builder51 = builder48.setExtension('u', "ja");
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale52.getISO3Language();
        java.util.Locale.Builder builder55 = builder51.setLocale(locale52);
        java.util.Locale locale56 = builder55.build();
        java.lang.String str57 = locale10.getDisplayName(locale56);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str38, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str47, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u6587" + "'", str57, "\u65e5\u6587");
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer3.transform2(complexArray22);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException(throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException29);
        java.lang.String str31 = functionEvaluationException29.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray23, (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 35.0d);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable49);
        double double51 = functionEvaluationException50.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray46, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException50);
        functionEvaluationException32.addSuppressed((java.lang.Throwable) functionEvaluationException53);
        java.lang.Throwable[] throwableArray55 = functionEvaluationException53.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(2.745966909874291d, (java.lang.Throwable) functionEvaluationException53);
        java.lang.String str57 = functionEvaluationException56.getPattern();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.math.MathException" + "'", str57, "org.apache.commons.math.MathException");
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray17 = mathException16.getArguments();
        java.io.PrintStream printStream18 = printStream1.format("\u65e5\u672c\u8a9e", objArray17);
        printStream18.println((long) (short) -1);
        printStream18.flush();
        printStream18.print((double) 'x');
        printStream18.print('4');
        printStream18.print((long) 'a');
        printStream18.println();
        printStream18.println("org.apache.commons.math.MathException");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        boolean boolean2 = complex1.isInfinite();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.atan();
        double double5 = complex1.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.2942559587467382d, "english (united states)");
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream41 = printStream39.append(' ');
        printStream41.print((float) 0L);
        java.io.PrintStream printStream45 = printStream41.append('a');
        printStream45.print((int) (short) 10);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45);
        printWriter48.write("\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex2.add(complex5);
        boolean boolean9 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex5.cos();
        org.apache.commons.math.complex.Complex complex11 = complex5.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.0d) + "'", double7 == (-0.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex3.add(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex3);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        printStream14.print(100.0f);
        boolean boolean17 = printStream14.checkError();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getCountry();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayCountry(locale20);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException(throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException29);
        java.lang.Throwable[] throwableArray31 = functionEvaluationException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream14.printf(locale20, "", (java.lang.Object[]) throwableArray31);
        printStream32.close();
        printStream32.println('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.transform(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer37.transform2(complexArray56);
        java.io.PrintStream printStream58 = printStream32.printf("deu", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex63 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex64 = complex59.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = complex65.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex63.pow(complex65);
        printStream32.println((java.lang.Object) complex69);
        org.apache.commons.math.complex.Complex complex71 = complex12.pow(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex73 = complex12.log();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        double double78 = complex76.getImaginary();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex84 = complex79.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        double double87 = complex85.getImaginary();
        org.apache.commons.math.complex.Complex complex88 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex83.pow(complex85);
        boolean boolean90 = complex85.isInfinite();
        org.apache.commons.math.complex.Complex complex91 = complex76.multiply(complex85);
        org.apache.commons.math.complex.Complex complex92 = complex91.tanh();
        org.apache.commons.math.complex.Complex complex93 = complex73.pow(complex92);
        boolean boolean94 = complex92.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "de" + "'", str21, "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.0d) + "'", double78 == (-0.0d));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "HI!");
        printWriter1.println((int) '4');
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.print(100.0f);
        boolean boolean13 = printStream10.checkError();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getCountry();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale14.getDisplayCountry(locale16);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Throwable[] throwableArray27 = functionEvaluationException25.getSuppressed();
        java.io.PrintStream printStream28 = printStream10.printf(locale16, "", (java.lang.Object[]) throwableArray27);
        printStream28.println((long) 0);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("fr");
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale38 = new java.util.Locale("ja", "");
        java.lang.String str39 = locale35.getDisplayLanguage(locale38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.lang.String str41 = locale35.getDisplayLanguage(locale40);
        printWriter33.print((java.lang.Object) locale40);
        java.util.Locale locale43 = locale40.stripExtensions();
        java.io.PrintStream printStream46 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer48.transform2(complexArray67);
        double[] doubleArray71 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer48.transform2(doubleArray71);
        java.io.PrintStream printStream73 = printStream46.printf("CN", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream74 = printStream28.format(locale40, "\u30a4\u30bf\u30ea\u30a2\u8a9e", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) 0);
        java.io.PrintWriter printWriter77 = printWriter1.format("und-italien", (java.lang.Object[]) complexArray72);
        printWriter1.print(2.788172660615703d);
        org.junit.Assert.assertNotNull(printWriter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "de" + "'", str17, "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale3.getScript();
        java.lang.String str6 = locale3.getDisplayLanguage();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "de");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getVariant();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = locale11.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder16 = builder10.setLocale(locale12);
        java.lang.String str17 = locale12.getCountry();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale12.getDisplayCountry(locale18);
        java.lang.String str20 = locale3.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category0, locale3);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ja");
        printStream23.print(100.0f);
        printStream23.print((-1.0f));
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream23, true);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        boolean boolean31 = locale30.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.transform(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer34.transform2(complexArray53);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex57, complex60 };
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, 0.0d);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException(throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException71);
        java.lang.Throwable[] throwableArray73 = functionEvaluationException71.getSuppressed();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray64, (java.lang.Throwable) mathException74);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer34.inversetransform(complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (double) (short) -1);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream82 = printStream23.printf(locale30, "Evaluation failed for argument = {0}", (java.lang.Object[]) complexArray80);
        java.util.Locale.setDefault(category0, locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = locale30.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str15, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream82);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex6.asin();
        org.apache.commons.math.complex.Complex complex9 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        boolean boolean13 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex16.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex19.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex26.add(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex12.pow(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex36.multiply(complex38);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex43.negate();
        org.apache.commons.math.complex.Complex complex46 = complex41.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex31.multiply(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.acos();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex53 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex54 = complex49.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex55.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex53.pow(complex55);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.exp();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex62.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex55.add(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex48.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex6.add(complex48);
        org.apache.commons.math.complex.Complex complex70 = complex6.exp();
        org.apache.commons.math.complex.Complex complex71 = complex70.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Throwable[] throwableArray37 = functionEvaluationException35.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray28, (java.lang.Throwable) mathException38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer1.transform(complexArray28);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex43, complex46 };
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, 0.0d);
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException(throwable55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException57);
        java.lang.Throwable[] throwableArray59 = functionEvaluationException57.getSuppressed();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray50, (java.lang.Throwable) mathException60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer1.transform2(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.inversetransform2(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex70, complex73 };
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        double double82 = complex80.getImaginary();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex[] complexArray85 = new org.apache.commons.math.complex.Complex[] { complex80, complex83 };
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer79.transform(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer69.transform2(complexArray88);
        double[] doubleArray92 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer69.transform2(doubleArray92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("fr_FR", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray93);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("\u6cd5\u6587", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.inversetransform(complexArray93);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)", (-0.47942553860420295d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-0.47942553860420295");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        double double2 = complex1.abs();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex3.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream8 = printStream1.append('4');
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream8, false);
        printStream10.flush();
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        printStream14.print(100.0f);
        boolean boolean17 = printStream14.checkError();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getCountry();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale18.getDisplayCountry(locale20);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException(throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException29);
        java.lang.Throwable[] throwableArray31 = functionEvaluationException29.getSuppressed();
        java.io.PrintStream printStream32 = printStream14.printf(locale20, "", (java.lang.Object[]) throwableArray31);
        printStream32.close();
        printStream32.println((float) (byte) 1);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        java.io.PrintStream printStream38 = printStream32.format("fra", objArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.transform(complexArray48);
        java.io.PrintStream printStream50 = printStream32.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray49);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex53, complex56 };
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 35.0d);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer52.inversetransform(complexArray62);
        printStream51.println((java.lang.Object) fastFourierTransformer52);
        java.io.PrintStream printStream66 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream66, false);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.getImaginary();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex74, complex77 };
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, 0.0d);
        java.lang.Throwable throwable86 = null;
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException(throwable86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException88);
        java.lang.Throwable[] throwableArray90 = functionEvaluationException88.getSuppressed();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray81, (java.lang.Throwable) mathException91);
        org.apache.commons.math.complex.Complex[] complexArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, Double.NaN);
        java.io.PrintStream printStream95 = printStream66.printf(locale70, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray94);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray94);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer52.transform2(complexArray94);
        java.io.PrintStream printStream98 = printStream10.format("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray97);
        java.io.PrintWriter printWriter99 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "de" + "'", str21, "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertNotNull(complexArray97);
        org.junit.Assert.assertNotNull(printStream98);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale.Builder builder22 = builder20.setScript("");
        java.util.Locale.Builder builder24 = builder22.addUnicodeLocaleAttribute("Japan");
        java.util.Locale.Builder builder26 = builder24.setLanguage("Italian");
        java.util.Locale locale27 = builder26.build();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        boolean boolean33 = locale30.hasExtensions();
        java.util.Set<java.lang.Character> charSet34 = locale30.getExtensionKeys();
        boolean boolean35 = locale27.equals((java.lang.Object) charSet34);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "italian__#u-japan");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese" + "'", str32, "Japanese");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.print(100L);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale9.getDisplayName();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer12.inversetransform(doubleArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ja");
        printStream20.print(100.0f);
        boolean boolean23 = printStream20.checkError();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayCountry(locale26);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Throwable[] throwableArray37 = functionEvaluationException35.getSuppressed();
        java.io.PrintStream printStream38 = printStream20.printf(locale26, "", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter17.printf("fra", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.io.PrintWriter printWriter49 = printWriter39.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex52, complex55 };
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.transform(complexArray59);
        java.io.PrintWriter printWriter61 = printWriter39.format("fra", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer12.transform(complexArray60);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex65, complex68 };
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, 0.0d);
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException(throwable77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException79);
        java.lang.Throwable[] throwableArray81 = functionEvaluationException79.getSuppressed();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray72, (java.lang.Throwable) mathException82);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer12.transform(complexArray85);
        java.io.PrintStream printStream87 = printStream1.printf(locale9, "it", (java.lang.Object[]) complexArray86);
        printStream1.println(Double.NaN);
        boolean boolean90 = printStream1.checkError();
        java.io.PrintStream printStream91 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream91.println((-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)" + "'", str10, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("French", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ja");
        printStream13.print(100.0f);
        boolean boolean16 = printStream13.checkError();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayCountry(locale19);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        java.io.PrintStream printStream31 = printStream13.printf(locale19, "", (java.lang.Object[]) throwableArray30);
        java.util.Set<java.lang.String> strSet32 = locale19.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.parse("japanese", strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.parse("ja-JP", strMap38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList39, strMap40);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.parse("CHN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList43, strMap44);
        java.util.Locale.LanguageRange languageRange48 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] { languageRange48 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.lang.String[] strArray57 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList58);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.toLanguageTag();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale64);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Locale locale67 = java.util.Locale.PRC;
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getCountry();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = locale68.getDisplayCountry(locale70);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.lang.String str75 = locale74.getISO3Country();
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.lang.String str77 = locale76.getScript();
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.lang.String str81 = locale80.getCountry();
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.lang.String str83 = locale82.getLanguage();
        java.lang.String str84 = locale80.getDisplayCountry(locale82);
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.lang.String str86 = locale85.getLanguage();
        java.util.Locale locale87 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale61, locale63, locale64, locale66, locale67, locale70, locale73, locale74, locale76, locale78, locale79, locale80, locale85, locale87 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList43, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList36, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale.FilteringMode filteringMode96 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList93, filteringMode96);
        java.util.Locale.FilteringMode filteringMode98 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList99 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList97, filteringMode98);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fr" + "'", str62, "fr");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "de" + "'", str71, "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "de" + "'", str83, "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "de" + "'", str86, "de");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNull(locale95);
        org.junit.Assert.assertTrue("'" + filteringMode96 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode96.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertTrue("'" + filteringMode98 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode98.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList99);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale locale73 = builder72.build();
        java.util.Locale locale76 = new java.util.Locale("ja", "");
        java.lang.String str77 = locale73.getDisplayLanguage(locale76);
        java.lang.String str78 = locale71.getDisplayCountry(locale76);
        java.lang.String str79 = locale57.getDisplayScript(locale71);
        java.util.Set<java.lang.String> strSet80 = locale71.getUnicodeLocaleKeys();
        java.lang.String str81 = locale71.getDisplayName();
        java.lang.String str82 = locale71.getDisplayName();
        java.lang.String str83 = locale71.getDisplayLanguage();
        java.util.Locale.setDefault(locale71);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str78, "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strSet80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)" + "'", str81, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)" + "'", str82, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str83, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9804769626623427d, 1.0253864209002483d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.exp();
        org.apache.commons.math.complex.Complex complex9 = complex4.atan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex16.divide(complex18);
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex13.add(complex18);
        org.apache.commons.math.complex.Complex complex22 = complex12.add(complex13);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ja");
        printStream24.print(100.0f);
        boolean boolean27 = printStream24.checkError();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getCountry();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayCountry(locale30);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Throwable[] throwableArray41 = functionEvaluationException39.getSuppressed();
        java.io.PrintStream printStream42 = printStream24.printf(locale30, "", (java.lang.Object[]) throwableArray41);
        printStream42.close();
        printStream42.println('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.transform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer47.transform2(complexArray66);
        java.io.PrintStream printStream68 = printStream42.printf("deu", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex74 = complex69.divide(complex73);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.getImaginary();
        org.apache.commons.math.complex.Complex complex78 = complex75.tanh();
        org.apache.commons.math.complex.Complex complex79 = complex73.pow(complex75);
        printStream42.println((java.lang.Object) complex79);
        org.apache.commons.math.complex.Complex complex81 = complex22.pow(complex79);
        org.apache.commons.math.complex.Complex complex82 = complex81.atan();
        org.apache.commons.math.complex.Complex complex83 = complex9.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex2.add(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex83.sin();
        org.apache.commons.math.complex.Complex complex86 = complex85.negate();
        double double87 = complex85.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "de" + "'", str31, "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale.Builder builder13 = builder9.setLanguage("");
        java.util.Locale.Builder builder16 = builder9.setExtension('u', "zh_TW");
        java.util.Locale.Builder builder17 = builder9.clear();
        java.util.Locale.Builder builder19 = builder17.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder17.setScript("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray2 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray3 = fastFourierTransformer0.inversetransform(doubleArray2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("ja");
        printStream5.print(100.0f);
        boolean boolean8 = printStream5.checkError();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "de");
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getVariant();
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder18 = builder12.setLocale(locale14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException36);
        java.lang.Throwable[] throwableArray38 = functionEvaluationException36.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray29, (java.lang.Throwable) mathException39);
        java.io.PrintStream printStream41 = printStream5.printf(locale14, "ja", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.inversetransform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer43.inversetransform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer65.inversetransform(doubleArray67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer43.transform(complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer71.inversetransform(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        double[] doubleArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer43.inversetransform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer0.transform2(doubleArray73);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform(univariateRealFunction81, 0.5835053242126248d, 52.0d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str17, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append(' ');
        java.io.PrintWriter printWriter9 = printWriter1.append('x');
        java.io.PrintWriter printWriter11 = printWriter1.append((java.lang.CharSequence) "TWN");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        boolean boolean19 = printStream16.checkError();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayCountry(locale22);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Throwable[] throwableArray33 = functionEvaluationException31.getSuppressed();
        java.io.PrintStream printStream34 = printStream16.printf(locale22, "", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter13.printf("fra", (java.lang.Object[]) throwableArray33);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        java.io.PrintWriter printWriter45 = printWriter35.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.transform(complexArray55);
        java.io.PrintWriter printWriter57 = printWriter35.format("fra", (java.lang.Object[]) complexArray56);
        char[] charArray62 = new char[] { ' ', '4', '#', '#' };
        printWriter57.println(charArray62);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter57.print((java.lang.Object) printWriter65);
        java.io.PrintWriter printWriter68 = printWriter65.append(' ');
        printWriter11.print((java.lang.Object) printWriter68);
        printWriter11.write("\u65e5\u672c\u8a9e\u65e5\u672c)");
        printWriter11.print("ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA");
        printWriter11.println((long) 100);
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "de" + "'", str23, "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter68);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zho");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zho");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.atan();
        org.apache.commons.math.complex.Complex complex3 = complex0.negate();
        org.apache.commons.math.complex.Complex complex4 = complex0.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        printStream9.print(100.0f);
        boolean boolean12 = printStream9.checkError();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException(throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException24.getSuppressed();
        java.io.PrintStream printStream27 = printStream9.printf(locale15, "", (java.lang.Object[]) throwableArray26);
        printStream27.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer30.inversetransform(doubleArray32);
        java.io.PrintStream printStream34 = printStream27.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray33);
        java.io.PrintWriter printWriter35 = printWriter1.format(locale6, "ja", (java.lang.Object[]) complexArray33);
        java.util.Locale locale36 = locale6.stripExtensions();
        java.lang.String str37 = locale36.getScript();
        java.util.Locale locale38 = locale36.stripExtensions();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream41 = printStream39.append(' ');
        printStream41.print(true);
        printStream41.print((int) (short) 0);
        printStream41.print('#');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream41);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        java.io.PrintWriter printWriter53 = printWriter45.append((java.lang.CharSequence) "de");
        printWriter53.write((int) 'u');
        boolean boolean56 = printWriter53.checkError();
        printWriter53.println((long) (-1));
        java.io.PrintWriter printWriter60 = printWriter53.append('x');
        printWriter53.println();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(printWriter60);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException(throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException13);
        java.lang.Throwable[] throwableArray15 = functionEvaluationException13.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray15);
        java.io.PrintStream printStream17 = printStream1.printf("fr", (java.lang.Object[]) throwableArray15);
        boolean boolean18 = printStream17.checkError();
        printStream17.println("de-de");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.inversetransform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer18.inversetransform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.inversetransform2(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        boolean boolean38 = printStream37.checkError();
        java.io.PrintStream printStream40 = printStream37.append('u');
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream43 = printStream40.format("zh_TW", (java.lang.Object[]) strArray42);
        printStream40.println('u');
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream50 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream50, false);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException(throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException72);
        java.lang.Throwable[] throwableArray74 = functionEvaluationException72.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray65, (java.lang.Throwable) mathException75);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, Double.NaN);
        java.io.PrintStream printStream79 = printStream50.printf(locale54, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray78);
        java.io.PrintWriter printWriter80 = printWriter47.format("ja", (java.lang.Object[]) complexArray78);
        printWriter80.println((double) '4');
        printWriter80.print((float) (byte) 100);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.Writer) printWriter80);
        printStream40.println((java.lang.Object) printWriter85);
        java.lang.CharSequence charSequence87 = null;
        java.io.PrintWriter printWriter88 = printWriter85.append(charSequence87);
        java.io.PrintWriter printWriter90 = printWriter88.append((java.lang.CharSequence) "FRAN\347AIS (FRANCE)");
        // The following exception was thrown during execution in test generation
        try {
            printWriter88.write("org.apache.commons.math.mathexception: org.apache.commons.math.mathexception", (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 107");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printWriter90);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayName();
        java.lang.String str9 = locale2.getDisplayLanguage(locale6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer13.inversetransform(doubleArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray16);
        java.io.PrintStream printStream18 = printStream1.printf(locale6, "CN", (java.lang.Object[]) complexArray16);
        printStream18.print(true);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Throwable[] throwableArray33 = functionEvaluationException31.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "ja", (java.lang.Throwable) mathException34);
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("fr_JA", (java.lang.Object[]) throwableArray36);
        java.io.PrintStream printStream38 = printStream18.printf("", (java.lang.Object[]) throwableArray36);
        printStream38.println(1.9820622389532458d);
        printStream38.print("org.apache.commons.math.FunctionEvaluationException");
        printStream38.print((float) (short) 100);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str5, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printStream38);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ja");
        printStream6.print(100.0f);
        boolean boolean9 = printStream6.checkError();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getCountry();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale10.getDisplayCountry(locale12);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream24 = printStream6.printf(locale12, "", (java.lang.Object[]) throwableArray23);
        java.io.PrintWriter printWriter25 = printWriter3.printf("fra", (java.lang.Object[]) throwableArray23);
        printWriter25.println((int) (short) -1);
        printWriter25.println(true);
        printWriter25.println((double) (byte) 10);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('a', "de");
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getVariant();
        java.lang.String str39 = locale37.getVariant();
        java.lang.String str40 = locale36.getDisplayLanguage(locale37);
        java.util.Locale.Builder builder41 = builder35.setLocale(locale37);
        java.util.Locale.Builder builder44 = builder41.setExtension('u', "ja");
        java.util.Locale.Builder builder45 = builder41.clearExtensions();
        java.util.Locale locale46 = builder41.build();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.inversetransform(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer48.transform(doubleArray63);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex68, complex71 };
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException(throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException82);
        java.lang.Throwable[] throwableArray84 = functionEvaluationException82.getSuppressed();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray75, (java.lang.Throwable) mathException85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer48.transform(complexArray75);
        java.io.PrintWriter printWriter88 = printWriter25.format(locale46, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)", (java.lang.Object[]) complexArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "french (italian) (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: HI!)", (java.lang.Object[]) complexArray75);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de" + "'", str13, "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str40, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer0.inversetransform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer20.transform2(complexArray39);
        double[] doubleArray43 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(doubleArray43);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.inversetransform2(univariateRealFunction46, (-0.9485431290768083d), 100.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        java.util.Locale locale3 = new java.util.Locale("\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)", "org.apache.commons.math.mathexception: ja", "\u4e2d\u6587");
        java.lang.String str4 = locale3.getDisplayCountry();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30c9\u30a4\u30c4\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: JA" + "'", str4, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: JA");
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer2.inversetransform(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.inversetransform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer6.transform(doubleArray21);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException(throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException40);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException40.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray33, (java.lang.Throwable) mathException43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer6.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex47, complex50 };
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.transform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.inversetransform(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer46.transform(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer6.transform2(doubleArray61);
        double[] doubleArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray61, (double) 100.0f);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer2.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 0.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException(117.0d, "fr", (java.lang.Object[]) complexArray69);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1000.0, 3200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1000.0, 3200.0, -100.0, 5200.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        java.util.Locale locale3 = new java.util.Locale("\u97d3\u56fd\u8a9e\u30d5\u30e9\u30f3\u30b9\u8a9e)", "twn", "\u30c9\u30a4\u30c4\u8a9e");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u97d3\u56fd\u8a9e\u30d5\u30e9\u30f3\u30b9\u8a9e\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(10.0d, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = complex2.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ja");
        printStream3.print(100.0f);
        boolean boolean6 = printStream3.checkError();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getCountry();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale7.getDisplayCountry(locale9);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream3.printf(locale9, "", (java.lang.Object[]) throwableArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.5403023058681398d, "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(1.179501321915592d, "\u4e2d\u6587\u4e2d\u570b)", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) functionEvaluationException25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) throwableArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "de" + "'", str10, "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.inversetransform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex[] complexArray25 = new org.apache.commons.math.complex.Complex[] { complex20, complex23 };
        org.apache.commons.math.complex.Complex[] complexArray27 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.transform(complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, (double) '4');
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("can", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform2(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.transform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex44, complex47 };
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer33.transform2(complexArray52);
        double[] doubleArray56 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer33.transform2(doubleArray56);
        double[] doubleArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex64, complex67 };
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer73.inversetransform(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer63.transform(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer62.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray78);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append(' ');
        java.io.PrintWriter printWriter9 = printWriter1.append('x');
        printWriter9.write("Italian");
        printWriter9.write((int) (byte) 10);
        printWriter9.println();
        printWriter9.print(0L);
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertNotNull(printWriter9);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex0.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex0.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex10.multiply(complex11);
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.apache.commons.math.complex.Complex[] complexArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray0, (-0.4231842738699457d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("allemand");
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category9);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category9, locale17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category9);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder22.setExtension('a', "de");
        java.util.Locale.Builder builder26 = builder22.clearExtensions();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.getCountry();
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale27.getDisplayScript(locale32);
        java.util.Locale.Builder builder34 = builder26.setLocale(locale27);
        java.lang.String str35 = locale21.getDisplayCountry(locale27);
        java.util.Locale.Builder builder36 = builder8.setLocale(locale21);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ja");
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale39);
        java.lang.String str41 = locale39.getScript();
        java.lang.String str42 = locale39.getDisplayLanguage();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getScript();
        java.lang.String str45 = locale43.getDisplayName();
        java.lang.String str46 = locale39.getDisplayLanguage(locale43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer50.inversetransform(doubleArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream55 = printStream38.printf(locale43, "CN", (java.lang.Object[]) complexArray53);
        java.util.Set<java.lang.String> strSet56 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale43.getDisplayScript();
        java.util.Locale.Builder builder58 = builder36.setLocale(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder36.setRegion("\u65e5\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: org.apache.commons.math.functionevaluationexception (DEU,??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str35, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str42, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str45, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str46, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: org.apache.commons.math.MathException");
        printStream1.println('x');
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex9.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex4.atan();
        org.apache.commons.math.complex.Complex complex15 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        printStream1.print((java.lang.Object) complex17);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        boolean boolean10 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex8.asin();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex17.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex12.multiply(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex12.atan();
        org.apache.commons.math.complex.Complex complex23 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex24 = complex12.asin();
        org.apache.commons.math.complex.Complex complex25 = complex24.exp();
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, 0.5403023058681398d);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream31, false);
        printStream31.write((int) 'u');
        printStream31.print('4');
        printStream31.print((float) 100);
        boolean boolean40 = complex29.equals((java.lang.Object) 100);
        org.apache.commons.math.complex.Complex complex41 = complex29.log();
        org.apache.commons.math.complex.Complex complex42 = complex26.multiply(complex29);
        org.apache.commons.math.complex.Complex complex43 = complex5.subtract(complex42);
        double double44 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex43.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-5.518574119703867d) + "'", double44 == (-5.518574119703867d));
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.mathexception");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.mathexception");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", 0, (int) (short) 0);
        java.util.Locale locale9 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException");
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray18);
        java.io.PrintWriter printWriter24 = printWriter7.printf(locale9, "CA", (java.lang.Object[]) complexArray18);
        java.io.PrintWriter printWriter26 = printWriter24.append('a');
        java.io.PrintWriter printWriter28 = printWriter26.append((java.lang.CharSequence) "org.apache.commons.math.MathException");
        printWriter28.write(0);
        printWriter28.write((int) (short) 0);
        printWriter28.print("\u30c9\u30a4\u30c4\u8a9e_HI!");
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertEquals(locale9.toString(), "org.apache.commons.math.functionevaluationexception");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream75 = printStream1.append('#');
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream78 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println((float) 'u');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream75);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray25, Double.NaN);
        java.io.PrintStream printStream39 = printStream10.printf(locale14, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray38);
        java.io.PrintWriter printWriter40 = printWriter7.format("ja", (java.lang.Object[]) complexArray38);
        printWriter40.println('4');
        org.apache.commons.math.complex.Complex complex45 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = complex46.multiply(complex47);
        printWriter40.print((java.lang.Object) complex50);
        org.apache.commons.math.complex.Complex complex52 = complex2.add(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt1z();
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex57 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex58 = complex57.atan();
        boolean boolean59 = complex57.isNaN();
        org.apache.commons.math.complex.Complex complex60 = complex57.atan();
        org.apache.commons.math.complex.Complex complex61 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex57.negate();
        org.apache.commons.math.complex.Complex complex63 = complex54.add(complex57);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Taiwan");
        java.lang.String str2 = languageRange1.getRange();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("fr");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        printStream9.print(100.0f);
        boolean boolean12 = printStream9.checkError();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException(throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException24.getSuppressed();
        java.io.PrintStream printStream27 = printStream9.printf(locale15, "", (java.lang.Object[]) throwableArray26);
        java.io.PrintWriter printWriter28 = printWriter6.printf("fra", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex[] complexArray35 = new org.apache.commons.math.complex.Complex[] { complex30, complex33 };
        org.apache.commons.math.complex.Complex[] complexArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray35, 0.0d);
        java.io.PrintWriter printWriter38 = printWriter28.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.transform(complexArray48);
        java.io.PrintWriter printWriter50 = printWriter28.format("fra", (java.lang.Object[]) complexArray49);
        char[] charArray55 = new char[] { ' ', '4', '#', '#' };
        printWriter50.println(charArray55);
        printWriter4.println(charArray55);
        printWriter4.print("");
        boolean boolean60 = languageRange1.equals((java.lang.Object) printWriter4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "taiwan" + "'", str2, "taiwan");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, #, #]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter28.print((int) 'x');
        java.util.Locale locale34 = new java.util.Locale("org.apache.commons.math.functionevaluationexception", "deu", "\u65e5\u6587");
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray45, (java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException56.getSuppressed();
        java.io.PrintWriter printWriter58 = printWriter28.format(locale34, "tw", (java.lang.Object[]) throwableArray57);
        printWriter58.println(true);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(1.149548905166106d, (java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray67 = mathException65.getSuppressed();
        java.io.PrintWriter printWriter68 = printWriter58.printf("CHN", (java.lang.Object[]) throwableArray67);
        printWriter58.println(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "\u65e5\u6587");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printWriter68);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream4 = new java.io.PrintStream("fr");
        printStream4.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange9 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] { languageRange9 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList19);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale25);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayCountry(locale31);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getScript();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayCountry(locale43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale22, locale24, locale25, locale27, locale28, locale31, locale34, locale35, locale37, locale39, locale40, locale41, locale46, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode57 = null;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet56, filteringMode57);
        printStream4.print((java.lang.Object) languageRangeList11);
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex64, complex67 };
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform(complexArray71);
        java.io.PrintStream printStream73 = printStream4.printf(locale60, "de", (java.lang.Object[]) complexArray71);
        java.util.Set<java.lang.String> strSet74 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale60.getDisplayScript();
        java.util.Locale.setDefault(category2, locale60);
        java.lang.String str77 = locale60.getCountry();
        java.lang.String str78 = locale0.getDisplayName(locale60);
        java.util.Locale locale79 = null;
        java.lang.String str80 = locale60.getDisplayCountry(locale79);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "de" + "'", str32, "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ja" + "'", str55, "ja");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u82f1\u8a9e\u30a4\u30ae\u30ea\u30b9)" + "'", str78, "\u82f1\u8a9e\u30a4\u30ae\u30ea\u30b9)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale6 = new java.util.Locale("ja", "");
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale3.getDisplayLanguage(locale8);
        printWriter1.print((java.lang.Object) locale8);
        printWriter1.write((int) (byte) 10);
        java.util.Locale locale15 = new java.util.Locale("\u65e5\u672c\u8a9e\u65e5\u672c)", "chinois (Chine)");
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter1.printf(locale15, "Kanada", objArray17);
        java.lang.String str19 = locale15.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = locale15.getUnicodeLocaleType("\u30c9\u30a4\u30c4\u8a9e (HI!)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ????? (HI!)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale15.toString(), "\u65e5\u672c\u8a9e\u65e5\u672c)_CHINOIS (CHINE)");
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print((-1.0f));
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print("");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex19, complex22 };
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 0.0d);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException36);
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, Double.NaN);
        java.io.PrintStream printStream40 = printStream11.printf(locale15, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException(throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException59);
        java.lang.Throwable[] throwableArray61 = functionEvaluationException59.getSuppressed();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray52, (java.lang.Throwable) mathException62);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, Double.NaN);
        java.io.PrintStream printStream66 = printStream40.printf(locale41, "hi!", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer70.inversetransform(doubleArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream75 = printStream1.format(locale41, "", (java.lang.Object[]) complexArray73);
        printStream75.print(0);
        printStream75.print('u');
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream75, true);
        printWriter81.write("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        printWriter81.println();
        printWriter81.print(' ');
        boolean boolean87 = printWriter81.checkError();
        printWriter81.flush();
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray17 = mathException16.getArguments();
        java.io.PrintStream printStream18 = printStream1.format("\u65e5\u672c\u8a9e", objArray17);
        printStream18.println((long) (short) -1);
        printStream18.flush();
        printStream18.write(0);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((int) (byte) -1);
        printWriter1.print(true);
        printWriter1.println();
        printWriter1.println("org.apache.commons.math.FunctionEvaluationException: japonais");
        printWriter1.write("org.apache.commons.math.FunctionEvaluationException: hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        java.io.PrintWriter printWriter53 = printWriter45.append((java.lang.CharSequence) "de");
        printWriter53.write((int) 'u');
        printWriter53.println(0L);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder58.setExtension('a', "de");
        java.util.Locale.Builder builder62 = builder58.clearExtensions();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale locale64 = builder63.build();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = locale65.toLanguageTag();
        java.util.Locale.Builder builder67 = builder63.setLocale(locale65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        double double73 = complex71.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex71, complex74 };
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.transform(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        double double83 = complex81.getImaginary();
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex[] complexArray86 = new org.apache.commons.math.complex.Complex[] { complex81, complex84 };
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer80.transform(complexArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer70.transform2(complexArray89);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray89);
        java.io.PrintWriter printWriter92 = printWriter53.printf(locale65, "\u4e2d\u56fd\u8a9e", (java.lang.Object[]) complexArray89);
        java.io.PrintWriter printWriter93 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        printWriter93.close();
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter((java.io.Writer) printWriter93);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fr" + "'", str66, "fr");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(printWriter92);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        printStream3.print((long) '4');
        printStream3.print((double) 1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        printStream12.print(100.0f);
        boolean boolean15 = printStream12.checkError();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayCountry(locale18);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException27);
        java.lang.Throwable[] throwableArray29 = functionEvaluationException27.getSuppressed();
        java.io.PrintStream printStream30 = printStream12.printf(locale18, "", (java.lang.Object[]) throwableArray29);
        printStream30.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 35.0d);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable48);
        double double50 = functionEvaluationException49.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray45, (java.lang.Throwable) functionEvaluationException49);
        java.io.PrintWriter printWriter52 = printWriter32.printf("zho", (java.lang.Object[]) complexArray45);
        java.io.PrintStream printStream53 = printStream3.printf("TWN", (java.lang.Object[]) complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.transform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        double double71 = complex69.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex[] complexArray74 = new org.apache.commons.math.complex.Complex[] { complex69, complex72 };
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer68.transform(complexArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer58.transform2(complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, (double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "und", (java.lang.Object[]) complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(1.179501321915592d);
        java.lang.String str85 = functionEvaluationException84.getPattern();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.functionevaluationexception: de_US", (java.lang.Object[]) complexArray78, (java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, 0.7271962651290386d);
        java.io.PrintStream printStream89 = printStream3.format("", (java.lang.Object[]) complexArray88);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Evaluation failed for argument = {0}" + "'", str85, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(35.0d, 0.4986113866728327d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [35.0, 0.4986113866728327]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale0.getDisplayVariant(locale4);
        boolean boolean7 = locale0.hasExtensions();
        java.lang.String str8 = locale0.getISO3Language();
        java.lang.String str9 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de" + "'", str1, "de");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals(locale4.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deu" + "'", str8, "deu");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        boolean boolean46 = printWriter45.checkError();
        printWriter45.println((float) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.exp();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex26.divide(complex28);
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex23.add(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex22.add(complex23);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ja");
        printStream34.print(100.0f);
        boolean boolean37 = printStream34.checkError();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        java.io.PrintStream printStream52 = printStream34.printf(locale40, "", (java.lang.Object[]) throwableArray51);
        printStream52.close();
        printStream52.println('a');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex68, complex71 };
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer57.transform2(complexArray76);
        java.io.PrintStream printStream78 = printStream52.printf("deu", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex83 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex84 = complex79.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        double double87 = complex85.getImaginary();
        org.apache.commons.math.complex.Complex complex88 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex89 = complex83.pow(complex85);
        printStream52.println((java.lang.Object) complex89);
        org.apache.commons.math.complex.Complex complex91 = complex32.pow(complex89);
        org.apache.commons.math.complex.Complex complex92 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex93 = complex32.log();
        org.apache.commons.math.complex.Complex complex94 = complex32.exp();
        org.apache.commons.math.complex.Complex complex95 = complex18.pow(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex18.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.println((-1.0d));
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex17, complex20 };
        org.apache.commons.math.complex.Complex[] complexArray24 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer6.transform2(complexArray25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray36, (java.lang.Throwable) mathException46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer6.inversetransform(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, (double) (short) -1);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream54 = printStream1.printf("ko", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream56 = new java.io.PrintStream("fr");
        printStream56.flush();
        printStream56.print((float) '4');
        printStream1.println((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream64 = printStream1.append((java.lang.CharSequence) "\u4e2d\u6587", (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 1, 1.9820622389532458d);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex5, complex8 };
        org.apache.commons.math.complex.Complex[] complexArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray10, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer4.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex16, complex19 };
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.inversetransform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer14.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.transform(complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer34.transform2(complexArray53);
        double[] doubleArray57 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer34.transform2(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer14.transform2(doubleArray57);
        double[] doubleArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray57, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer4.inversetransform(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex[] complexArray70 = new org.apache.commons.math.complex.Complex[] { complex65, complex68 };
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer64.transform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.getImaginary();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex75, complex78 };
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer74.transform(complexArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer64.transform2(complexArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray83);
        java.lang.Throwable[] throwableArray86 = mathException85.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "\u4e2d\u56fd\u8a9e)", (java.lang.Object[]) complexArray62, (java.lang.Throwable) mathException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(1.9820622389532458d, "\u6cd5\u6587\u52a0\u62ff\u5927)", (java.lang.Throwable) functionEvaluationException87);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        char[] charArray9 = new char[] { 'u', 'a', '4', '#', 'a' };
        printWriter1.write(charArray9);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        boolean boolean19 = printStream16.checkError();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayCountry(locale22);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Throwable[] throwableArray33 = functionEvaluationException31.getSuppressed();
        java.io.PrintStream printStream34 = printStream16.printf(locale22, "", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter13.printf("fra", (java.lang.Object[]) throwableArray33);
        printWriter35.println((int) (short) -1);
        printWriter35.println(true);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setExtension('a', "de");
        java.util.Locale.Builder builder44 = builder40.clear();
        java.util.Locale.Builder builder45 = builder40.clear();
        java.util.Locale.Builder builder47 = builder45.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale.Builder builder49 = builder45.removeUnicodeLocaleAttribute("CHN");
        java.util.Locale locale50 = builder49.build();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex53, complex56 };
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer52.transform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.getImaginary();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex[] complexArray68 = new org.apache.commons.math.complex.Complex[] { complex63, complex66 };
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer62.transform(complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer52.transform2(complexArray71);
        java.io.PrintWriter printWriter73 = printWriter35.format(locale50, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray72);
        java.io.PrintWriter printWriter74 = printWriter1.printf("org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) 0);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "ua4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "ua4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[u, a, 4, #, a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "de" + "'", str23, "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter28.print(true);
        printWriter28.println(1.2942559587467382d);
        printWriter28.close();
        printWriter28.write((int) (short) -1);
        printWriter28.println("org.apache.commons.math.mathexception: ja");
        java.util.Locale locale40 = new java.util.Locale("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra", "");
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale.setDefault(category41, locale42);
        java.lang.String str45 = locale42.getISO3Country();
        java.lang.String str46 = locale40.getDisplayLanguage(locale42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer50.inversetransform(doubleArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(0.5406558493518019d, "org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter28.format(locale40, "org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray53);
        java.lang.String str56 = locale40.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertEquals(locale40.toString(), "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "TWN" + "'", str45, "TWN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra" + "'", str46, "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra" + "'", str56, "org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", 0, (int) (short) 0);
        java.util.Locale locale9 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException");
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray18);
        java.io.PrintWriter printWriter24 = printWriter7.printf(locale9, "CA", (java.lang.Object[]) complexArray18);
        printWriter7.println(false);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex[] complexArray37 = new org.apache.commons.math.complex.Complex[] { complex32, complex35 };
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray37, 0.0d);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException(throwable44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException46);
        java.lang.Throwable[] throwableArray48 = functionEvaluationException46.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray39, (java.lang.Throwable) mathException49);
        boolean boolean51 = complex29.equals((java.lang.Object) "fra");
        org.apache.commons.math.complex.Complex complex52 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex55 = new org.apache.commons.math.complex.Complex(0.0d, (double) 10);
        org.apache.commons.math.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex complex63 = complex61.exp();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex63.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.exp();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex69.divide(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex66.multiply(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex66.asin();
        org.apache.commons.math.complex.Complex complex75 = complex60.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex60.negate();
        org.apache.commons.math.complex.Complex complex77 = complex76.cos();
        org.apache.commons.math.complex.Complex complex78 = complex57.add(complex77);
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex80 = complex55.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex29.pow(complex79);
        org.apache.commons.math.complex.Complex complex82 = complex79.sqrt();
        printWriter7.print((java.lang.Object) complex82);
        printWriter7.print((float) 10L);
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertEquals(locale9.toString(), "org.apache.commons.math.functionevaluationexception");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        java.util.Locale locale3 = new java.util.Locale("\u30c9\u30a4\u30c4", "org.apache.commons.math.FunctionEvaluationException: fra", "jpn");
        java.lang.String str5 = locale3.getExtension('a');
        java.util.Locale locale6 = locale3.stripExtensions();
        java.lang.String str7 = locale3.getVariant();
        java.util.Locale locale9 = new java.util.Locale("ENGLISH (UNITED STATES)");
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale3.getDisplayScript(locale9);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale12.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale12.getDisplayScript(locale18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ja");
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale27.getDisplayName();
        java.lang.String str30 = locale23.getDisplayLanguage(locale27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer34.inversetransform(doubleArray36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray37);
        java.io.PrintStream printStream39 = printStream22.printf(locale27, "CN", (java.lang.Object[]) complexArray37);
        java.lang.String str40 = locale12.getDisplayName(locale27);
        java.lang.String str41 = locale12.getISO3Country();
        java.util.Locale locale42 = locale12.stripExtensions();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale9.getDisplayCountry(locale42);
        org.junit.Assert.assertEquals(locale3.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "jpn" + "'", str7, "jpn");
        org.junit.Assert.assertEquals(locale9.toString(), "english (united states)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "english (united states)" + "'", str10, "english (united states)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "japonais" + "'", str17, "japonais");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str26, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str29, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str40, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex[] complexArray14 = new org.apache.commons.math.complex.Complex[] { complex9, complex12 };
        org.apache.commons.math.complex.Complex[] complexArray16 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray14, 0.0d);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException(throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException23);
        java.lang.Throwable[] throwableArray25 = functionEvaluationException23.getSuppressed();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray16, (java.lang.Throwable) mathException26);
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, Double.NaN);
        java.io.PrintStream printStream30 = printStream1.printf(locale5, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray42, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, Double.NaN);
        java.io.PrintStream printStream56 = printStream30.printf(locale31, "hi!", (java.lang.Object[]) complexArray55);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        printStream30.println();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printStream56);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr_JAPANESE (JAPAN)_org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fr_japanese (japan)_org.apache.commons.math.mathexception: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream8 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream8, false);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex[] complexArray21 = new org.apache.commons.math.complex.Complex[] { complex16, complex19 };
        org.apache.commons.math.complex.Complex[] complexArray23 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, 0.0d);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray23, (java.lang.Throwable) mathException33);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, Double.NaN);
        java.io.PrintStream printStream37 = printStream8.printf(locale12, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter38 = printWriter5.format("ja", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("ja");
        printWriter40.println((float) 10);
        printWriter40.println((int) (byte) 10);
        printWriter40.print(false);
        java.lang.Object[] objArray48 = null;
        java.io.PrintWriter printWriter49 = printWriter40.printf("de", objArray48);
        char[] charArray50 = new char[] {};
        printWriter40.write(charArray50);
        printWriter38.println(charArray50);
        printStream3.print(charArray50);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.Writer) printWriter55, true);
        printWriter55.print(false);
        printWriter55.write("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra");
        printWriter55.print('#');
        java.io.PrintStream printStream65 = new java.io.PrintStream("ja");
        printStream65.write((int) '#');
        printStream65.close();
        printStream65.println((java.lang.Object) 10.0d);
        printStream65.write(100);
        printStream65.println(false);
        java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream65, true);
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream65, true);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray81 = mathException80.getArguments();
        java.io.PrintStream printStream82 = printStream65.format("\u65e5\u672c\u8a9e", objArray81);
        printStream65.print((int) '#');
        java.io.PrintStream printStream86 = new java.io.PrintStream((java.io.OutputStream) printStream65, false);
        printStream65.print('u');
        printWriter55.println((java.lang.Object) printStream65);
        java.io.PrintWriter printWriter93 = null; // flaky: printWriter55.append((java.lang.CharSequence) "\u4e2d\u56fd\u8a9e)", 0, 10);
        java.io.PrintWriter printWriter97 = printWriter55.append((java.lang.CharSequence) "ja-DE", 0, 0);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(printStream82);
// flaky:         org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printWriter97);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        printStream11.print(100.0f);
        boolean boolean14 = printStream11.checkError();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getCountry();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale15.getDisplayCountry(locale17);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        java.io.PrintStream printStream29 = printStream11.printf(locale17, "", (java.lang.Object[]) throwableArray28);
        printStream29.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer32.inversetransform(doubleArray34);
        java.io.PrintStream printStream36 = printStream29.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        java.io.PrintStream printStream46 = printStream36.printf("japonais", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.transform(complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer48.transform2(complexArray67);
        double[] doubleArray71 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer48.transform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer74.inversetransform(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer79.inversetransform(doubleArray81);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray81);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray81, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform2(doubleArray81);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform(univariateRealFunction87, (double) 100.0f, (double) (-1), (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "de" + "'", str18, "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1000.0]");
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex13.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex6.add(complex16);
        boolean boolean19 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex28.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex25.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex18.divide(complex25);
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Country();
        boolean boolean12 = locale10.hasExtensions();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale10);
        java.lang.String str14 = locale10.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale10.getScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream9.write(byteArray13);
        printStream7.write(byteArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream7, true);
        java.io.PrintStream printStream20 = new java.io.PrintStream("ja");
        printStream20.print(100.0f);
        printStream20.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream26 = printStream20.append('a');
        printStream20.println('u');
        printStream20.print(true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.transform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.inversetransform(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer33.transform(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer32.inversetransform2(doubleArray48);
        java.io.PrintStream printStream53 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream53, false);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException75);
        java.lang.Throwable[] throwableArray77 = functionEvaluationException75.getSuppressed();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray68, (java.lang.Throwable) mathException78);
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, Double.NaN);
        java.io.PrintStream printStream82 = printStream53.printf(locale57, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer32.transform(complexArray81);
        java.io.PrintStream printStream85 = printStream20.format("fran\347ais (Canada)", (java.lang.Object[]) complexArray81);
        java.io.PrintStream printStream86 = printStream17.format("Chinook jargon (JAPAN)", (java.lang.Object[]) complexArray81);
        printStream86.print((long) (short) -1);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream86);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        java.util.Locale locale3 = new java.util.Locale("fr", "ja", "");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray56 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList57);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.toLanguageTag();
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale63);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getCountry();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = locale67.getDisplayCountry(locale69);
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getISO3Country();
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.lang.String str76 = locale75.getScript();
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = locale79.getCountry();
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.lang.String str82 = locale81.getLanguage();
        java.lang.String str83 = locale79.getDisplayCountry(locale81);
        java.util.Locale locale84 = java.util.Locale.GERMAN;
        java.lang.String str85 = locale84.getLanguage();
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale60, locale62, locale63, locale65, locale66, locale69, locale72, locale73, locale75, locale77, locale78, locale79, locale84, locale86 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList88);
        java.lang.String str92 = locale3.getDisplayVariant(locale91);
        java.lang.String str93 = locale91.toLanguageTag();
        java.lang.String str94 = locale91.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "fr_JA");
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr" + "'", str61, "fr");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "de" + "'", str70, "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "de" + "'", str82, "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "de" + "'", str85, "de");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ja" + "'", str93, "ja");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ja" + "'", str94, "ja");
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex11.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex8.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex8.asin();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex2.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex25.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex31.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = complex35.add(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex21.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex2.pow(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex40.tanh();
        boolean boolean42 = complex40.isInfinite();
        double double43 = complex40.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale locale5 = new java.util.Locale("ja", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale2.getDisplayLanguage(locale7);
        java.lang.String str9 = locale2.getDisplayName();
        java.lang.String str10 = locale0.getDisplayCountry(locale2);
        java.lang.String str12 = locale0.getExtension('a');
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.toLanguageTag();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale13.getDisplayName(locale15);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale13.getDisplayScript(locale19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ja");
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getDisplayName();
        java.lang.String str31 = locale24.getDisplayLanguage(locale28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer35.inversetransform(doubleArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray38);
        java.io.PrintStream printStream40 = printStream23.printf(locale28, "CN", (java.lang.Object[]) complexArray38);
        java.lang.String str41 = locale13.getDisplayName(locale28);
        java.lang.String str42 = locale13.getDisplayScript();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setExtension('a', "de");
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getVariant();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale47.getDisplayLanguage(locale48);
        java.util.Locale.Builder builder52 = builder46.setLocale(locale48);
        java.util.Locale.Builder builder55 = builder52.setExtension('u', "ja");
        java.util.Locale.Builder builder56 = builder52.clearExtensions();
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.Builder builder58 = builder56.clearExtensions();
        java.util.Locale locale59 = builder58.build();
        java.lang.String str60 = locale59.getVariant();
        java.lang.String str61 = locale13.getDisplayName(locale59);
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.lang.String str66 = locale59.getDisplayVariant(locale63);
        java.lang.String str67 = locale63.getDisplayScript();
        java.util.Set<java.lang.Character> charSet68 = locale63.getExtensionKeys();
        boolean boolean69 = locale0.equals((java.lang.Object) charSet68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "South Korea" + "'", str10, "South Korea");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja" + "'", str14, "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "japonais" + "'", str18, "japonais");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str27, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str31, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str41, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str51, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str61, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ja");
        printStream3.print(100.0f);
        boolean boolean6 = printStream3.checkError();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getCountry();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale7.getDisplayCountry(locale9);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream3.printf(locale9, "", (java.lang.Object[]) throwableArray20);
        printStream21.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer24.inversetransform(doubleArray26);
        java.io.PrintStream printStream28 = printStream21.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "Japanese", (java.lang.Object[]) complexArray27);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException29.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "de" + "'", str10, "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.inversetransform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer3.transform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer2.inversetransform2(doubleArray18);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException(throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException45);
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray38, (java.lang.Throwable) mathException48);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, Double.NaN);
        java.io.PrintStream printStream52 = printStream23.printf(locale27, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer2.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, (double) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex62, complex65 };
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer61.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        double double74 = complex72.getImaginary();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex[] complexArray77 = new org.apache.commons.math.complex.Complex[] { complex72, complex75 };
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer71.transform(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer61.transform2(complexArray80);
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException(throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException87);
        java.lang.String str89 = functionEvaluationException87.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray81, (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("chn");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((-0.3869044145582414d), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", (java.lang.Object[]) complexArray81, (java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException93);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "french (italian) (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: HI!)", (java.lang.Object[]) complexArray51, (java.lang.Throwable) functionEvaluationException93);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.println((int) (short) -1);
        printWriter23.println(true);
        printWriter23.print((double) 10.0f);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ja");
        printStream31.print(100.0f);
        printStream31.println(10);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ja");
        printStream38.print(100.0f);
        boolean boolean41 = printStream38.checkError();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder42.setExtension('a', "de");
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getVariant();
        java.lang.String str49 = locale47.getVariant();
        java.lang.String str50 = locale46.getDisplayLanguage(locale47);
        java.util.Locale.Builder builder51 = builder45.setLocale(locale47);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex[] complexArray60 = new org.apache.commons.math.complex.Complex[] { complex55, complex58 };
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, 0.0d);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException(throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException69);
        java.lang.Throwable[] throwableArray71 = functionEvaluationException69.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray62, (java.lang.Throwable) mathException72);
        java.io.PrintStream printStream74 = printStream38.printf(locale47, "ja", (java.lang.Object[]) complexArray62);
        java.io.PrintStream printStream75 = printStream31.format("\u65e5\u6587", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, (double) 1L);
        printWriter23.println((java.lang.Object) complexArray77);
        printWriter23.println((float) ' ');
        printWriter23.println();
        printWriter23.close();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str50, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.log();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex12.add(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.exp();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex23.divide(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex29.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex26.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex26.asin();
        boolean boolean36 = complex26.equals((java.lang.Object) (byte) 100);
        boolean boolean37 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.sin();
        org.apache.commons.math.complex.Complex complex42 = complex38.exp();
        org.apache.commons.math.complex.Complex complex43 = complex42.exp();
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.atan();
        org.apache.commons.math.complex.Complex complex46 = complex26.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex15.multiply(complex26);
        org.apache.commons.math.complex.Complex complex48 = complex9.subtract(complex26);
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.0d) + "'", double17 == (-0.0d));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587", "", "ita");
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587__ita");
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer22.inversetransform(doubleArray24);
        java.io.PrintStream printStream26 = printStream19.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        java.io.PrintStream printStream36 = printStream26.printf("japonais", (java.lang.Object[]) complexArray33);
        java.io.PrintStream printStream38 = printStream26.append((java.lang.CharSequence) "fra");
        java.util.Locale locale42 = new java.util.Locale("Japanese", "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "fr");
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException(throwable48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException50);
        java.lang.Throwable[] throwableArray52 = functionEvaluationException50.getSuppressed();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream54 = printStream26.format(locale42, "taiwan", (java.lang.Object[]) throwableArray52);
        printStream54.print((float) 1);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream54);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.OutputStream) printStream54);
        printStream54.flush();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream38);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)_fr");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale21);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getCountry();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayCountry(locale27);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getScript();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getCountry();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale37.getDisplayCountry(locale39);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale18, locale20, locale21, locale23, locale24, locale27, locale30, locale31, locale33, locale35, locale36, locale37, locale42, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray55 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.toLanguageTag();
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale62);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Locale locale65 = java.util.Locale.PRC;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getCountry();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = locale66.getDisplayCountry(locale68);
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getISO3Country();
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.getScript();
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getCountry();
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale78.getDisplayCountry(locale80);
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale83.getLanguage();
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray86 = new java.util.Locale[] { locale59, locale61, locale62, locale64, locale65, locale68, locale71, locale72, locale74, locale76, locale77, locale78, locale83, locale85 };
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.Locale locale89 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.Locale locale90 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.Set<java.lang.String> strSet91 = locale90.getUnicodeLocaleAttributes();
        java.lang.String str92 = locale90.getVariant();
        java.lang.String str93 = locale0.getDisplayLanguage(locale90);
        java.lang.String str94 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fr" + "'", str19, "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "de" + "'", str28, "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "de" + "'", str40, "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fr" + "'", str60, "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "de" + "'", str69, "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "de" + "'", str81, "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "de" + "'", str84, "de");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(locale89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str93, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "zh" + "'", str94, "zh");
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex2.log();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("allemand");
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category9);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category9, locale17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category9);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder22.setExtension('a', "de");
        java.util.Locale.Builder builder26 = builder22.clearExtensions();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.getCountry();
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale27.getDisplayScript(locale32);
        java.util.Locale.Builder builder34 = builder26.setLocale(locale27);
        java.lang.String str35 = locale21.getDisplayCountry(locale27);
        java.util.Locale.Builder builder36 = builder8.setLocale(locale21);
        java.lang.String str37 = locale21.getISO3Country();
        java.lang.String str38 = locale21.getISO3Language();
        java.lang.Object obj39 = locale21.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str35, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FRA" + "'", str37, "FRA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "fr_FR");
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        printStream15.print(100.0f);
        boolean boolean18 = printStream15.checkError();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayCountry(locale21);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException30.getSuppressed();
        java.io.PrintStream printStream33 = printStream15.printf(locale21, "", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter34 = printWriter12.printf("fra", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        java.io.PrintWriter printWriter44 = printWriter34.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex47, complex50 };
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.transform(complexArray54);
        java.io.PrintWriter printWriter56 = printWriter34.format("fra", (java.lang.Object[]) complexArray55);
        char[] charArray61 = new char[] { ' ', '4', '#', '#' };
        printWriter56.println(charArray61);
        printWriter56.println();
        java.io.PrintStream printStream66 = new java.io.PrintStream("ja");
        printStream66.print(100.0f);
        printStream66.print((-1.0f));
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream66, true);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray78 = mathException77.getArguments();
        java.io.PrintStream printStream79 = printStream72.printf(locale73, "hi!", objArray78);
        java.io.PrintWriter printWriter80 = printWriter56.printf("fr_JA", objArray78);
        printWriter1.print((java.lang.Object) "fr_JA");
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println(10L);
        printWriter1.println((long) (short) 100);
        java.io.PrintWriter printWriter88 = printWriter1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e\u65e5\u672c)_CA_CN");
        printWriter88.println();
        printWriter88.println(true);
        printWriter88.print(0L);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "de" + "'", str22, "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ja" + "'", str74, "ja");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print('4');
        printStream1.print("\u53f0\u6e7e");
        java.io.PrintStream printStream18 = printStream1.append('a');
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream19.print(false);
        printStream19.print(1.3117440389749047d);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        printWriter23.close();
        printWriter23.println(10.0d);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("ja");
        printWriter38.flush();
        printWriter38.println();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream45 = new java.io.PrintStream("ja");
        printStream45.print(100.0f);
        boolean boolean48 = printStream45.checkError();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getCountry();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = locale49.getDisplayCountry(locale51);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.io.PrintStream printStream63 = printStream45.printf(locale51, "", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter42.printf("fra", (java.lang.Object[]) throwableArray62);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        java.io.PrintWriter printWriter74 = printWriter64.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        double double79 = complex77.getImaginary();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex[] complexArray82 = new org.apache.commons.math.complex.Complex[] { complex77, complex80 };
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray82, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer76.transform(complexArray84);
        java.io.PrintWriter printWriter86 = printWriter64.format("fra", (java.lang.Object[]) complexArray85);
        char[] charArray91 = new char[] { ' ', '4', '#', '#' };
        printWriter86.println(charArray91);
        printWriter38.print(charArray91);
        printWriter23.println(charArray91);
        printWriter23.println((double) 100.0f);
        printWriter23.write(1);
        boolean boolean99 = printWriter23.checkError();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "de" + "'", str52, "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ , 4, #, #]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale locale6 = new java.util.Locale("\u30c9\u30a4\u30c4", "org.apache.commons.math.FunctionEvaluationException: fra", "jpn");
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale0.getDisplayScript(locale8);
        java.util.Locale locale14 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet15 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str1, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale6.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja" + "'", str9, "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)" + "'", str11, "\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.write("\u30c9\u30a4\u30c4");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex9.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.exp();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex15.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex12.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        printWriter6.print((java.lang.Object) complex25);
        printWriter6.print(0L);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println(false);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        printStream5.print((long) (byte) 1);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("CN");
        printWriter11.print((double) '#');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ja");
        printStream18.print(100.0f);
        boolean boolean21 = printStream18.checkError();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream18.printf(locale24, "", (java.lang.Object[]) throwableArray35);
        java.io.PrintWriter printWriter37 = printWriter15.printf("fra", (java.lang.Object[]) throwableArray35);
        printWriter15.println(false);
        printWriter15.println((float) (short) 100);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println(2.745966909874291d);
        java.io.PrintStream printStream46 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: fra");
        printWriter15.print((java.lang.Object) "org.apache.commons.math.FunctionEvaluationException: fra");
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println((long) (short) 0);
        java.io.PrintStream printStream52 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream52, false);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex60, complex63 };
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, 0.0d);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException74);
        java.lang.Throwable[] throwableArray76 = functionEvaluationException74.getSuppressed();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray67, (java.lang.Throwable) mathException77);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, Double.NaN);
        java.io.PrintStream printStream81 = printStream52.printf(locale56, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray80);
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter("ja");
        printWriter83.println((float) 10);
        char[] charArray91 = new char[] { 'u', 'a', '4', '#', 'a' };
        printWriter83.write(charArray91);
        printStream52.println(charArray91);
        printWriter15.print(charArray91);
        printWriter11.write(charArray91);
        printStream5.print((java.lang.Object) charArray91);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "ua4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "ua4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[u, a, 4, #, a]");
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream37);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, true);
        java.io.PrintWriter printWriter42 = printWriter40.append('4');
        java.io.PrintWriter printWriter44 = printWriter42.append((java.lang.CharSequence) "kanada");
        printWriter44.println((long) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        printWriter23.print((double) 'u');
        printWriter23.println(0.0d);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.exp();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex40.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex46.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex43.multiply(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex52 = complex51.acos();
        org.apache.commons.math.complex.Complex complex53 = complex50.add(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.atan();
        org.apache.commons.math.complex.Complex complex55 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.exp();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex59.divide(complex61);
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = complex56.add(complex61);
        org.apache.commons.math.complex.Complex complex65 = complex51.divide(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex51.acos();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex68.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex68.asin();
        boolean boolean72 = complex68.isInfinite();
        org.apache.commons.math.complex.Complex complex73 = complex67.multiply(complex68);
        org.apache.commons.math.complex.Complex complex74 = complex67.tanh();
        printWriter23.print((java.lang.Object) complex67);
        org.apache.commons.math.complex.Complex complex76 = complex67.negate();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setExtension('4', "zh-TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        printStream1.print(0);
        char[] charArray59 = new char[] {};
        printStream1.print(charArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream62.print((-1.0f));
        java.io.PrintStream printStream66 = printStream62.append('4');
        java.io.PrintStream printStream68 = printStream62.append('a');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        java.io.PrintStream printStream76 = printStream1.append((java.lang.CharSequence) "\u65e5\u672c\u8a9e");
        printStream1.write(0);
        printStream1.print(1L);
        printStream1.println(100);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DE");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        byte[] byteArray13 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream9.write(byteArray13);
        printStream7.write(byteArray13);
        printStream7.println((int) 'u');
        printStream7.print((long) (short) 1);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getScript();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex[] complexArray31 = new org.apache.commons.math.complex.Complex[] { complex26, complex29 };
        org.apache.commons.math.complex.Complex[] complexArray33 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer25.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer25.transform2(complexArray44);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex[] complexArray53 = new org.apache.commons.math.complex.Complex[] { complex48, complex51 };
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray53, 0.0d);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray55, (java.lang.Throwable) mathException65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer25.inversetransform(complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (short) -1);
        java.io.PrintStream printStream72 = printStream7.format(locale22, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray55);
        printStream72.println((double) 10L);
        printStream72.println();
        java.io.PrintStream printStream77 = printStream72.append('x');
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream72);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream77);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Locale.Builder builder17 = builder11.setLocale(locale13);
        java.util.Locale.Builder builder18 = builder11.clearExtensions();
        java.util.Locale locale19 = builder18.build();
        java.lang.String str20 = locale19.getLanguage();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str14, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        printStream3.close();
        printStream3.print((int) (byte) 0);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.write((int) '#');
        printStream10.close();
        printStream10.println((java.lang.Object) 10.0d);
        printStream10.write(100);
        printStream10.println(false);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream10, true);
        printStream10.print('4');
        printStream10.print("\u53f0\u6e7e");
        java.io.PrintStream printStream27 = printStream10.append('a');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("ja");
        printWriter29.println((float) 10);
        printWriter29.println((int) (byte) 10);
        printWriter29.print(false);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter29.printf("de", objArray37);
        char[] charArray39 = new char[] {};
        printWriter29.write(charArray39);
        printStream10.print(charArray39);
        printStream3.println(charArray39);
        printStream3.print(false);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ja");
        printStream47.print(100.0f);
        boolean boolean50 = printStream47.checkError();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = locale51.getCountry();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale51.getDisplayCountry(locale53);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        java.io.PrintStream printStream65 = printStream47.printf(locale53, "", (java.lang.Object[]) throwableArray64);
        printStream65.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream65);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        double double73 = complex71.getImaginary();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex[] complexArray76 = new org.apache.commons.math.complex.Complex[] { complex71, complex74 };
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 35.0d);
        java.lang.Throwable throwable83 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable83);
        double double85 = functionEvaluationException84.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray80, (java.lang.Throwable) functionEvaluationException84);
        java.io.PrintWriter printWriter87 = printWriter67.printf("zho", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream88 = printStream3.format("Kanada", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream88, false);
        printStream88.println((long) 'u');
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de" + "'", str54, "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.print((int) '4');
        printWriter23.println((long) (short) 0);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder28.setExtension('a', "de");
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getVariant();
        java.lang.String str35 = locale33.getVariant();
        java.lang.String str36 = locale32.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder37 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("de");
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getScript();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        java.lang.String str47 = locale40.getDisplayCountry(locale45);
        java.util.Locale.Builder builder48 = builder37.setLocale(locale40);
        java.util.Locale locale49 = builder37.build();
        printWriter23.print((java.lang.Object) builder37);
        java.util.Locale.Builder builder51 = builder37.clear();
        java.util.Locale.Builder builder53 = builder51.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder55 = builder51.addUnicodeLocaleAttribute("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str36, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ja" + "'", str41, "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.toLanguageTag();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale4.getDisplayName(locale6);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        printStream15.print(100.0f);
        boolean boolean18 = printStream15.checkError();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayCountry(locale21);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException30.getSuppressed();
        java.io.PrintStream printStream33 = printStream15.printf(locale21, "", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter34 = printWriter12.printf("fra", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        java.io.PrintWriter printWriter44 = printWriter34.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex47, complex50 };
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.transform(complexArray54);
        java.io.PrintWriter printWriter56 = printWriter34.format("fra", (java.lang.Object[]) complexArray55);
        java.io.PrintWriter printWriter57 = printWriter3.format(locale4, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray55);
        printWriter3.print((float) 0);
        printWriter3.flush();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "japonais" + "'", str9, "japonais");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "de" + "'", str22, "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex19.negate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex27 = complex22.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex22.tan();
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex22);
        org.apache.commons.math.complex.Complex complex30 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex15.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex12.subtract(complex15);
        org.apache.commons.math.complex.Complex complex33 = complex12.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5403023058681398d + "'", double10 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.lang.Object obj7 = null;
        printStream6.print(obj7);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        printStream12.print(100.0f);
        boolean boolean15 = printStream12.checkError();
        org.apache.commons.math.complex.Complex complex18 = new org.apache.commons.math.complex.Complex((double) 10, 0.5403023058681398d);
        printStream12.print((java.lang.Object) 10);
        printStream12.println((int) (byte) 10);
        printStream12.println("\u82f1\u8a9e");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("ja");
        printWriter25.flush();
        printWriter25.println();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream32 = new java.io.PrintStream("ja");
        printStream32.print(100.0f);
        boolean boolean35 = printStream32.checkError();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale36.getDisplayCountry(locale38);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException47);
        java.lang.Throwable[] throwableArray49 = functionEvaluationException47.getSuppressed();
        java.io.PrintStream printStream50 = printStream32.printf(locale38, "", (java.lang.Object[]) throwableArray49);
        java.io.PrintWriter printWriter51 = printWriter29.printf("fra", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex[] complexArray58 = new org.apache.commons.math.complex.Complex[] { complex53, complex56 };
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, 0.0d);
        java.io.PrintWriter printWriter61 = printWriter51.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex64, complex67 };
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform(complexArray71);
        java.io.PrintWriter printWriter73 = printWriter51.format("fra", (java.lang.Object[]) complexArray72);
        char[] charArray78 = new char[] { ' ', '4', '#', '#' };
        printWriter73.println(charArray78);
        printWriter25.print(charArray78);
        printStream12.println(charArray78);
        printWriter10.write(charArray78);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , 4, #, #]");
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        printStream1.println(1.0050120396650741d);
        printStream1.print('x');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.println((long) 0);
        printStream19.println('#');
        printStream19.println(true);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        printStream19.print(1.557407724654902d);
        printStream19.print('4');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayCountry(locale23);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getScript();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getCountry();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayCountry(locale35);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale14, locale16, locale17, locale19, locale20, locale23, locale26, locale27, locale29, locale31, locale32, locale33, locale38, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList42);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.exp();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex49.divide(complex51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { locale44, (short) -1, 'a', complex49, (short) 10 };
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ja", objArray54, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException61);
        double double64 = functionEvaluationException61.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("French", (java.lang.Throwable) functionEvaluationException66);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException73);
        java.lang.Throwable[] throwableArray75 = functionEvaluationException73.getSuppressed();
        double double76 = functionEvaluationException73.getArgument();
        double double77 = functionEvaluationException73.getArgument();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException73);
        double double79 = functionEvaluationException73.getArgument();
        functionEvaluationException66.addSuppressed((java.lang.Throwable) functionEvaluationException73);
        java.lang.String str81 = functionEvaluationException73.toString();
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "de" + "'", str36, "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 35.0d + "'", double76 == 35.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.apache.commons.math.FunctionEvaluationException" + "'", str81, "org.apache.commons.math.FunctionEvaluationException");
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u30c9\u30a4\u30c4\u8a9e_CN", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fr_?????_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer1.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.inversetransform(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer21.transform(doubleArray36);
        double[] doubleArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer1.transform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.inversetransform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex44, complex47 };
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, (double) '4');
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform2(complexArray54);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.transform2(univariateRealFunction56, 7.838747943897383d, (-0.19828411505616464d), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [7.838747943897383, -0.19828411505616464]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println(false);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale7 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: de");
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray39 = functionEvaluationException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray30, (java.lang.Throwable) mathException40);
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, Double.NaN);
        java.io.PrintStream printStream44 = printStream15.printf(locale19, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray43);
        java.io.PrintWriter printWriter45 = printWriter12.format("ja", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray43);
        java.io.PrintStream printStream47 = printStream5.format(locale7, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Object[]) complexArray43);
        printStream47.flush();
        printStream47.println();
        printStream47.write((int) 'x');
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream47, true);
        org.junit.Assert.assertEquals(locale7.toString(), "org.apache.commons.math.functionevaluationexception: de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.functionevaluationexception: de" + "'", str8, "org.apache.commons.math.functionevaluationexception: de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream47);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Locale.Builder builder17 = builder11.setLocale(locale13);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.clearExtensions();
        java.util.Locale.Builder builder21 = builder17.setScript("");
        java.util.Locale.Builder builder23 = builder17.setLanguage("tw");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("CA", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: CHN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: org.apache.commons.math.MathException: org.apache.commons.math.MathException: CHN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str14, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer1.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.inversetransform(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer21.transform(doubleArray36);
        double[] doubleArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray36, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer1.transform2(doubleArray40);
        double[] doubleArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray40, Double.NaN);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray43, (-0.0d));
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.inversetransform2(complexArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray46);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.6287402838720084d, (double) (short) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print((-1.0f));
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print("");
        printStream1.println((int) '4');
        printStream1.print((long) (byte) 10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        printStream15.print(100.0f);
        printStream15.print((-1.0f));
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream15, true);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        boolean boolean23 = locale22.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.transform(complexArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer26.transform2(complexArray45);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer26.inversetransform(complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (short) -1);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream74 = printStream15.printf(locale22, "Evaluation failed for argument = {0}", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream76 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream78 = printStream76.append((java.lang.CharSequence) "");
        printStream78.print((int) (short) 100);
        java.io.PrintStream printStream82 = new java.io.PrintStream("ja");
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream82.write(byteArray86);
        printStream78.write(byteArray86);
        printStream74.write(byteArray86);
        printStream1.write(byteArray86);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[100, 0, -1]");
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter23.println((int) (short) 100);
        boolean boolean26 = printWriter23.checkError();
        printWriter23.print((float) ' ');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getISO3Country();
        java.util.Locale.Builder builder23 = builder20.setLocale(locale21);
        java.util.Locale.Builder builder25 = builder20.setLanguageTag("CHN");
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale.Builder builder27 = builder25.clear();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder27.setUnicodeLocaleKeyword("und-CA-x-lvariant-CN", "zh-TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: und-CA-x-lvariant-CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale22.getScript();
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream27 = printStream19.format(locale22, "fra", (java.lang.Object[]) strArray26);
        java.util.Set<java.lang.String> strSet28 = locale22.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        printWriter1.write((int) (byte) 10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex[] complexArray20 = new org.apache.commons.math.complex.Complex[] { complex15, complex18 };
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray20, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.transform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.inversetransform(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer14.transform(doubleArray29);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer14.transform(complexArray41);
        java.io.PrintWriter printWriter54 = printWriter1.format("org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray53);
        printWriter1.print(true);
        java.io.PrintWriter printWriter58 = printWriter1.append(' ');
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException8);
        java.lang.Throwable[] throwableArray10 = functionEvaluationException8.getSuppressed();
        double double11 = functionEvaluationException8.getArgument();
        double double12 = functionEvaluationException8.getArgument();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) functionEvaluationException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 10, (java.lang.Throwable) functionEvaluationException37);
        mathException13.addSuppressed((java.lang.Throwable) functionEvaluationException37);
        functionEvaluationException2.addSuppressed((java.lang.Throwable) mathException13);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.print('#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "\u65e5\u672c\u8a9e\u65e5\u672c\u65e5\u6587)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??? (??) (??)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Japanese");
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Locale.Builder builder7 = builder4.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setUnicodeLocaleKeyword("German (Germany)", "Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: German (Germany) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform(doubleArray17);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException(throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException36);
        java.lang.Throwable[] throwableArray38 = functionEvaluationException36.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray29, (java.lang.Throwable) mathException39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer2.transform(complexArray29);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex[] complexArray49 = new org.apache.commons.math.complex.Complex[] { complex44, complex47 };
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, 0.0d);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException(throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException58);
        java.lang.Throwable[] throwableArray60 = functionEvaluationException58.getSuppressed();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray51, (java.lang.Throwable) mathException61);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer2.transform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer68.inversetransform(doubleArray70);
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException77);
        java.lang.String str79 = functionEvaluationException77.getPattern();
        java.lang.String str80 = functionEvaluationException77.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "jpn", (java.lang.Object[]) complexArray71, (java.lang.Throwable) functionEvaluationException77);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer2.inversetransform(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(3.114815449309804d, "zh");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(1.3117440389749047d, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray71, (java.lang.Throwable) functionEvaluationException87);
        double double89 = functionEvaluationException87.getArgument();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3.114815449309804d + "'", double89 == 3.114815449309804d);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable14);
        double double16 = functionEvaluationException15.getArgument();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex19, complex22 };
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform(complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer18.transform2(complexArray37);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException55.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException58);
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer18.inversetransform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) (short) -1);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray64);
        functionEvaluationException15.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "Japanese", (java.lang.Object[]) complexArray11, (java.lang.Throwable) functionEvaluationException15);
        java.lang.String str68 = functionEvaluationException15.toString();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str68, "org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter28.print((int) 'x');
        printWriter28.write("HI!", (int) (byte) 10, (int) (short) -1);
        printWriter28.close();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) 'x');
        java.lang.String str2 = functionEvaluationException1.getPattern();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException1);
        java.lang.String str4 = functionEvaluationException1.getPattern();
        java.lang.String str5 = functionEvaluationException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Evaluation failed for argument = {0}" + "'", str2, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Evaluation failed for argument = {0}" + "'", str4, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 120" + "'", str5, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 120");
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print((java.lang.Object) printWriter53);
        java.io.PrintWriter printWriter56 = printWriter53.append(' ');
        boolean boolean57 = printWriter53.checkError();
        java.io.PrintWriter printWriter59 = printWriter53.append((java.lang.CharSequence) "\uc911\uad6d");
        java.io.PrintWriter printWriter61 = printWriter59.append('#');
        printWriter59.write((int) (short) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        java.lang.Throwable[] throwableArray68 = functionEvaluationException67.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter59.format("org.apache.commons.math.FunctionEvaluationException: jpn", (java.lang.Object[]) throwableArray68);
        printWriter59.print((long) '4');
        printWriter59.println();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "HI!");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale19.getDisplayName();
        java.lang.String str22 = locale15.getDisplayLanguage(locale19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer26.inversetransform(doubleArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray29);
        java.io.PrintStream printStream31 = printStream14.printf(locale19, "CN", (java.lang.Object[]) complexArray29);
        char[] charArray32 = new char[] {};
        printStream14.print(charArray32);
        printStream10.println(charArray32);
        printWriter7.write(charArray32);
        printWriter7.println((long) (byte) 100);
        printWriter7.print((long) 'a');
        org.junit.Assert.assertNotNull(printWriter5);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str22, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform(complexArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer2.transform2(complexArray21);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.String str30 = functionEvaluationException28.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray22, (java.lang.Throwable) functionEvaluationException28);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 35.0d);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable48);
        double double50 = functionEvaluationException49.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray45, (java.lang.Throwable) functionEvaluationException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException49);
        functionEvaluationException31.addSuppressed((java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print((long) 'x');
        printStream1.println(' ');
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Japanese");
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.io.PrintStream printStream6 = new java.io.PrintStream("fr");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.toLanguageTag();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ja");
        printStream20.print(100.0f);
        boolean boolean23 = printStream20.checkError();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayCountry(locale26);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Throwable[] throwableArray37 = functionEvaluationException35.getSuppressed();
        java.io.PrintStream printStream38 = printStream20.printf(locale26, "", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter39 = printWriter17.printf("fra", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.io.PrintWriter printWriter49 = printWriter39.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex[] complexArray57 = new org.apache.commons.math.complex.Complex[] { complex52, complex55 };
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.transform(complexArray59);
        java.io.PrintWriter printWriter61 = printWriter39.format("fra", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter8.format(locale9, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray60);
        java.util.Locale.Builder builder63 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder65 = builder63.setLanguageTag("japonais");
        java.util.Locale.Builder builder66 = builder63.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder68 = builder66.setLanguage("org.apache.commons.math.functionevaluationexception: hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.functionevaluationexception: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr" + "'", str12, "fr");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "japonais" + "'", str14, "japonais");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale22.getScript();
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream27 = printStream19.format(locale22, "fra", (java.lang.Object[]) strArray26);
        printStream19.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        printWriter29.print('a');
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter29, true);
        printWriter33.print(false);
        printWriter33.print((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex9.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.exp();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex15.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex12.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex12.asin();
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex6.negate();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex23.conjugate();
        boolean boolean26 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.exp();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex29.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.exp();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex35.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex32.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex41 = complex40.acos();
        org.apache.commons.math.complex.Complex complex42 = complex39.add(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex25.pow(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex6.pow(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex44.tanh();
        boolean boolean46 = complex44.isInfinite();
        boolean boolean47 = complex44.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex44.asin();
        org.apache.commons.math.complex.Complex complex49 = complex2.multiply(complex44);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        printWriter1.flush();
        printWriter1.println((double) (short) 1);
        printWriter1.close();
        java.io.PrintWriter printWriter16 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.functionevaluationexception: de");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) 'a');
        java.lang.Object[] objArray20 = functionEvaluationException19.getArguments();
        java.io.PrintWriter printWriter21 = printWriter1.format("", objArray20);
        printWriter21.close();
        printWriter21.println();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[97.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[97.0]");
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("CN", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("CHN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("fra", strMap6);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double11 = languageRange10.getWeight();
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange10, languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str23 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strSet22);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("fra", strMap26);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double31 = languageRange30.getWeight();
        java.util.Locale.LanguageRange languageRange34 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] { languageRange30, languageRange34 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList39, (java.util.Collection<java.lang.String>) strSet42);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray50 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale54.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale60 = java.util.Locale.PRC;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.getCountry();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getLanguage();
        java.lang.String str65 = locale61.getDisplayCountry(locale63);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getISO3Country();
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.lang.String str70 = locale69.getScript();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getCountry();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = locale73.getDisplayCountry(locale75);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.lang.String str79 = locale78.getLanguage();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale54, locale56, locale57, locale59, locale60, locale63, locale66, locale67, locale69, locale71, locale72, locale73, locale78, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale locale84 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale locale87 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList85);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "de" + "'", str21, "de");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr" + "'", str55, "fr");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "de" + "'", str76, "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "de" + "'", str79, "de");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNull(locale87);
        org.junit.Assert.assertNull(locale88);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Country();
        boolean boolean12 = locale10.hasExtensions();
        java.util.Locale.Builder builder13 = builder3.setLocale(locale10);
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale15.getScript();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "de");
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = locale22.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder27 = builder21.setLocale(locale23);
        java.lang.String str28 = locale15.getDisplayLanguage(locale23);
        java.lang.String str29 = locale23.getISO3Country();
        java.util.Locale.Builder builder30 = builder13.setLocale(locale23);
        java.lang.String str31 = locale23.getISO3Country();
        java.lang.String str32 = locale23.getDisplayName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ja" + "'", str16, "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str26, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str28, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese" + "'", str32, "Japanese");
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.io.PrintStream printStream2 = new java.io.PrintStream("fr");
        printStream2.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale23);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayCountry(locale29);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getCountry();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale39.getDisplayCountry(locale41);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale20, locale22, locale23, locale25, locale26, locale29, locale32, locale33, locale35, locale37, locale38, locale39, locale44, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getLanguage();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode55 = null;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet54, filteringMode55);
        printStream2.print((java.lang.Object) languageRangeList9);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex62, complex65 };
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer61.transform(complexArray69);
        java.io.PrintStream printStream71 = printStream2.printf(locale58, "de", (java.lang.Object[]) complexArray69);
        java.util.Set<java.lang.String> strSet72 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str73 = locale0.getDisplayVariant(locale58);
        boolean boolean74 = locale0.hasExtensions();
        java.util.Set<java.lang.Character> charSet75 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de" + "'", str30, "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de" + "'", str42, "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "de" + "'", str45, "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ja" + "'", str53, "ja");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charSet75);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex0.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex0.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        boolean boolean15 = complex14.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.io.PrintWriter printWriter31 = printWriter29.append('x');
        printWriter29.println('4');
        printWriter29.print("HI!");
        printWriter29.println((int) ' ');
        printWriter29.println();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter31);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.io.PrintStream printStream72 = printStream1.append('u');
        printStream1.println(100.0f);
        printStream1.flush();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ja");
        printStream3.print(100.0f);
        boolean boolean6 = printStream3.checkError();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getCountry();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale7.getDisplayCountry(locale9);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream3.printf(locale9, "", (java.lang.Object[]) throwableArray20);
        printStream21.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer24.inversetransform(doubleArray26);
        java.io.PrintStream printStream28 = printStream21.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "Japanese", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.complex.Complex[] complexArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.7671576417562594d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "de" + "'", str10, "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(complexArray31);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale22.getScript();
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream27 = printStream19.format(locale22, "fra", (java.lang.Object[]) strArray26);
        java.lang.String str28 = locale22.getScript();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale locale30 = builder29.build();
        java.util.Locale locale33 = new java.util.Locale("ja", "");
        java.lang.String str34 = locale30.getDisplayLanguage(locale33);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale30.getDisplayLanguage(locale35);
        java.lang.String str37 = locale30.getDisplayName();
        java.lang.String str38 = locale22.getDisplayScript(locale30);
        java.lang.String str39 = locale22.getLanguage();
        java.lang.String str40 = locale22.getScript();
        java.lang.String str41 = locale22.toLanguageTag();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ja" + "'", str39, "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ja" + "'", str41, "ja");
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.179501321915592d, 0.5406558493518019d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.179501321915592, 0.5406558493518019]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex12.cos();
        org.apache.commons.math.complex.Complex complex17 = complex12.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale4.getScript();
        java.lang.String str6 = locale4.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-CN" + "'", str6, "zh-CN");
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex11 = complex6.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex10.pow(complex12);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex17.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex19.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex12.add(complex22);
        boolean boolean25 = complex24.isNaN();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex28.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.exp();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex34.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex31.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex24.divide(complex31);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.negate();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex46.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex50.exp();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex52.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex49.multiply(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex49.tanh();
        boolean boolean58 = complex43.equals((java.lang.Object) complex49);
        org.apache.commons.math.complex.Complex complex59 = complex31.pow(complex43);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex61 = complex60.acos();
        org.apache.commons.math.complex.Complex complex62 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex complex65 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.log();
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = complex62.add(complex65);
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex72.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex72.sqrt1z();
        org.apache.commons.math.complex.Complex complex75 = complex74.asin();
        org.apache.commons.math.complex.Complex complex76 = complex65.pow(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex31.add(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex31.log();
        org.apache.commons.math.complex.Complex complex79 = complex31.log();
        org.apache.commons.math.complex.Complex complex80 = complex31.exp();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        double double83 = complex81.getImaginary();
        org.apache.commons.math.complex.Complex complex84 = complex81.sin();
        org.apache.commons.math.complex.Complex complex85 = complex84.atan();
        org.apache.commons.math.complex.Complex complex86 = complex85.log();
        org.apache.commons.math.complex.Complex complex87 = complex31.divide(complex85);
        boolean boolean88 = languageRange2.equals((java.lang.Object) complex31);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-0.0d) + "'", double67 == (-0.0d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer0.inversetransform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.inversetransform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer20.transform(doubleArray35);
        double[] doubleArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray35, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(doubleArray39);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray39, Double.NaN);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (-0.0d));
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (double) '4');
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN, NaN, NaN, NaN]");
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.println("\u4e2d\u56fd\u8a9e");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.write("org.apache.commons.math.mathexception: org.apache.commons.math.functionevaluationexception: fra");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.print("fr");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter6.println(100L);
        printWriter6.print((long) 1);
        printWriter6.print((long) (byte) 100);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.io.PrintWriter printWriter15 = printWriter6.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e_CN");
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder14 = builder3.setLocale(locale10);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale17 = new java.util.Locale("");
        java.lang.String str18 = locale17.getVariant();
        java.util.Locale.Builder builder19 = builder14.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder14.setScript("");
        java.util.Locale.Builder builder23 = builder21.setLanguageTag("und-CA-x-lvariant-CN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("\u30d5\u30e9\u30f3\u30b9\u8a9e (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA)", "fr-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ????? (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer3.transform2(complexArray22);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException(throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException29);
        java.lang.String str31 = functionEvaluationException29.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray23, (java.lang.Throwable) functionEvaluationException29);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 35.0d);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable49);
        double double51 = functionEvaluationException50.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray46, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException50);
        functionEvaluationException32.addSuppressed((java.lang.Throwable) functionEvaluationException53);
        java.lang.Throwable[] throwableArray55 = functionEvaluationException53.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(2.745966909874291d, (java.lang.Throwable) functionEvaluationException53);
        double double57 = functionEvaluationException53.getArgument();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream39.print((double) 1L);
        printStream39.print(true);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream39, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter49 = printWriter45.append((java.lang.CharSequence) "ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA", (int) (short) 10, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException", "\u30c9\u30a4\u30c4");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.io.PrintStream printStream7 = new java.io.PrintStream("fr");
        printStream7.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] { languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale28);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.PRC;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale32.getDisplayCountry(locale34);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getCountry();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayCountry(locale46);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale25, locale27, locale28, locale30, locale31, locale34, locale37, locale38, locale40, locale42, locale43, locale44, locale49, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode60 = null;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet59, filteringMode60);
        printStream7.print((java.lang.Object) languageRangeList14);
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex67, complex70 };
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer66.transform(complexArray74);
        java.io.PrintStream printStream76 = printStream7.printf(locale63, "de", (java.lang.Object[]) complexArray74);
        java.util.Set<java.lang.String> strSet77 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale63.getDisplayScript();
        java.util.Locale.setDefault(category5, locale63);
        java.lang.String str80 = locale4.getDisplayScript(locale63);
        java.lang.String str81 = locale63.getDisplayLanguage();
        java.lang.String str82 = locale63.getDisplayVariant();
        java.util.Locale locale83 = locale63.stripExtensions();
        java.lang.String str84 = locale2.getDisplayLanguage(locale63);
        java.lang.String str85 = locale2.getVariant();
        java.lang.String str86 = locale2.toLanguageTag();
        java.lang.String str87 = locale2.toLanguageTag();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr" + "'", str26, "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de" + "'", str35, "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "de" + "'", str50, "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str81, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.math.mathexception" + "'", str84, "org.apache.commons.math.mathexception");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "und" + "'", str86, "und");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayName();
        boolean boolean7 = locale1.hasExtensions();
        java.lang.String str8 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter9.print(1.2024492670356164d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.lang.Object obj7 = null;
        printStream6.print(obj7);
        printStream6.flush();
        printStream6.flush();
        printStream6.close();
        printStream6.print((float) (short) 10);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cn" + "'", str2, "cn");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex2.cos();
        org.apache.commons.math.complex.Complex complex7 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex8.exp();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex10.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex16.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex13.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex22.atan();
        org.apache.commons.math.complex.Complex complex25 = complex21.multiply(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex21.sin();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        double double29 = complex28.abs();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex21.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex7.pow(complex32);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream41 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream41, false);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        java.io.PrintStream printStream70 = printStream41.printf(locale45, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter38.format("ja", (java.lang.Object[]) complexArray69);
        java.lang.Object obj72 = null;
        printWriter71.print(obj72);
        printWriter71.println((double) '4');
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex77 = complex76.acos();
        org.apache.commons.math.complex.Complex complex78 = complex76.tanh();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex81.conjugate();
        org.apache.commons.math.complex.Complex complex83 = complex81.sqrt1z();
        org.apache.commons.math.complex.Complex complex84 = complex83.asin();
        org.apache.commons.math.complex.Complex complex85 = complex78.pow(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex84.log();
        org.apache.commons.math.complex.Complex complex87 = complex84.tan();
        org.apache.commons.math.complex.Complex complex88 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex89 = complex88.cosh();
        org.apache.commons.math.complex.Complex complex90 = complex88.sqrt();
        org.apache.commons.math.complex.Complex complex91 = complex90.conjugate();
        org.apache.commons.math.complex.Complex complex92 = complex90.sqrt1z();
        org.apache.commons.math.complex.Complex complex93 = complex92.cosh();
        org.apache.commons.math.complex.Complex complex94 = complex87.pow(complex92);
        org.apache.commons.math.complex.Complex complex95 = complex87.acos();
        printWriter71.println((java.lang.Object) complex95);
        org.apache.commons.math.complex.Complex complex97 = complex95.sqrt1z();
        org.apache.commons.math.complex.Complex complex98 = complex7.subtract(complex97);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Englisch (Kanada)", "Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinese (Taiwan)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.negate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex10 = complex5.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex5.tan();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex5);
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        double double14 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex15 = complex13.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.9188633447586603d + "'", double14 == 1.9188633447586603d);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex8);
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.negate();
        double double14 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex3.sinh();
        double double16 = complex3.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5403023058681398d + "'", double10 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.5403023058681398d) + "'", double12 == (-0.5403023058681398d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.0d) + "'", double14 == (-0.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5403023058681398d + "'", double16 == 0.5403023058681398d);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale locale5 = new java.util.Locale("ja", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double11 = languageRange10.getWeight();
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange10, languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale.LanguageRange languageRange20 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] { languageRange20 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale36);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getCountry();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayCountry(locale42);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getScript();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getCountry();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale52.getDisplayCountry(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale33, locale35, locale36, locale38, locale39, locale42, locale45, locale46, locale48, locale50, locale51, locale52, locale57, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList64, filteringMode65);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray72 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.lang.String[] strArray81 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strList82);
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.parse("Japanese", strMap87);
        java.util.Locale locale89 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale89);
        java.util.Set<java.lang.String> strSet91 = locale89.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList88, (java.util.Collection<java.lang.String>) strSet91, filteringMode92);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList82, filteringMode92);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet7, filteringMode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de" + "'", str55, "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "de" + "'", str58, "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode65.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(languageRangeList88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode92.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.flush();
        printWriter1.println((long) (short) 10);
        printWriter1.println(0.0f);
        printWriter1.println(true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 0.5403023058681398d, 0.5403023058681398d, 1.0050120396650741d, 117.0d };
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer10.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex[] complexArray27 = new org.apache.commons.math.complex.Complex[] { complex22, complex25 };
        org.apache.commons.math.complex.Complex[] complexArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray27, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.inversetransform(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer21.transform(doubleArray36);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex[] complexArray46 = new org.apache.commons.math.complex.Complex[] { complex41, complex44 };
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, 0.0d);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException55.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray48, (java.lang.Throwable) mathException58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer21.transform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray62 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) ' ');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(120.0d, "\u30d3\u30fc\u30c1\u30fb\u30e9\u30fb\u30de\u30fc\u7b49", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer10.transform2(complexArray48);
        java.io.PrintWriter printWriter65 = printWriter1.format("Taiwan", (java.lang.Object[]) complexArray64);
        java.util.Locale locale69 = new java.util.Locale("\u30c9\u30a4\u30c4", "org.apache.commons.math.FunctionEvaluationException: fra", "jpn");
        java.util.Locale locale70 = locale69.stripExtensions();
        java.lang.String str71 = locale69.getDisplayVariant();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = locale72.getLanguage();
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.lang.String str75 = locale74.toLanguageTag();
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = locale72.getDisplayName(locale74);
        java.util.Locale locale79 = new java.util.Locale("hi!");
        java.lang.String str80 = locale79.getDisplayScript();
        java.lang.String str81 = locale79.getDisplayScript();
        java.lang.String str82 = locale72.getDisplayName(locale79);
        java.lang.String str83 = locale69.getDisplayVariant(locale72);
        java.lang.Object[] objArray85 = null;
        java.io.PrintWriter printWriter86 = printWriter65.format(locale69, "\u65e5\u672c\u8a9e", objArray85);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.5403023058681398, 0.5403023058681398, 1.0050120396650741, 117.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertEquals(locale69.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "jpn" + "'", str71, "jpn");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ja" + "'", str73, "ja");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fr" + "'", str75, "fr");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "japonais" + "'", str77, "japonais");
        org.junit.Assert.assertEquals(locale79.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Japanese" + "'", str82, "Japanese");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "jpn" + "'", str83, "jpn");
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex4.atan();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex14.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex11.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        boolean boolean21 = complex20.isNaN();
        boolean boolean22 = complex5.equals((java.lang.Object) complex20);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        java.lang.Object obj35 = null;
        printWriter34.print(obj35);
        java.io.PrintStream printStream39 = new java.io.PrintStream("ja");
        printStream39.print(100.0f);
        boolean boolean42 = printStream39.checkError();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale43.getDisplayCountry(locale45);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException(throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException54);
        java.lang.Throwable[] throwableArray56 = functionEvaluationException54.getSuppressed();
        java.io.PrintStream printStream57 = printStream39.printf(locale45, "", (java.lang.Object[]) throwableArray56);
        printStream57.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer60.inversetransform(doubleArray62);
        java.io.PrintStream printStream64 = printStream57.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray63);
        java.io.PrintWriter printWriter65 = printWriter34.printf("\u30c9\u30a4\u30c4", (java.lang.Object[]) complexArray63);
        printWriter65.print(true);
        printWriter65.println((int) (byte) 100);
        printWriter65.println(1.557407724654902d);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "de" + "'", str46, "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printWriter65);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale.Builder builder22 = builder20.setScript("");
        java.util.Locale.Builder builder25 = builder22.setExtension('u', "fr-FR");
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale26.getDisplayCountry(locale29);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale29.getDisplayCountry(locale31);
        java.util.Locale.Builder builder33 = builder22.setLocale(locale29);
        java.lang.String str34 = locale29.getDisplayLanguage();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale locale36 = builder35.build();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = locale29.getDisplayVariant(locale36);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ja" + "'", str27, "ja");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str32, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str34, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer27.transform2(complexArray46);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException(throwable51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException53);
        java.lang.String str55 = functionEvaluationException53.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray47, (java.lang.Throwable) functionEvaluationException53);
        java.io.PrintWriter printWriter57 = printWriter23.format("fr", (java.lang.Object[]) complexArray47);
        printWriter57.println((float) '#');
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        java.io.PrintWriter printWriter62 = printWriter57.append((java.lang.CharSequence) "zh_CN");
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter57, true);
        printWriter64.write((int) '#');
        printWriter64.println((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter62);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        printWriter1.println("\u82f1\u8a9e");
        printWriter1.print(false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter7.print('u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex19, complex22 };
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 0.0d);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException36);
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, Double.NaN);
        java.io.PrintStream printStream40 = printStream11.printf(locale15, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("ja");
        printWriter42.println((float) 10);
        char[] charArray50 = new char[] { 'u', 'a', '4', '#', 'a' };
        printWriter42.write(charArray50);
        printStream11.println(charArray50);
        // The following exception was thrown during execution in test generation
        try {
            printWriter7.write(charArray50, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "ua4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "ua4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[u, a, 4, #, a]");
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale7 = new java.util.Locale("cn", "CHN", "English (United States)");
        java.lang.String str8 = locale0.getDisplayScript(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str2, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale7.toString(), "cn_CHN_English (United States)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex0.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex0.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex18 = complex13.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.exp();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex26.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex19.add(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex12.multiply(complex29);
        org.apache.commons.math.complex.Complex complex33 = complex12.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.println((-1.0d));
        printStream1.print(0.7112997209476237d);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex4);
        boolean boolean6 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex5.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray2 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray3 = fastFourierTransformer0.inversetransform(doubleArray2);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream8 = new java.io.PrintStream("ja");
        printStream8.print(100.0f);
        boolean boolean11 = printStream8.checkError();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getCountry();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayCountry(locale14);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException(throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException23);
        java.lang.Throwable[] throwableArray25 = functionEvaluationException23.getSuppressed();
        java.io.PrintStream printStream26 = printStream8.printf(locale14, "", (java.lang.Object[]) throwableArray25);
        java.io.PrintWriter printWriter27 = printWriter5.printf("fra", (java.lang.Object[]) throwableArray25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        java.io.PrintWriter printWriter37 = printWriter27.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        java.io.PrintWriter printWriter49 = printWriter27.format("fra", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer0.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer51.inversetransform(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(complexArray54);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform(univariateRealFunction56, 0.0d, 0.8420233390980636d, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex((double) 10, 0.5403023058681398d);
        printStream1.print((java.lang.Object) 10);
        printStream1.println((int) (byte) 10);
        printStream1.println("\u82f1\u8a9e");
        printStream1.println((-1.0f));
        printStream1.close();
        printStream1.print((double) (byte) 1);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream23 = new java.io.PrintStream("ja");
        printStream23.print(100.0f);
        boolean boolean26 = printStream23.checkError();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayCountry(locale29);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException(throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException38);
        java.lang.Throwable[] throwableArray40 = functionEvaluationException38.getSuppressed();
        java.io.PrintStream printStream41 = printStream23.printf(locale29, "", (java.lang.Object[]) throwableArray40);
        java.io.PrintWriter printWriter42 = printWriter20.printf("fra", (java.lang.Object[]) throwableArray40);
        printWriter20.println(false);
        printWriter20.println((float) (short) 100);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter20, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex[] complexArray56 = new org.apache.commons.math.complex.Complex[] { complex51, complex54 };
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer50.transform2(complexArray69);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        double double75 = complex73.getImaginary();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex[] complexArray78 = new org.apache.commons.math.complex.Complex[] { complex73, complex76 };
        org.apache.commons.math.complex.Complex[] complexArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray78, 0.0d);
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException(throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException87);
        java.lang.Throwable[] throwableArray89 = functionEvaluationException87.getSuppressed();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray89);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray80, (java.lang.Throwable) mathException90);
        org.apache.commons.math.complex.Complex[] complexArray93 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer50.inversetransform(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, 35.0d);
        java.io.PrintWriter printWriter97 = printWriter48.format("\u4e2d\u6587", (java.lang.Object[]) complexArray94);
        java.io.PrintStream printStream98 = printStream1.printf("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)", (java.lang.Object[]) complexArray94);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de" + "'", str30, "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(printWriter97);
        org.junit.Assert.assertNotNull(printStream98);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("ja");
        printWriter36.println((float) 10);
        printWriter36.println((int) (byte) 10);
        printWriter36.print(false);
        java.lang.Object[] objArray44 = null;
        java.io.PrintWriter printWriter45 = printWriter36.printf("de", objArray44);
        char[] charArray46 = new char[] {};
        printWriter36.write(charArray46);
        printWriter34.println(charArray46);
        printWriter34.println((double) 10L);
        printWriter34.println((float) (short) -1);
        printWriter34.write("ZHO", (int) (byte) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[]");
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex8.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.add(complex13);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex19.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex18.add(complex19);
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex13.pow(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex13.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream7.print((long) (byte) -1);
        printStream7.print('x');
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        boolean boolean19 = printStream16.checkError();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayCountry(locale22);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException31);
        java.lang.Throwable[] throwableArray33 = functionEvaluationException31.getSuppressed();
        java.io.PrintStream printStream34 = printStream16.printf(locale22, "", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter13.printf("fra", (java.lang.Object[]) throwableArray33);
        printWriter35.print((float) (-1L));
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream42 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream42, false);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException(throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException64);
        java.lang.Throwable[] throwableArray66 = functionEvaluationException64.getSuppressed();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray57, (java.lang.Throwable) mathException67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, Double.NaN);
        java.io.PrintStream printStream71 = printStream42.printf(locale46, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray70);
        java.io.PrintWriter printWriter72 = printWriter39.format("ja", (java.lang.Object[]) complexArray70);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter("ja");
        printWriter74.println((float) 10);
        printWriter74.println((int) (byte) 10);
        printWriter74.print(false);
        java.lang.Object[] objArray82 = null;
        java.io.PrintWriter printWriter83 = printWriter74.printf("de", objArray82);
        char[] charArray84 = new char[] {};
        printWriter74.write(charArray84);
        printWriter72.println(charArray84);
        printWriter35.println(charArray84);
        printStream7.print(charArray84);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "de" + "'", str23, "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[]");
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Country();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex4.asin();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray13 = mathException12.getArguments();
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("jpn", objArray13, throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, "\u4e2d\u6587", objArray13);
        java.lang.Throwable[] throwableArray17 = functionEvaluationException16.getSuppressed();
        boolean boolean18 = complex7.equals((java.lang.Object) throwableArray17);
        org.apache.commons.math.complex.Complex complex19 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex21.negate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.exp();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex26.divide(complex28);
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex23.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.exp();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex38.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex44.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex41.multiply(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex41.asin();
        org.apache.commons.math.complex.Complex complex50 = complex35.multiply(complex49);
        boolean boolean51 = complex50.isNaN();
        org.apache.commons.math.complex.Complex complex52 = complex28.add(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex19.divide(complex28);
        org.apache.commons.math.complex.Complex complex55 = complex28.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.5403023058681398d + "'", double30 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        java.lang.Throwable[] throwableArray2 = functionEvaluationException1.getSuppressed();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException1);
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.inversetransform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex8, complex11 };
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray13, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.transform(complexArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ja");
        printStream18.print(100.0f);
        boolean boolean21 = printStream18.checkError();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getCountry();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale22.getDisplayCountry(locale24);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        java.io.PrintStream printStream36 = printStream18.printf(locale24, "", (java.lang.Object[]) throwableArray35);
        printStream36.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer39.inversetransform(doubleArray41);
        java.io.PrintStream printStream43 = printStream36.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        java.io.PrintStream printStream53 = printStream43.printf("japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer7.transform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex56, complex59 };
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer65.transform(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer55.transform2(complexArray74);
        double[] doubleArray78 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer55.transform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer7.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer81.inversetransform(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer7.inversetransform(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.transform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray92 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer87.inversetransform(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(doubleArray92);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        double[] doubleArray97 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray92, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-10.0, -32.0, 1.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-10.0, -32.0, 1.0, -52.0]");
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex7 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex8 = complex7.negate();
        org.apache.commons.math.complex.Complex complex9 = complex4.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "de");
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str11 = locale7.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder12 = builder6.setLocale(locale8);
        java.lang.String str13 = locale0.getDisplayLanguage(locale8);
        java.lang.String str14 = locale0.toLanguageTag();
        java.util.Locale locale18 = new java.util.Locale("org.apache.commons.math.MathException: org.apache.commons.math.MathException", "CAN", "\u4e2d\u6587");
        java.lang.String str19 = locale0.getDisplayLanguage(locale18);
        java.lang.String str20 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str11, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja" + "'", str14, "ja");
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese" + "'", str19, "Japanese");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, false);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray21, (java.lang.Throwable) mathException31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, Double.NaN);
        java.io.PrintStream printStream35 = printStream6.printf(locale10, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray34);
        java.io.PrintWriter printWriter36 = printWriter3.format("ja", (java.lang.Object[]) complexArray34);
        printWriter36.println((double) '4');
        printWriter36.print((float) (byte) 100);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        java.io.PrintWriter printWriter43 = printWriter41.append((java.lang.CharSequence) "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        printStream1.println((java.lang.Object) "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        printStream1.print((float) (byte) 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-0.0d));
        double double4 = functionEvaluationException3.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException(0.6156264703860141d, "org.apache.commons.math.functionevaluationexception: de", (java.lang.Throwable) functionEvaluationException3);
        double double6 = functionEvaluationException5.getArgument();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.0d) + "'", double4 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.6156264703860141d + "'", double6 == 0.6156264703860141d);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        double double7 = complex6.abs();
        org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex9);
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("fr");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale6 = new java.util.Locale("ja", "");
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale3.getDisplayLanguage(locale8);
        printWriter1.print((java.lang.Object) locale8);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.lang.String str12 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex13.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex6.add(complex16);
        boolean boolean19 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex28.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex25.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex18.divide(complex25);
        org.apache.commons.math.complex.Complex complex34 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex(0.0d, (double) 10);
        org.apache.commons.math.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.exp();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex42.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.exp();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex48.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex45.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex54 = complex53.acos();
        org.apache.commons.math.complex.Complex complex55 = complex52.add(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex53.atan();
        org.apache.commons.math.complex.Complex complex57 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex57.asin();
        org.apache.commons.math.complex.Complex complex59 = complex39.divide(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex34.multiply(complex39);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        boolean boolean38 = printStream37.checkError();
        java.io.PrintStream printStream40 = printStream37.append('u');
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream43 = printStream40.format("zh_TW", (java.lang.Object[]) strArray42);
        java.io.PrintStream printStream45 = printStream40.append((java.lang.CharSequence) "ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA");
        printStream40.print((float) (short) 100);
        boolean boolean48 = printStream40.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("TW");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, false);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray21, (java.lang.Throwable) mathException31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, Double.NaN);
        java.io.PrintStream printStream35 = printStream6.printf(locale10, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray34);
        java.io.PrintWriter printWriter36 = printWriter3.format("ja", (java.lang.Object[]) complexArray34);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.io.PrintStream printStream41 = new java.io.PrintStream("ja");
        printStream41.print(100.0f);
        boolean boolean44 = printStream41.checkError();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder45.setExtension('a', "de");
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getVariant();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale49.getDisplayLanguage(locale50);
        java.util.Locale.Builder builder54 = builder48.setLocale(locale50);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException(throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException72);
        java.lang.Throwable[] throwableArray74 = functionEvaluationException72.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray65, (java.lang.Throwable) mathException75);
        java.io.PrintStream printStream77 = printStream41.printf(locale50, "ja", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("de", (java.lang.Object[]) complexArray65);
        java.io.PrintWriter printWriter79 = printWriter36.format(locale37, "ja", (java.lang.Object[]) complexArray65);
        printWriter1.println((java.lang.Object) printWriter36);
        printWriter1.close();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str53, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println(10);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ja");
        printStream8.print(100.0f);
        boolean boolean11 = printStream8.checkError();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "de");
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = locale16.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder21 = builder15.setLocale(locale17);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException(throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Throwable[] throwableArray41 = functionEvaluationException39.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray32, (java.lang.Throwable) mathException42);
        java.io.PrintStream printStream44 = printStream8.printf(locale17, "ja", (java.lang.Object[]) complexArray32);
        java.io.PrintStream printStream45 = printStream1.format("\u65e5\u6587", (java.lang.Object[]) complexArray32);
        printStream45.write((int) (short) 0);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream45, true);
        printWriter49.print("org.apache.commons.math.MathException: CHN");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str20, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print(true);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream7.println(0L);
        printStream7.println();
        printStream7.print(true);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ja");
        printStream14.print(100.0f);
        boolean boolean17 = printStream14.checkError();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "de");
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = locale22.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder27 = builder21.setLocale(locale23);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException(throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException45);
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray38, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream14.printf(locale23, "ja", (java.lang.Object[]) complexArray38);
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream14, true);
        java.io.PrintStream printStream54 = new java.io.PrintStream("ja");
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream54.write(byteArray58);
        printStream52.write(byteArray58);
        printStream7.write(byteArray58);
        printStream7.println("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer65.transform(complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (double) '4');
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (-0.0d));
        java.io.PrintStream printStream79 = printStream7.format("org.apache.commons.math.FunctionEvaluationException: Japanese", (java.lang.Object[]) complexArray74);
        java.lang.CharSequence charSequence80 = null;
        java.io.PrintStream printStream83 = printStream7.append(charSequence80, (int) (short) 0, 0);
        printStream83.println((int) '4');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str26, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream83);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer3.transform2(complexArray22);
        double[] doubleArray26 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer3.transform2(doubleArray26);
        java.io.PrintStream printStream28 = printStream1.printf("CN", (java.lang.Object[]) complexArray27);
        printStream1.print((float) 0L);
        java.io.PrintStream printStream32 = printStream1.append('4');
        boolean boolean33 = printStream32.checkError();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        printWriter35.print(true);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex3.add(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex3);
        org.apache.commons.math.complex.Complex complex13 = complex2.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        double[] doubleArray23 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("fr");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex[] complexArray44 = new org.apache.commons.math.complex.Complex[] { complex39, complex42 };
        org.apache.commons.math.complex.Complex[] complexArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.transform(complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer28.transform2(complexArray47);
        double[] doubleArray51 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer28.transform2(doubleArray51);
        java.io.PrintStream printStream53 = printStream26.printf("CN", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.transform2(complexArray52);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform(univariateRealFunction55, (double) 1L, 0.9804769626623427d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray54);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        double[] doubleArray23 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer0.transform2(doubleArray23);
        double[] doubleArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray23, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray26);
        double[] doubleArray29 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, Double.POSITIVE_INFINITY);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray29);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-Infinity, -Infinity]");
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayCountry(locale23);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getScript();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getCountry();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = locale33.getDisplayCountry(locale35);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale14, locale16, locale17, locale19, locale20, locale23, locale26, locale27, locale29, locale31, locale32, locale33, locale38, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList42);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.exp();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex49.divide(complex51);
        java.lang.Object[] objArray54 = new java.lang.Object[] { locale44, (short) -1, 'a', complex49, (short) 10 };
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ja", objArray54, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "CN", (java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray66 = functionEvaluationException65.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) throwableArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "de" + "'", str36, "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream7 = printStream1.append('a');
        java.io.PrintStream printStream9 = printStream7.append((java.lang.CharSequence) "fr_JA");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("ja");
        printWriter11.println((float) 10);
        printWriter11.println((int) (byte) 10);
        java.io.PrintWriter printWriter17 = printWriter11.append(' ');
        java.io.PrintWriter printWriter19 = printWriter11.append('x');
        java.io.PrintWriter printWriter21 = printWriter11.append((java.lang.CharSequence) "TWN");
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream26 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException51);
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, Double.NaN);
        java.io.PrintStream printStream55 = printStream26.printf(locale30, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter56 = printWriter23.format("ja", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("ja");
        printWriter58.println((float) 10);
        printWriter58.println((int) (byte) 10);
        printWriter58.print(false);
        java.lang.Object[] objArray66 = null;
        java.io.PrintWriter printWriter67 = printWriter58.printf("de", objArray66);
        char[] charArray68 = new char[] {};
        printWriter58.write(charArray68);
        printWriter56.println(charArray68);
        printWriter11.println(charArray68);
        printStream7.println(charArray68);
        printStream7.flush();
        printStream7.println();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[]");
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream7 = printStream1.append('a');
        java.io.PrintStream printStream9 = printStream7.append((java.lang.CharSequence) "fr_JA");
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream10.print(10);
        printStream10.print(false);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        printStream3.print((long) '4');
        printStream3.print((double) 1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ja");
        printStream12.print(100.0f);
        boolean boolean15 = printStream12.checkError();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale16.getDisplayCountry(locale18);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException(throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException27);
        java.lang.Throwable[] throwableArray29 = functionEvaluationException27.getSuppressed();
        java.io.PrintStream printStream30 = printStream12.printf(locale18, "", (java.lang.Object[]) throwableArray29);
        printStream30.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream30);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 35.0d);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable48);
        double double50 = functionEvaluationException49.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray45, (java.lang.Throwable) functionEvaluationException49);
        java.io.PrintWriter printWriter52 = printWriter32.printf("zho", (java.lang.Object[]) complexArray45);
        java.io.PrintStream printStream53 = printStream3.printf("TWN", (java.lang.Object[]) complexArray45);
        printStream53.print(0);
        printStream53.println();
        printStream53.println("\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        printStream53.println((float) (byte) 100);
        printStream53.print(' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream65 = new java.io.PrintStream((java.io.OutputStream) printStream53, true, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??? (??)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale locale6 = new java.util.Locale("\u30c9\u30a4\u30c4", "org.apache.commons.math.FunctionEvaluationException: fra", "jpn");
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale0.getDisplayScript(locale8);
        java.util.Locale locale14 = locale0.stripExtensions();
        java.lang.String str15 = locale14.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str1, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale6.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "\u30c9\u30a4\u30c4_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA_jpn");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja" + "'", str9, "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)" + "'", str11, "\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)" + "'", str15, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        printWriter1.write((int) (byte) 10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((long) (byte) 0);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\u65e5\u672c\u8a9e\u65e5\u672c)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??? (??)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        printWriter1.println((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray21, (java.lang.Throwable) mathException31);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray21, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 2.745966909874291d);
        java.io.PrintWriter printWriter37 = printWriter1.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray34);
        printWriter37.print(false);
        printWriter37.print((int) '#');
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("taiwan (DEUTSCH)");
        java.io.PrintWriter printWriter3 = printWriter1.append('a');
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        printWriter34.println('4');
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex44 = complex40.multiply(complex41);
        printWriter34.print((java.lang.Object) complex44);
        printWriter34.flush();
        printWriter34.print((double) 'u');
        printWriter34.println(true);
        printWriter34.write((int) (byte) -1);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder3.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder3.setLanguageTag("\u30ab\u30bf\u30ed\u30cb\u30a2\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.transform(complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer12.transform2(complexArray31);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex[] complexArray40 = new org.apache.commons.math.complex.Complex[] { complex35, complex38 };
        org.apache.commons.math.complex.Complex[] complexArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray40, 0.0d);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray42, (java.lang.Throwable) mathException52);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer12.inversetransform(complexArray42);
        java.io.PrintWriter printWriter57 = printWriter10.format("", (java.lang.Object[]) complexArray42);
        printWriter10.close();
        printWriter10.write((int) (byte) 1);
        printWriter10.println((-1.0f));
        printWriter10.print((float) (short) 100);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        java.util.Locale locale1 = new java.util.Locale("\u30c9\u30a4\u30c4\u8a9e");
        java.lang.String str3 = locale1.getExtension('x');
        java.util.Locale locale4 = locale1.stripExtensions();
        java.lang.String str5 = locale4.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str5, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.0d, (double) (byte) 10);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print((java.lang.Object) printWriter53);
        java.io.PrintWriter printWriter56 = printWriter53.append(' ');
        boolean boolean57 = printWriter53.checkError();
        java.io.PrintWriter printWriter59 = printWriter53.append((java.lang.CharSequence) "\uc911\uad6d");
        java.io.PrintWriter printWriter61 = printWriter59.append('#');
        printWriter59.write((int) (short) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        java.lang.Throwable[] throwableArray68 = functionEvaluationException67.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter59.format("org.apache.commons.math.FunctionEvaluationException: jpn", (java.lang.Object[]) throwableArray68);
        java.io.PrintWriter printWriter71 = printWriter59.append((java.lang.CharSequence) "FRAN\347AIS (FRANCE)");
        printWriter71.write("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(printWriter71);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException");
        printWriter1.print((float) (byte) 0);
        java.util.Locale locale4 = null;
        java.lang.Object[] objArray6 = null;
        java.io.PrintWriter printWriter7 = printWriter1.format(locale4, "Deutsch", objArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex[] complexArray15 = new org.apache.commons.math.complex.Complex[] { complex10, complex13 };
        org.apache.commons.math.complex.Complex[] complexArray17 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray15, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.inversetransform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer20.transform(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer19.inversetransform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer39.transform2(complexArray58);
        double[] doubleArray62 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer39.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer19.transform2(doubleArray62);
        double[] doubleArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray62, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer9.inversetransform(doubleArray66);
        java.io.PrintWriter printWriter68 = printWriter7.printf("DEU", (java.lang.Object[]) complexArray67);
        printWriter68.write((int) (byte) -1);
        printWriter68.println();
        printWriter68.write((-1));
        printWriter68.println(0.4986113866728327d);
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printWriter68);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream1.print((-1.0f));
        printStream1.write(0);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer11.inversetransform(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        boolean boolean19 = printStream16.checkError();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('a', "de");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getVariant();
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = locale24.getDisplayLanguage(locale25);
        java.util.Locale.Builder builder29 = builder23.setLocale(locale25);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex33, complex36 };
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 0.0d);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException47);
        java.lang.Throwable[] throwableArray49 = functionEvaluationException47.getSuppressed();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray40, (java.lang.Throwable) mathException50);
        java.io.PrintStream printStream52 = printStream16.printf(locale25, "ja", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer11.inversetransform(complexArray40);
        java.io.PrintStream printStream54 = printStream9.format("zh_TW", (java.lang.Object[]) complexArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream54, true, "\u30c9\u30a4\u30c4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str28, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable2);
        double double4 = functionEvaluationException3.getArgument();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex[] complexArray22 = new org.apache.commons.math.complex.Complex[] { complex17, complex20 };
        org.apache.commons.math.complex.Complex[] complexArray24 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray22, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform(complexArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer6.transform2(complexArray25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex[] complexArray34 = new org.apache.commons.math.complex.Complex[] { complex29, complex32 };
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray34, 0.0d);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray36, (java.lang.Throwable) mathException46);
        org.apache.commons.math.complex.Complex[] complexArray49 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer6.inversetransform(complexArray36);
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, (double) (short) -1);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray52);
        functionEvaluationException3.addSuppressed((java.lang.Throwable) mathException53);
        double double55 = functionEvaluationException3.getArgument();
        java.lang.Object[] objArray56 = functionEvaluationException3.getArguments();
        java.lang.String str57 = functionEvaluationException3.getPattern();
        java.lang.String str58 = functionEvaluationException3.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str58, "org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("twn");
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer11.transform(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer1.transform2(complexArray20);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex24, complex27 };
        org.apache.commons.math.complex.Complex[] complexArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 0.0d);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException(throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException38);
        java.lang.Throwable[] throwableArray40 = functionEvaluationException38.getSuppressed();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray31, (java.lang.Throwable) mathException41);
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray31, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer1.inversetransform(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer46.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer1.transform(doubleArray48);
        double[] doubleArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.inversetransform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex[] complexArray73 = new org.apache.commons.math.complex.Complex[] { complex68, complex71 };
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray73, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.transform(complexArray75);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer57.transform2(complexArray76);
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException(throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException83);
        java.lang.String str85 = functionEvaluationException83.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray77, (java.lang.Throwable) functionEvaluationException83);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(complexArray77);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-10.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-10.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Italian");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italian");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        java.util.Locale locale34 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.inversetransform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer36.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex[] complexArray62 = new org.apache.commons.math.complex.Complex[] { complex57, complex60 };
        org.apache.commons.math.complex.Complex[] complexArray64 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.transform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.inversetransform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer56.transform(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer36.transform2(doubleArray75);
        java.io.PrintWriter printWriter77 = printWriter33.format(locale34, "org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray76);
        java.io.PrintWriter printWriter79 = printWriter77.append((java.lang.CharSequence) "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        printWriter79.println();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex[] complexArray26 = new org.apache.commons.math.complex.Complex[] { complex21, complex24 };
        org.apache.commons.math.complex.Complex[] complexArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, 0.0d);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException(throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException35);
        java.lang.Throwable[] throwableArray37 = functionEvaluationException35.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray28, (java.lang.Throwable) mathException38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer1.transform(complexArray28);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 1.0253864209002483d);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, (double) (byte) -1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex11.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex8.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex8.asin();
        org.apache.commons.math.complex.Complex complex17 = complex2.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex2.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex25.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex31.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        org.apache.commons.math.complex.Complex complex38 = complex35.add(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex21.pow(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex2.pow(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex38.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        boolean boolean45 = complex44.isInfinite();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.exp();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex48.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex52.exp();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex54.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex51.multiply(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex60 = complex59.acos();
        org.apache.commons.math.complex.Complex complex61 = complex58.add(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex44.pow(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex38.pow(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex63.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        double double2 = complex1.abs();
        org.apache.commons.math.complex.Complex complex3 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.apache.commons.math.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math.complex.Complex complex7 = complex5.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer0.inversetransform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer22.inversetransform(doubleArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform(complexArray25);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform(univariateRealFunction28, 2.013372198105276d, (double) 100L, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.lang.Object obj7 = null;
        printStream6.print(obj7);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream6);
        printStream11.write((int) (byte) -1);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex[] complexArray9 = new org.apache.commons.math.complex.Complex[] { complex4, complex7 };
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform(complexArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.inversetransform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer3.transform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer2.inversetransform2(doubleArray18);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex[] complexArray36 = new org.apache.commons.math.complex.Complex[] { complex31, complex34 };
        org.apache.commons.math.complex.Complex[] complexArray38 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray36, 0.0d);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException(throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException45);
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray38, (java.lang.Throwable) mathException48);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, Double.NaN);
        java.io.PrintStream printStream52 = printStream23.printf(locale27, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer2.transform(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex56, complex59 };
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.inversetransform(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer55.transform(doubleArray70);
        double[] doubleArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray70, (double) (short) 0);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer2.transform(doubleArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(0.7671576417562594d, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray76);
        java.lang.String str78 = functionEvaluationException77.toString();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str78, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        char[] charArray9 = new char[] { 'u', 'a', '4', '#', 'a' };
        printWriter1.write(charArray9);
        printWriter1.print((int) (byte) 1);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer14.inversetransform(doubleArray16);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream22 = new java.io.PrintStream("ja");
        printStream22.print(100.0f);
        boolean boolean25 = printStream22.checkError();
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray39 = functionEvaluationException37.getSuppressed();
        java.io.PrintStream printStream40 = printStream22.printf(locale28, "", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter19.printf("fra", (java.lang.Object[]) throwableArray39);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex43, complex46 };
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, 0.0d);
        java.io.PrintWriter printWriter51 = printWriter41.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex[] complexArray59 = new org.apache.commons.math.complex.Complex[] { complex54, complex57 };
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray59, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.transform(complexArray61);
        java.io.PrintWriter printWriter63 = printWriter41.format("fra", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer14.transform(complexArray62);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex67, complex70 };
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, 0.0d);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException(throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException81);
        java.lang.Throwable[] throwableArray83 = functionEvaluationException81.getSuppressed();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray74, (java.lang.Throwable) mathException84);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer14.transform(complexArray87);
        java.io.PrintWriter printWriter89 = printWriter1.printf("English (Canada)", (java.lang.Object[]) complexArray88);
        printWriter1.write(0);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "ua4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "ua4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[u, a, 4, #, a]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printWriter89);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.inversetransform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex8, complex11 };
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray13, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.transform(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.inversetransform(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer7.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer25.inversetransform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.inversetransform(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform(complexArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream34 = printStream32.append((java.lang.CharSequence) "");
        printStream34.print((int) (short) 100);
        printStream34.print((long) '4');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer39.transform2(complexArray58);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex62, complex65 };
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 0.0d);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException(throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException76);
        java.lang.Throwable[] throwableArray78 = functionEvaluationException76.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray69, (java.lang.Throwable) mathException79);
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer39.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 35.0d);
        printStream34.println((java.lang.Object) complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(complexArray85);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, 1.557407724654902d, 0.7071067811865475d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(Double.NaN, (double) '#');
        org.apache.commons.math.complex.Complex complex5 = complex0.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.exp();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex13.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex6.add(complex16);
        boolean boolean19 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.exp();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex22.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex28.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex25.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex18.divide(complex25);
        org.apache.commons.math.complex.Complex complex34 = complex18.tan();
        org.apache.commons.math.complex.Complex complex35 = complex34.cos();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable[] throwableArray28 = functionEvaluationException26.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray19, (java.lang.Throwable) mathException29);
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, Double.NaN);
        java.io.PrintStream printStream33 = printStream4.printf(locale8, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.format("ja", (java.lang.Object[]) complexArray32);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.io.PrintStream printStream39 = new java.io.PrintStream("ja");
        printStream39.print(100.0f);
        boolean boolean42 = printStream39.checkError();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setExtension('a', "de");
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getVariant();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale47.getDisplayLanguage(locale48);
        java.util.Locale.Builder builder52 = builder46.setLocale(locale48);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.getImaginary();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex[] complexArray61 = new org.apache.commons.math.complex.Complex[] { complex56, complex59 };
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray61, 0.0d);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray63, (java.lang.Throwable) mathException73);
        java.io.PrintStream printStream75 = printStream39.printf(locale48, "ja", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("de", (java.lang.Object[]) complexArray63);
        java.io.PrintWriter printWriter77 = printWriter34.format(locale35, "ja", (java.lang.Object[]) complexArray63);
        printWriter34.print((int) (short) 10);
        printWriter34.flush();
        printWriter34.print('4');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str51, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("de");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Throwable[] throwableArray27 = functionEvaluationException25.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray18, (java.lang.Throwable) mathException28);
        org.apache.commons.math.complex.Complex[] complexArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, Double.NaN);
        java.io.PrintStream printStream32 = printStream3.printf(locale7, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex[] complexArray42 = new org.apache.commons.math.complex.Complex[] { complex37, complex40 };
        org.apache.commons.math.complex.Complex[] complexArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, 0.0d);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException(throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException51);
        java.lang.Throwable[] throwableArray53 = functionEvaluationException51.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray44, (java.lang.Throwable) mathException54);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray44, Double.NaN);
        java.io.PrintStream printStream58 = printStream32.printf(locale33, "hi!", (java.lang.Object[]) complexArray57);
        java.util.Locale locale61 = new java.util.Locale("ko", "");
        java.lang.String str62 = locale33.getDisplayCountry(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.lang.String str65 = locale63.getISO3Country();
        java.lang.String str67 = locale63.getExtension('x');
        boolean boolean68 = locale63.hasExtensions();
        java.lang.String str69 = locale33.getDisplayLanguage(locale63);
        java.util.Set<java.lang.String> strSet70 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet70);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d" + "'", str62, "\uc911\uad6d");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "CAN" + "'", str65, "CAN");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese" + "'", str69, "Chinese");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale locale73 = builder72.build();
        java.util.Locale locale76 = new java.util.Locale("ja", "");
        java.lang.String str77 = locale73.getDisplayLanguage(locale76);
        java.lang.String str78 = locale71.getDisplayCountry(locale76);
        java.lang.String str79 = locale57.getDisplayScript(locale71);
        java.lang.String str80 = locale57.getDisplayVariant();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e\u65e5\u672c)_CA_CN");
        java.lang.String str83 = locale57.getDisplayCountry(locale82);
        java.lang.Object obj84 = locale57.clone();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str78, "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "ja");
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.inversetransform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer18.inversetransform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.inversetransform(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer24.transform(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer23.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.inversetransform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.transform(doubleArray59);
        double[] doubleArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform2(doubleArray63);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer0.transform(univariateRealFunction65, (double) 1, 0.5406558493518019d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0, 0.5406558493518019]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(complexArray64);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.inversetransform(doubleArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        printStream10.print(100.0f);
        printStream10.println(10);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        printStream17.print(100.0f);
        boolean boolean20 = printStream17.checkError();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "de");
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getVariant();
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale25.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder30 = builder24.setLocale(locale26);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray50);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray41, (java.lang.Throwable) mathException51);
        java.io.PrintStream printStream53 = printStream17.printf(locale26, "ja", (java.lang.Object[]) complexArray41);
        java.io.PrintStream printStream54 = printStream10.format("\u65e5\u6587", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, (double) 1L);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer2.transform(complexArray56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "cn", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str29, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray60);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(1.8590490774438655d);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh-TW", (double) 1.0f);
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        printStream22.close();
        printStream22.println((float) (byte) 1);
        printStream22.print(0.0d);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("fra", strMap29);
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        double double34 = languageRange33.getWeight();
        java.util.Locale.LanguageRange languageRange37 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] { languageRange33, languageRange37 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str46 = java.util.Locale.lookupTag(languageRangeList42, (java.util.Collection<java.lang.String>) strSet45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet45);
        printStream22.println((java.lang.Object) strList47);
        printStream22.println();
        java.io.PrintStream printStream50 = new java.io.PrintStream((java.io.OutputStream) printStream22);
        printStream50.println((long) '#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { 0.5403023058681398d, 0.5403023058681398d, 1.0050120396650741d, 117.0d };
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer54.transform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray62);
        java.io.PrintStream printStream64 = printStream50.printf("Japan", (java.lang.Object[]) complexArray62);
        boolean boolean65 = languageRange2.equals((java.lang.Object) printStream50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.5403023058681398, 0.5403023058681398, 1.0050120396650741, 117.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException(throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException5);
        java.lang.Throwable[] throwableArray7 = functionEvaluationException5.getSuppressed();
        double double8 = functionEvaluationException5.getArgument();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer11.inversetransform(doubleArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray14);
        functionEvaluationException5.addSuppressed((java.lang.Throwable) functionEvaluationException15);
        java.lang.String str17 = functionEvaluationException15.getPattern();
        java.io.PrintStream printStream22 = new java.io.PrintStream("ja");
        printStream22.print(100.0f);
        printStream22.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream28 = printStream22.append('a');
        java.io.PrintStream printStream30 = new java.io.PrintStream("ja");
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale35.getDisplayName();
        java.lang.String str38 = locale31.getDisplayLanguage(locale35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer42.inversetransform(doubleArray44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray45);
        java.io.PrintStream printStream47 = printStream30.printf(locale35, "CN", (java.lang.Object[]) complexArray45);
        java.util.Set<java.lang.String> strSet48 = locale35.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream52 = new java.io.PrintStream("ja");
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale53.getDisplayLanguage(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer64.inversetransform(doubleArray66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray67);
        java.io.PrintStream printStream69 = printStream52.printf(locale57, "CN", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray67);
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.io.PrintStream printStream72 = printStream28.printf(locale35, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("German", (java.lang.Object[]) throwableArray71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(1.2828485208836329d, "evaluation failed for argument = {0}", (java.lang.Throwable) mathException73);
        functionEvaluationException15.addSuppressed((java.lang.Throwable) functionEvaluationException74);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ja" + "'", str17, "ja");
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str34, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str37, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str38, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str56, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str59, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str60, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        boolean boolean38 = printStream37.checkError();
        java.io.PrintStream printStream40 = printStream37.append('u');
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream43 = printStream40.format("zh_TW", (java.lang.Object[]) strArray42);
        printStream40.println('u');
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream50 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream50, false);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        org.apache.commons.math.complex.Complex[] complexArray63 = new org.apache.commons.math.complex.Complex[] { complex58, complex61 };
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray63, 0.0d);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException(throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException72);
        java.lang.Throwable[] throwableArray74 = functionEvaluationException72.getSuppressed();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray65, (java.lang.Throwable) mathException75);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, Double.NaN);
        java.io.PrintStream printStream79 = printStream50.printf(locale54, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray78);
        java.io.PrintWriter printWriter80 = printWriter47.format("ja", (java.lang.Object[]) complexArray78);
        printWriter80.println((double) '4');
        printWriter80.print((float) (byte) 100);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.Writer) printWriter80);
        printStream40.println((java.lang.Object) printWriter85);
        java.lang.CharSequence charSequence87 = null;
        java.io.PrintWriter printWriter88 = printWriter85.append(charSequence87);
        printWriter85.print("English (United States)");
        printWriter85.println((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u65e5\u6587");
        java.lang.String str2 = locale1.getScript();
        java.util.Locale.setDefault(locale1);
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((-0.3597510667162246d), "de", (java.lang.Throwable) mathException7);
        double double9 = functionEvaluationException8.getArgument();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.3597510667162246d) + "'", double9 == (-0.3597510667162246d));
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: ");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder2.setExtension('a', "de");
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = locale7.getCountry();
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale7.getDisplayScript(locale12);
        java.util.Locale.Builder builder14 = builder6.setLocale(locale7);
        java.lang.String str15 = locale7.getISO3Country();
        java.lang.String str16 = locale1.getDisplayVariant(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale7.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: ");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str10, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 0, (double) (byte) 10);
        boolean boolean3 = complex2.isInfinite();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        boolean boolean38 = printStream37.checkError();
        java.io.PrintStream printStream40 = printStream37.append('u');
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream43 = printStream40.format("zh_TW", (java.lang.Object[]) strArray42);
        java.io.PrintStream printStream45 = printStream40.append((java.lang.CharSequence) "ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA");
        printStream40.print((float) (short) 100);
        printStream40.print((float) (byte) 1);
        java.io.PrintStream printStream51 = printStream40.append('a');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream51);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        java.util.Locale locale3 = new java.util.Locale("fr", "\u30c9\u30a4\u30c4\u8a9e", "CN");
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale3.getDisplayLanguage();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30c9\u30a4\u30c4\u8a9e_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str5, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale15.getDisplayCountry(locale17);
        java.lang.String str19 = locale12.getDisplayCountry(locale17);
        java.util.Locale.Builder builder20 = builder9.setLocale(locale12);
        java.util.Locale.Builder builder22 = builder9.setRegion("fr");
        java.util.Locale.Builder builder23 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder9.setLanguageTag("Evaluation failed for argument = {0}");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Evaluation failed for argument = {0} [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        java.util.Locale locale1 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale3 = new java.util.Locale("Taiwan");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        boolean boolean5 = locale3.hasExtensions();
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale13 = new java.util.Locale("ja", "");
        java.lang.String str14 = locale10.getDisplayLanguage(locale13);
        java.lang.String str15 = locale7.getDisplayVariant(locale10);
        java.lang.String str16 = locale10.getISO3Language();
        java.lang.String str17 = locale10.getDisplayVariant();
        java.lang.String str18 = locale10.getDisplayVariant();
        java.lang.String str19 = locale10.getScript();
        java.lang.String str20 = locale3.getDisplayLanguage(locale10);
        java.lang.String str21 = locale1.getDisplayVariant(locale10);
        boolean boolean22 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (china)");
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "taiwan" + "'", str20, "taiwan");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale4.getLanguage();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.lang.String str12 = locale11.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ja");
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream7.write(byteArray11);
        printStream3.write(byteArray11);
        java.io.PrintStream printStream15 = printStream3.append((java.lang.CharSequence) "deu");
        printStream3.print(0);
        printStream3.print(' ');
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("\u65e5\u672c\u8a9e");
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.util.Set<java.lang.Character> charSet25 = locale20.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale20.getDisplayScript(locale26);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream36 = new java.io.PrintStream("ja");
        printStream36.print(100.0f);
        boolean boolean39 = printStream36.checkError();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getCountry();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayCountry(locale42);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException(throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException51);
        java.lang.Throwable[] throwableArray53 = functionEvaluationException51.getSuppressed();
        java.io.PrintStream printStream54 = printStream36.printf(locale42, "", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter55 = printWriter33.printf("fra", (java.lang.Object[]) throwableArray53);
        printWriter55.println((int) (short) -1);
        printWriter55.write("\u65e5\u672c\u8a9e\u65e5\u672c)_CA_CN");
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter55, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex64, complex67 };
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 35.0d);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer63.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter55.printf("\u30c9\u30a4\u30c4 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FRA,jpn)", (java.lang.Object[]) complexArray74);
        java.io.PrintStream printStream76 = printStream3.printf(locale26, "CHN", (java.lang.Object[]) complexArray74);
        java.lang.String str77 = locale26.getLanguage();
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese" + "'", str24, "Japanese");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "deu" + "'", str29, "deu");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "de" + "'", str77, "de");
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        java.io.PrintWriter printWriter7 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fra", 0, (int) (short) 0);
        java.util.Locale locale9 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException");
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 35.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)", (java.lang.Object[]) complexArray18);
        java.io.PrintWriter printWriter24 = printWriter7.printf(locale9, "CA", (java.lang.Object[]) complexArray18);
        java.io.PrintWriter printWriter26 = printWriter24.append('a');
        java.io.PrintWriter printWriter28 = printWriter26.append((java.lang.CharSequence) "org.apache.commons.math.MathException");
        printWriter26.println(0L);
        printWriter26.print(100);
        printWriter26.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter37 = printWriter26.append((java.lang.CharSequence) "kanada", (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -53");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertEquals(locale9.toString(), "org.apache.commons.math.functionevaluationexception");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream14 = printStream1.append('4');
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        printStream16.print(true);
        java.io.PrintStream printStream22 = printStream16.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream24 = new java.io.PrintStream("ja");
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream24.write(byteArray28);
        printStream22.write(byteArray28);
        printStream14.write(byteArray28, (int) (byte) 100, (int) (byte) 10);
        printStream14.print('#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream39 = printStream14.append((java.lang.CharSequence) "zh_tw", (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 0, -1]");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        boolean boolean13 = locale10.hasExtensions();
        java.util.Locale.Builder builder14 = builder3.setLocale(locale10);
        java.util.Locale.Builder builder17 = builder3.setExtension('u', "Japan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setUnicodeLocaleKeyword("fra", "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getLanguage();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayCountry(locale40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale19, locale21, locale22, locale24, locale25, locale28, locale31, locale32, locale34, locale36, locale37, locale38, locale43, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        printStream1.print((java.lang.Object) languageRangeList8);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex[] complexArray66 = new org.apache.commons.math.complex.Complex[] { complex61, complex64 };
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.transform(complexArray68);
        java.io.PrintStream printStream70 = printStream1.printf(locale57, "de", (java.lang.Object[]) complexArray68);
        java.util.Set<java.lang.String> strSet71 = locale57.getUnicodeLocaleAttributes();
        java.util.Locale locale72 = locale57.stripExtensions();
        java.lang.String str73 = locale72.getVariant();
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("ja");
        printWriter5.println((float) 10);
        printWriter5.println((int) (byte) 10);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream13 = new java.io.PrintStream("ja");
        printStream13.print(100.0f);
        boolean boolean16 = printStream13.checkError();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayCountry(locale19);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        java.io.PrintStream printStream31 = printStream13.printf(locale19, "", (java.lang.Object[]) throwableArray30);
        printStream31.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer34.inversetransform(doubleArray36);
        java.io.PrintStream printStream38 = printStream31.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray37);
        java.io.PrintWriter printWriter39 = printWriter5.format(locale10, "ja", (java.lang.Object[]) complexArray37);
        java.util.Locale locale40 = locale10.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.toLanguageTag();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale10.getDisplayCountry(locale41);
        java.lang.String str45 = locale0.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet46 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale10.getScript();
        java.lang.String str48 = locale10.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u6587" + "'", str45, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        printStream1.print((-1.0f));
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print("");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex[] complexArray24 = new org.apache.commons.math.complex.Complex[] { complex19, complex22 };
        org.apache.commons.math.complex.Complex[] complexArray26 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray24, 0.0d);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Throwable[] throwableArray35 = functionEvaluationException33.getSuppressed();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray26, (java.lang.Throwable) mathException36);
        org.apache.commons.math.complex.Complex[] complexArray39 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray26, Double.NaN);
        java.io.PrintStream printStream40 = printStream11.printf(locale15, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException(throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException59);
        java.lang.Throwable[] throwableArray61 = functionEvaluationException59.getSuppressed();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray52, (java.lang.Throwable) mathException62);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, Double.NaN);
        java.io.PrintStream printStream66 = printStream40.printf(locale41, "hi!", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer70.inversetransform(doubleArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream75 = printStream1.format(locale41, "", (java.lang.Object[]) complexArray73);
        java.lang.String str76 = locale41.getISO3Country();
        java.lang.String str77 = locale41.getScript();
        java.lang.String str78 = locale41.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CHN" + "'", str76, "CHN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str78, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex[] complexArray10 = new org.apache.commons.math.complex.Complex[] { complex5, complex8 };
        org.apache.commons.math.complex.Complex[] complexArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray10, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer4.transform(complexArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.inversetransform(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer4.transform(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer3.inversetransform2(doubleArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex[] complexArray29 = new org.apache.commons.math.complex.Complex[] { complex24, complex27 };
        org.apache.commons.math.complex.Complex[] complexArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray29, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.transform(complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex[] complexArray39 = new org.apache.commons.math.complex.Complex[] { complex34, complex37 };
        org.apache.commons.math.complex.Complex[] complexArray41 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.transform(complexArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer23.transform2(complexArray42);
        double[] doubleArray46 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer23.transform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer3.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        org.apache.commons.math.complex.Complex[] complexArray65 = new org.apache.commons.math.complex.Complex[] { complex60, complex63 };
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.transform(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer49.transform2(complexArray68);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        double double74 = complex72.getImaginary();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex[] complexArray77 = new org.apache.commons.math.complex.Complex[] { complex72, complex75 };
        org.apache.commons.math.complex.Complex[] complexArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray77, 0.0d);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException(throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException86);
        java.lang.Throwable[] throwableArray88 = functionEvaluationException86.getSuppressed();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray79, (java.lang.Throwable) mathException89);
        org.apache.commons.math.complex.Complex[] complexArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer49.inversetransform(complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer3.inversetransform2(complexArray79);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray97 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, (-1.0d));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "France", (java.lang.Object[]) complexArray97);
        java.lang.Throwable[] throwableArray99 = functionEvaluationException98.getSuppressed();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray97);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException", "org.apache.commons.math.FunctionEvaluationException: fra");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: fra");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex3.add(complex8);
        org.apache.commons.math.complex.Complex complex12 = complex2.add(complex3);
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex17.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex14.multiply(complex20);
        boolean boolean22 = complex14.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JP" + "'", str2, "JP");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str3, "\u65e5\u672c\u8a9e\u65e5\u672c)");
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 0.0f, (double) (-1L), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.toLanguageTag();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale0.getDisplayName(locale2);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = locale0.getDisplayScript(locale6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ja");
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale11.getDisplayLanguage();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayName();
        java.lang.String str18 = locale11.getDisplayLanguage(locale15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer22.inversetransform(doubleArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream27 = printStream10.printf(locale15, "CN", (java.lang.Object[]) complexArray25);
        java.lang.String str28 = locale0.getDisplayName(locale15);
        java.lang.String str29 = locale0.getDisplayLanguage();
        java.lang.String str30 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet31 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str28, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str29, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.inversetransform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex[] complexArray13 = new org.apache.commons.math.complex.Complex[] { complex8, complex11 };
        org.apache.commons.math.complex.Complex[] complexArray15 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray13, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.transform(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.inversetransform(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer7.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer25.inversetransform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer7.inversetransform(complexArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer0.inversetransform(complexArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream34 = printStream32.append((java.lang.CharSequence) "");
        printStream34.print((int) (short) 100);
        printStream34.print((long) '4');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex[] complexArray45 = new org.apache.commons.math.complex.Complex[] { complex40, complex43 };
        org.apache.commons.math.complex.Complex[] complexArray47 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray45, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex[] complexArray55 = new org.apache.commons.math.complex.Complex[] { complex50, complex53 };
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer39.transform2(complexArray58);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex[] complexArray67 = new org.apache.commons.math.complex.Complex[] { complex62, complex65 };
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, 0.0d);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException(throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException76);
        java.lang.Throwable[] throwableArray78 = functionEvaluationException76.getSuppressed();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray69, (java.lang.Throwable) mathException79);
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer39.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 35.0d);
        printStream34.println((java.lang.Object) complexArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform2(complexArray85);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform2(univariateRealFunction88, 3.425518820814759d, 0.5406558493518019d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.425518820814759, 0.5406558493518019]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex8);
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.negate();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ja");
        printStream16.print(100.0f);
        boolean boolean19 = printStream16.checkError();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('a', "de");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getVariant();
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = locale24.getDisplayLanguage(locale25);
        java.util.Locale.Builder builder29 = builder23.setLocale(locale25);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex33, complex36 };
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 0.0d);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException47);
        java.lang.Throwable[] throwableArray49 = functionEvaluationException47.getSuppressed();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray40, (java.lang.Throwable) mathException50);
        java.io.PrintStream printStream52 = printStream16.printf(locale25, "ja", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream54 = printStream52.append((java.lang.CharSequence) "fra");
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex56.negate();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex59.exp();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex61.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex67 = complex65.exp();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex67.divide(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex64.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex64.tanh();
        boolean boolean73 = complex58.equals((java.lang.Object) complex64);
        printStream52.print((java.lang.Object) complex64);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex77.atan();
        org.apache.commons.math.complex.Complex complex79 = complex77.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex64.subtract(complex80);
        org.apache.commons.math.complex.Complex complex83 = complex13.pow(complex64);
        org.apache.commons.math.complex.Complex complex84 = complex13.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5403023058681398d + "'", double10 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.5403023058681398d) + "'", double12 == (-0.5403023058681398d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str28, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((float) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter28.print((int) 'x');
        java.io.PrintWriter printWriter32 = printWriter28.append((java.lang.CharSequence) "zh");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("Taiwan");
        printWriter28.print((java.lang.Object) mathException34);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter28, false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fr");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "de");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getVariant();
        java.lang.String str11 = locale9.getVariant();
        java.lang.String str12 = locale8.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder13 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder14 = builder7.clearExtensions();
        java.util.Locale.Builder builder16 = builder7.setRegion("de");
        java.io.PrintStream printStream18 = new java.io.PrintStream("fr");
        printStream18.flush();
        printStream18.println((float) 100);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex[] complexArray32 = new org.apache.commons.math.complex.Complex[] { complex27, complex30 };
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray32, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.inversetransform(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer26.transform(doubleArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) complexArray43);
        java.io.PrintStream printStream45 = printStream18.printf(locale22, "\u30c9\u30a4\u30c4", (java.lang.Object[]) complexArray43);
        java.util.Locale.Builder builder46 = builder16.setLocale(locale22);
        java.util.Locale locale47 = builder16.build();
        java.lang.String str48 = locale1.getDisplayCountry(locale47);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder49.setExtension('a', "de");
        java.util.Locale.Builder builder53 = builder49.clearExtensions();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale.Builder builder55 = builder53.clear();
        boolean boolean56 = locale47.equals((java.lang.Object) builder53);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str12, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale3.getDisplayCountry(locale5);
        java.lang.String str7 = locale0.getDisplayCountry(locale5);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleKeys();
        java.lang.String str9 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja" + "'", str9, "ja");
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.exp();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex12.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex9.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex16.add(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex2.pow(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex28);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex33.negate();
        org.apache.commons.math.complex.Complex complex36 = complex31.subtract(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex21.multiply(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.acos();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex38.multiply(complex44);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "");
        printStream3.print((int) (short) 100);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ja");
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        printStream7.write(byteArray11);
        printStream3.write(byteArray11);
        java.io.PrintStream printStream15 = new java.io.PrintStream("fr");
        printStream15.println((double) (short) 10);
        java.util.Locale.LanguageRange languageRange20 = new java.util.Locale.LanguageRange("ja", (double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] { languageRange20 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale36);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getCountry();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayCountry(locale42);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getScript();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getCountry();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale52.getDisplayCountry(locale54);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale33, locale35, locale36, locale38, locale39, locale42, locale45, locale46, locale48, locale50, locale51, locale52, locale57, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.lang.String str66 = locale65.getLanguage();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode68 = null;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet67, filteringMode68);
        printStream15.print((java.lang.Object) languageRangeList22);
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.getImaginary();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex[] complexArray80 = new org.apache.commons.math.complex.Complex[] { complex75, complex78 };
        org.apache.commons.math.complex.Complex[] complexArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer74.transform(complexArray82);
        java.io.PrintStream printStream84 = printStream15.printf(locale71, "de", (java.lang.Object[]) complexArray82);
        java.util.Set<java.lang.String> strSet85 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str86 = locale71.getDisplayScript();
        java.lang.String str87 = locale71.getDisplayCountry();
        printStream3.print((java.lang.Object) str87);
        printStream3.print((-1.0d));
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 0, -1]");
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de" + "'", str55, "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "de" + "'", str58, "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ja" + "'", str66, "ja");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex[] complexArray12 = new org.apache.commons.math.complex.Complex[] { complex7, complex10 };
        org.apache.commons.math.complex.Complex[] complexArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray12, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.inversetransform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer6.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer24.inversetransform(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer6.inversetransform(complexArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "\u30c9\u30a4\u30c4", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex[] complexArray38 = new org.apache.commons.math.complex.Complex[] { complex33, complex36 };
        org.apache.commons.math.complex.Complex[] complexArray40 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray38, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex[] complexArray48 = new org.apache.commons.math.complex.Complex[] { complex43, complex46 };
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer42.transform(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer32.transform2(complexArray51);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException(throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException58);
        java.lang.String str60 = functionEvaluationException58.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray52, (java.lang.Throwable) functionEvaluationException58);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex[] complexArray71 = new org.apache.commons.math.complex.Complex[] { complex66, complex69 };
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray71, 35.0d);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable78);
        double double80 = functionEvaluationException79.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray75, (java.lang.Throwable) functionEvaluationException79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MathException", (java.lang.Throwable) functionEvaluationException79);
        functionEvaluationException61.addSuppressed((java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "ja", (java.lang.Object[]) complexArray27, (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "Englisch (Vereinigte Staaten von Amerika)", (java.lang.Object[]) complexArray27);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        printWriter1.print(false);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter1.printf("de", objArray9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ja");
        printStream15.print(100.0f);
        boolean boolean18 = printStream15.checkError();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getCountry();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayCountry(locale21);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException30.getSuppressed();
        java.io.PrintStream printStream33 = printStream15.printf(locale21, "", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter34 = printWriter12.printf("fra", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        java.io.PrintWriter printWriter44 = printWriter34.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex47, complex50 };
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.transform(complexArray54);
        java.io.PrintWriter printWriter56 = printWriter34.format("fra", (java.lang.Object[]) complexArray55);
        char[] charArray61 = new char[] { ' ', '4', '#', '#' };
        printWriter56.println(charArray61);
        printWriter56.println();
        java.io.PrintStream printStream66 = new java.io.PrintStream("ja");
        printStream66.print(100.0f);
        printStream66.print((-1.0f));
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream66, true);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray78 = mathException77.getArguments();
        java.io.PrintStream printStream79 = printStream72.printf(locale73, "hi!", objArray78);
        java.io.PrintWriter printWriter80 = printWriter56.printf("fr_JA", objArray78);
        printWriter1.print((java.lang.Object) "fr_JA");
        printWriter1.print((int) (byte) 0);
        java.io.PrintWriter printWriter85 = printWriter1.append('4');
        printWriter85.println(0.6156264703860141d);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "de" + "'", str22, "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ja" + "'", str74, "ja");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter85);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        printWriter1.println(false);
        printWriter1.println((double) 'x');
        printWriter1.println((long) ' ');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex5.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex0.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = complex0.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex10.sqrt1z();
        boolean boolean15 = complex10.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        boolean boolean5 = printStream1.checkError();
        printStream1.println("");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.print("\u30a4\u30bf\u30ea\u30a2\u8a9e");
        printStream8.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 35.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer0.inversetransform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex[] complexArray19 = new org.apache.commons.math.complex.Complex[] { complex14, complex17 };
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer13.transform(complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.inversetransform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer13.transform(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer12.inversetransform2(doubleArray28);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ja");
        printStream33.print(100.0f);
        printStream33.print((-1.0f));
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, true);
        printStream33.print("");
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = locale42.getDisplayCountry(locale44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex[] complexArray54 = new org.apache.commons.math.complex.Complex[] { complex49, complex52 };
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 0.0d);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray56, (java.lang.Throwable) mathException66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        java.io.PrintStream printStream70 = printStream33.format(locale44, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer12.transform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform2(complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.getImaginary();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex[] complexArray79 = new org.apache.commons.math.complex.Complex[] { complex74, complex77 };
        org.apache.commons.math.complex.Complex[] complexArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray79, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer73.transform(complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { 10, ' ', (byte) -1, '4' };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer83.inversetransform(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer73.transform(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform2(doubleArray88);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform2(univariateRealFunction92, 1.5707963267948966d, 1.4369795034878037d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.5707963267948966, 1.4369795034878037]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0, 32.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        java.io.PrintStream printStream25 = printStream19.format("fra", objArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream19.printf("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ja");
        printStream40.print(100.0f);
        boolean boolean43 = printStream40.checkError();
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getCountry();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale44.getDisplayCountry(locale46);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException55.getSuppressed();
        java.io.PrintStream printStream58 = printStream40.printf(locale46, "", (java.lang.Object[]) throwableArray57);
        printStream58.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream58);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex[] complexArray69 = new org.apache.commons.math.complex.Complex[] { complex64, complex67 };
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, 35.0d);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable76);
        double double78 = functionEvaluationException77.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "de", (java.lang.Object[]) complexArray73, (java.lang.Throwable) functionEvaluationException77);
        java.io.PrintWriter printWriter80 = printWriter60.printf("zho", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream81 = printStream19.format("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: fra", (java.lang.Object[]) complexArray73);
        printStream19.print((-1L));
        boolean boolean84 = printStream19.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.exp();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex12.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex9.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex9.tanh();
        boolean boolean18 = complex3.equals((java.lang.Object) complex9);
        double double19 = complex3.abs();
        org.apache.commons.math.complex.Complex complex20 = complex3.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.5403023058681398d + "'", double19 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        java.util.Locale locale3 = new java.util.Locale("fr", "ja", "");
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "fr_JA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JA" + "'", str5, "JA");
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException(throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException10);
        java.lang.Throwable[] throwableArray12 = functionEvaluationException10.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale27);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayCountry(locale33);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale43.getDisplayCountry(locale45);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale24, locale26, locale27, locale29, locale30, locale33, locale36, locale37, locale39, locale41, locale42, locale43, locale48, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale locale54 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList52);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.exp();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex59.divide(complex61);
        java.lang.Object[] objArray64 = new java.lang.Object[] { locale54, (short) -1, 'a', complex59, (short) 10 };
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("ja", objArray64, (java.lang.Throwable) functionEvaluationException71);
        mathException13.addSuppressed((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(1.0253864209002483d, "de", (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", (java.lang.Throwable) functionEvaluationException75);
        double double77 = functionEvaluationException75.getArgument();
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "de" + "'", str34, "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "de" + "'", str46, "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "de" + "'", str49, "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(locale54);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0253864209002483d + "'", double77 == 1.0253864209002483d);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.write(100);
        printStream1.println(false);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale15 = new java.util.Locale("ja", "");
        java.lang.String str16 = locale12.getDisplayLanguage(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getLanguage();
        printStream1.print((java.lang.Object) str19);
        printStream1.println((int) (short) 10);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: ja", "fran\347ais");
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception: ja_FRAN\347AIS");
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8);
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex8);
        double double12 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex11.negate();
        boolean boolean14 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = complex13.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5403023058681398d + "'", double10 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.09054445208314651d) + "'", double12 == (-0.09054445208314651d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex[] complexArray30 = new org.apache.commons.math.complex.Complex[] { complex25, complex28 };
        org.apache.commons.math.complex.Complex[] complexArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, 0.0d);
        java.io.PrintWriter printWriter33 = printWriter23.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex[] complexArray41 = new org.apache.commons.math.complex.Complex[] { complex36, complex39 };
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray41, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform(complexArray43);
        java.io.PrintWriter printWriter45 = printWriter23.format("fra", (java.lang.Object[]) complexArray44);
        char[] charArray50 = new char[] { ' ', '4', '#', '#' };
        printWriter45.println(charArray50);
        printWriter45.println();
        printWriter45.println((float) (byte) 0);
        printWriter45.print("zh_CN");
        java.io.PrintWriter printWriter58 = printWriter45.append((java.lang.CharSequence) "\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        printWriter58.print(10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, #, #]");
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex[] complexArray6 = new org.apache.commons.math.complex.Complex[] { complex1, complex4 };
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray6, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform(complexArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex[] complexArray16 = new org.apache.commons.math.complex.Complex[] { complex11, complex14 };
        org.apache.commons.math.complex.Complex[] complexArray18 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform(complexArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform2(complexArray19);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex[] complexArray28 = new org.apache.commons.math.complex.Complex[] { complex23, complex26 };
        org.apache.commons.math.complex.Complex[] complexArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray28, 0.0d);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException(throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray39 = functionEvaluationException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray30, (java.lang.Throwable) mathException40);
        org.apache.commons.math.complex.Complex[] complexArray43 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer0.inversetransform(complexArray30);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex[] complexArray52 = new org.apache.commons.math.complex.Complex[] { complex47, complex50 };
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, 0.0d);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException(throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException61);
        java.lang.Throwable[] throwableArray63 = functionEvaluationException61.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray54, (java.lang.Throwable) mathException64);
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform2(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex[] complexArray75 = new org.apache.commons.math.complex.Complex[] { complex70, complex73 };
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray75, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        double double82 = complex80.getImaginary();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex[] complexArray85 = new org.apache.commons.math.complex.Complex[] { complex80, complex83 };
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray85, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer79.transform(complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer69.transform2(complexArray88);
        double[] doubleArray92 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer69.transform2(doubleArray92);
        double[] doubleArray95 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray92, (-0.09054445208314651d));
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform(doubleArray92);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-0.9054445208314652, -0.9054445208314652]");
        org.junit.Assert.assertNotNull(complexArray99);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        printWriter1.println((float) 10);
        printWriter1.println((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream9 = new java.io.PrintStream("ja");
        printStream9.print(100.0f);
        boolean boolean12 = printStream9.checkError();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException(throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException24);
        java.lang.Throwable[] throwableArray26 = functionEvaluationException24.getSuppressed();
        java.io.PrintStream printStream27 = printStream9.printf(locale15, "", (java.lang.Object[]) throwableArray26);
        printStream27.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer30.inversetransform(doubleArray32);
        java.io.PrintStream printStream34 = printStream27.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray33);
        java.io.PrintWriter printWriter35 = printWriter1.format(locale6, "ja", (java.lang.Object[]) complexArray33);
        java.lang.String str36 = locale6.getCountry();
        java.lang.String str37 = locale6.getDisplayVariant();
        java.lang.String str38 = locale6.getISO3Language();
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "TW" + "'", str36, "TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zho" + "'", str38, "zho");
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) 0.0f, 1.541863457045632d);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayCountry(locale7);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException(throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException16);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException16.getSuppressed();
        java.io.PrintStream printStream19 = printStream1.printf(locale7, "", (java.lang.Object[]) throwableArray18);
        printStream19.close();
        printStream19.println((float) (byte) 1);
        printStream19.print(0.0d);
        printStream19.print(true);
        java.lang.Object obj27 = null;
        printStream19.print(obj27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("fr");
        java.io.PrintStream printStream32 = printStream30.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("hi!");
        java.io.PrintStream printStream37 = new java.io.PrintStream("ja");
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream37, false);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hi!");
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex[] complexArray50 = new org.apache.commons.math.complex.Complex[] { complex45, complex48 };
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray50, 0.0d);
        java.lang.Throwable throwable57 = null;
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException(throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException59);
        java.lang.Throwable[] throwableArray61 = functionEvaluationException59.getSuppressed();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray52, (java.lang.Throwable) mathException62);
        org.apache.commons.math.complex.Complex[] complexArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, Double.NaN);
        java.io.PrintStream printStream66 = printStream37.printf(locale41, "org.apache.commons.math.MathException", (java.lang.Object[]) complexArray65);
        java.io.PrintWriter printWriter67 = printWriter34.format("ja", (java.lang.Object[]) complexArray65);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("ja");
        printWriter69.println((float) 10);
        printWriter69.println((int) (byte) 10);
        printWriter69.print(false);
        java.lang.Object[] objArray77 = null;
        java.io.PrintWriter printWriter78 = printWriter69.printf("de", objArray77);
        char[] charArray79 = new char[] {};
        printWriter69.write(charArray79);
        printWriter67.println(charArray79);
        printStream32.print(charArray79);
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.OutputStream) printStream32, true);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.Writer) printWriter84, true);
        printWriter84.print(false);
        printStream19.print((java.lang.Object) printWriter84);
        boolean boolean90 = printStream19.checkError();
        printStream19.println((long) (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de" + "'", str8, "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "de");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale4.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        boolean boolean13 = locale10.hasExtensions();
        java.util.Locale.Builder builder14 = builder3.setLocale(locale10);
        java.util.Locale.Builder builder15 = builder3.clearExtensions();
        java.util.Locale.Builder builder16 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setUnicodeLocaleKeyword("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "Chine");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException: ??? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.print(100.0f);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "de");
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getVariant();
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale9.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder14 = builder8.setLocale(locale10);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex[] complexArray23 = new org.apache.commons.math.complex.Complex[] { complex18, complex21 };
        org.apache.commons.math.complex.Complex[] complexArray25 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray23, 0.0d);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.Throwable[] throwableArray34 = functionEvaluationException32.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray25, (java.lang.Throwable) mathException35);
        java.io.PrintStream printStream37 = printStream1.printf(locale10, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintStream printStream39 = printStream37.append((java.lang.CharSequence) "fra");
        printStream37.println((int) (short) 1);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream46 = new java.io.PrintStream("ja");
        printStream46.print(100.0f);
        boolean boolean49 = printStream46.checkError();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getCountry();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale50.getDisplayCountry(locale52);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException(throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException61);
        java.lang.Throwable[] throwableArray63 = functionEvaluationException61.getSuppressed();
        java.io.PrintStream printStream64 = printStream46.printf(locale52, "", (java.lang.Object[]) throwableArray63);
        java.io.PrintWriter printWriter65 = printWriter43.printf("fra", (java.lang.Object[]) throwableArray63);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex[] complexArray72 = new org.apache.commons.math.complex.Complex[] { complex67, complex70 };
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, 0.0d);
        java.io.PrintWriter printWriter75 = printWriter65.printf("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        double double80 = complex78.getImaginary();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex82 = complex81.cosh();
        org.apache.commons.math.complex.Complex[] complexArray83 = new org.apache.commons.math.complex.Complex[] { complex78, complex81 };
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer77.transform(complexArray85);
        java.io.PrintWriter printWriter87 = printWriter65.format("fra", (java.lang.Object[]) complexArray86);
        boolean boolean88 = printWriter87.checkError();
        printStream37.println((java.lang.Object) printWriter87);
        printStream37.print("org.apache.commons.math.FunctionEvaluationException: TWN");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str13, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "de" + "'", str53, "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("fr-CA");
        java.lang.String str2 = mathException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr-CA" + "'", str2, "fr-CA");
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ja");
        printStream1.write((int) '#');
        printStream1.close();
        printStream1.println((java.lang.Object) 10.0d);
        printStream1.print(100L);
        java.io.PrintStream printStream10 = printStream1.append(' ');
        printStream10.print((float) (byte) 10);
        printStream10.println((float) (short) 0);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.2024492670356164d, (double) '4');
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr");
        printStream1.println(false);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale locale12 = new java.util.Locale("ja", "");
        java.lang.String str13 = locale9.getDisplayLanguage(locale12);
        java.lang.String str14 = locale9.getDisplayVariant();
        java.io.PrintStream printStream17 = new java.io.PrintStream("ja");
        printStream17.print(100.0f);
        printStream17.println("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream23 = printStream17.append('a');
        java.io.PrintStream printStream25 = printStream23.append((java.lang.CharSequence) "fr_JA");
        printStream25.print((double) (short) 1);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale28.getDisplayScript(locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream35 = new java.io.PrintStream("ja");
        printStream35.print(100.0f);
        printStream35.println(10);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ja");
        printStream42.print(100.0f);
        boolean boolean45 = printStream42.checkError();
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder46.setExtension('a', "de");
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getVariant();
        java.lang.String str53 = locale51.getVariant();
        java.lang.String str54 = locale50.getDisplayLanguage(locale51);
        java.util.Locale.Builder builder55 = builder49.setLocale(locale51);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex[] complexArray64 = new org.apache.commons.math.complex.Complex[] { complex59, complex62 };
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, 0.0d);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException73);
        java.lang.Throwable[] throwableArray75 = functionEvaluationException73.getSuppressed();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) throwableArray75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "fra", (java.lang.Object[]) complexArray66, (java.lang.Throwable) mathException76);
        java.io.PrintStream printStream78 = printStream42.printf(locale51, "ja", (java.lang.Object[]) complexArray66);
        java.io.PrintStream printStream79 = printStream35.format("\u65e5\u6587", (java.lang.Object[]) complexArray66);
        java.io.PrintStream printStream80 = printStream25.printf(locale30, "jpn", (java.lang.Object[]) complexArray66);
        java.io.PrintStream printStream81 = printStream5.format(locale9, "\u30d5\u30e9\u30f3\u30b9", (java.lang.Object[]) complexArray66);
        java.lang.String str82 = locale9.getISO3Country();
        java.util.Locale.setDefault(locale9);
        java.lang.String str84 = locale9.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str54, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ja");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ja");
        printStream4.print(100.0f);
        boolean boolean7 = printStream4.checkError();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale8.getDisplayCountry(locale10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException(throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException19);
        java.lang.Throwable[] throwableArray21 = functionEvaluationException19.getSuppressed();
        java.io.PrintStream printStream22 = printStream4.printf(locale10, "", (java.lang.Object[]) throwableArray21);
        java.io.PrintWriter printWriter23 = printWriter1.printf("fra", (java.lang.Object[]) throwableArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex[] complexArray33 = new org.apache.commons.math.complex.Complex[] { complex28, complex31 };
        org.apache.commons.math.complex.Complex[] complexArray35 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray33, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex[] complexArray43 = new org.apache.commons.math.complex.Complex[] { complex38, complex41 };
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform(complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer27.transform2(complexArray46);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException(throwable51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException53);
        java.lang.String str55 = functionEvaluationException53.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray47, (java.lang.Throwable) functionEvaluationException53);
        java.io.PrintWriter printWriter57 = printWriter23.format("fr", (java.lang.Object[]) complexArray47);
        printWriter57.println((float) '#');
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter57, true);
        printWriter57.print(false);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        printWriter57.println((long) ' ');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayCountry(locale19);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getCountry();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale29.getDisplayCountry(locale31);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getLanguage();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale10, locale12, locale13, locale15, locale16, locale19, locale22, locale23, locale25, locale27, locale28, locale29, locale34, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList38);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.exp();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex45.divide(complex47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { locale40, (short) -1, 'a', complex45, (short) 10 };
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException(throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ja", objArray50, (java.lang.Throwable) functionEvaluationException57);
        java.lang.String str59 = functionEvaluationException57.getPattern();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "de" + "'", str32, "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de" + "'", str35, "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex[] complexArray8 = new org.apache.commons.math.complex.Complex[] { complex3, complex6 };
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray8, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform(complexArray10);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex[] complexArray18 = new org.apache.commons.math.complex.Complex[] { complex13, complex16 };
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform(complexArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer2.transform2(complexArray21);
        double[] doubleArray25 = new double[] { (byte) 10, 10.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer2.transform2(doubleArray25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("fr_FR", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("\u6cd5\u6587", (java.lang.Object[]) complexArray26);
        java.lang.String str30 = mathException29.toString();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(complexArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u6cd5\u6587" + "'", str30, "\u6cd5\u6587");
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex[] complexArray7 = new org.apache.commons.math.complex.Complex[] { complex2, complex5 };
        org.apache.commons.math.complex.Complex[] complexArray9 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray7, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform(complexArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex[] complexArray17 = new org.apache.commons.math.complex.Complex[] { complex12, complex15 };
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer11.transform(complexArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer1.transform2(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer22.inversetransform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer1.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.inversetransform2(doubleArray24);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("ja");
        printWriter29.println((float) 10);
        printWriter29.println((int) (byte) 10);
        printWriter29.print(false);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter29.printf("de", objArray37);
        printWriter29.print((int) (byte) 1);
        java.io.PrintWriter printWriter42 = printWriter29.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("ja");
        printWriter45.println((float) 10);
        printWriter45.println((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.io.PrintStream printStream53 = new java.io.PrintStream("ja");
        printStream53.print(100.0f);
        boolean boolean56 = printStream53.checkError();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getCountry();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale57.getDisplayCountry(locale59);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable[] throwableArray70 = functionEvaluationException68.getSuppressed();
        java.io.PrintStream printStream71 = printStream53.printf(locale59, "", (java.lang.Object[]) throwableArray70);
        printStream71.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { 10.0d };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer74.inversetransform(doubleArray76);
        java.io.PrintStream printStream78 = printStream71.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter45.format(locale50, "ja", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter80 = printWriter29.format("org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform(complexArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform(univariateRealFunction82, Double.NaN, 0.0d, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "de" + "'", str60, "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(complexArray81);
    }
}

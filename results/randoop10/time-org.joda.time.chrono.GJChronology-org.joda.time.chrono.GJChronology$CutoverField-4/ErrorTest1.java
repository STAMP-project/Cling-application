import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology3.getZone();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(26163);
        org.joda.time.DateTime dateTime21 = dateTime17.plusMillis(26170);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(26195);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.minus(readablePeriod24);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime17", (mutableDateTime10.compareTo(dateTime17) == 0) == mutableDateTime10.equals(dateTime17));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Chronology chronology10 = gJChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.yearOfEra();
        org.joda.time.DurationField durationField18 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.clockhourOfDay();
        org.joda.time.DurationField durationField20 = gJChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology15.getZone();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 26154, dateTimeZone22);
        java.lang.String str24 = dateTimeZone22.getID();
        org.joda.time.Chronology chronology25 = gJChronology3.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str28 = dateTimeZone27.getID();
        boolean boolean29 = dateTimeZone27.isFixed();
        long long31 = dateTimeZone27.convertUTCToLocal((long) (byte) 0);
        int int33 = dateTimeZone27.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = property37.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusHours(10);
        boolean boolean44 = dateTimeZone27.equals((java.lang.Object) localDateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 44219160, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology50);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Chronology chronology63 = gJChronology50.withZone(dateTimeZone62);
        long long67 = dateTimeZone62.convertLocalToUTC(4518960813L, true, 0L);
        long long70 = dateTimeZone62.adjustOffset(0L, false);
        org.joda.time.DateTime dateTime71 = dateTime45.withZoneRetainFields(dateTimeZone62);
        long long74 = dateTimeZone62.adjustOffset((long) 26180, false);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(dateTimeZone62);
        org.joda.time.Chronology chronology76 = gJChronology3.withZone(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime75", (dateTime8.compareTo(mutableDateTime75) == 0) == dateTime8.equals(mutableDateTime75));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0503");
        java.lang.String[] strArray17 = new java.lang.String[] { "2022-02-21T07:16:02.457", "GJChronology[Etc/UTC,mdfw=1]", "\u661f\u671f\u4e8c", "", "DurationField[days]", "2022-02-21T07:15:52.625", "de", "AD", "years", "zh_CN", "2022-02-21T07:15:50.389", "years", "+00:00", "Deutsch", "Italienisch (Italien)", "26155158", "192" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        boolean boolean22 = strSet18.addAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean24 = strSet21.equals((java.lang.Object) 26168);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet26.remove((java.lang.Object) 2922790L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.era();
        boolean boolean42 = mutableDateTime37.isEqual((org.joda.time.ReadableInstant) mutableDateTime40);
        int int43 = property35.getDifference((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = mutableDateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime47.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.withPeriodAdded(readablePeriod49, 0);
        int int52 = dateTime47.getSecondOfDay();
        org.joda.time.DateTime.Property property53 = dateTime47.minuteOfHour();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale54);
        java.lang.String str56 = property53.getAsText(locale54);
        java.lang.String str57 = locale54.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime58 = property35.setCopy("26", locale54);
        boolean boolean59 = strSet26.remove((java.lang.Object) locale54);
        java.lang.Object[] objArray60 = strSet26.toArray();
        boolean boolean61 = strSet26.isEmpty();
        boolean boolean62 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet26);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        java.lang.String str67 = gJChronology66.toString();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology66);
        org.joda.time.DateTime dateTime70 = dateTime68.withMillisOfDay(0);
        org.joda.time.DateTime dateTime72 = dateTime70.withYear((int) '#');
        org.joda.time.DateTime dateTime74 = dateTime70.withWeekyear(26149);
        org.joda.time.DateTime dateTime76 = dateTime70.plusMonths(1970);
        org.joda.time.DateTime dateTime79 = dateTime70.withDurationAdded(26395200000L, (-627528));
        org.joda.time.DateTime dateTime81 = dateTime79.plus(172826155L);
        boolean boolean82 = strSet26.equals((java.lang.Object) dateTime81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and dateTime68", (mutableDateTime37.compareTo(dateTime68) == 0) == mutableDateTime37.equals(dateTime68));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0504");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime3.copy();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.monthOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField17 = durationFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        java.lang.String str18 = durationFieldType7.toString();
        mutableDateTime3.add(durationFieldType7, 26298);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime16", (mutableDateTime1.compareTo(dateTime16) == 0) == mutableDateTime1.equals(dateTime16));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0505");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add(3600001L);
        mutableDateTime4.setTime(0L);
        mutableDateTime4.setMillisOfDay(26296);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.minuteOfHour();
        org.joda.time.DurationField durationField16 = gJChronology12.years();
        int int17 = gJChronology12.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.era();
        mutableDateTime4.setRounding(dateTimeField19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.weekyear();
        org.joda.time.DurationField durationField29 = gJChronology24.weekyears();
        org.joda.time.DurationField durationField30 = gJChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.centuryOfEra();
        org.joda.time.Instant instant32 = gJChronology24.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.clockhourOfDay();
        mutableDateTime4.setChronology((org.joda.time.Chronology) gJChronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField29", (durationField16.compareTo(durationField29) == 0) == durationField16.equals(durationField29));
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0506");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime6.withYearOfEra(70);
        org.joda.time.DateTime dateTime19 = dateTime6.withYearOfEra(26194);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(26308);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) 2022);
        boolean boolean25 = dateTime20.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTime dateTime26 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        java.lang.String str37 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.monthOfYear();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology36);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property44 = dateTime43.year();
        int int45 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        int int14 = mutableDateTime7.get(dateTimeField13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.era();
        boolean boolean36 = mutableDateTime31.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        int int37 = property29.getDifference((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.lang.String str50 = property47.getAsText(locale48);
        java.lang.String str51 = locale48.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime52 = property29.setCopy("26", locale48);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.year();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusDays(26158);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.minusMinutes(26195);
        long long59 = gJChronology18.set((org.joda.time.ReadablePartial) localDateTime57, 3907552601159L);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology18.secondOfMinute();
        org.joda.time.DateTime dateTime61 = mutableDateTime7.toDateTime((org.joda.time.Chronology) gJChronology18);
        mutableDateTime7.setTime((-17999968L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime31 and dateTime61", (mutableDateTime31.compareTo(dateTime61) == 0) == mutableDateTime31.equals(dateTime61));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0508");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays((int) (short) -1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        java.util.Date date23 = localDateTime20.toDate();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withPeriodAdded(readablePeriod24, (int) (byte) -1);
        java.lang.Object obj27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withField(dateTimeFieldType30, 523);
        java.lang.String str33 = dateTimeFieldType30.getName();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime13.withField(dateTimeFieldType30, 26204);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        boolean boolean42 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime15 and localDateTime47", (localDateTime15.compareTo(localDateTime47) == 0) == localDateTime15.equals(localDateTime47));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology22.days();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = gJChronology22.add(readablePeriod34, (long) 26202, 26361);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime33", (mutableDateTime10.compareTo(dateTime33) == 0) == mutableDateTime10.equals(dateTime33));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime.Property property12 = dateTime10.weekyear();
        org.joda.time.LocalDate localDate13 = dateTime10.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTimeISO();
        boolean boolean21 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime15", (dateTime8.compareTo(mutableDateTime15) == 0) == dateTime8.equals(mutableDateTime15));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0511");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.LocalDateTime localDateTime1 = dateTime0.toLocalDateTime();
        org.joda.time.DateTime dateTime3 = dateTime0.plusMonths(292278993);
        org.joda.time.DateTime dateTime5 = dateTime3.minusSeconds(26189);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology9.getZone();
        org.joda.time.DurationField durationField12 = gJChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.dayOfWeek();
        long long17 = gJChronology9.add((-166150900L), (long) 26160, 4);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology9.year();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology9.millisOfSecond();
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.Chronology chronology21 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime20", (dateTime5.compareTo(dateTime20) == 0) == dateTime5.equals(dateTime20));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0512");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology3.eras();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(0);
        org.joda.time.DateTime dateTime18 = dateTime16.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withPeriodAdded(readablePeriod19, 26148);
        org.joda.time.DateTime.Property property22 = dateTime18.era();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str24 = durationFieldType23.getName();
        org.joda.time.DateTime dateTime26 = dateTime18.withFieldAdded(durationFieldType23, 26181);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.yearOfCentury();
        org.joda.time.DurationField durationField34 = gJChronology30.minutes();
        org.joda.time.DurationField durationField35 = gJChronology30.millis();
        org.joda.time.DurationField durationField36 = gJChronology30.millis();
        boolean boolean37 = durationFieldType23.isSupported((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology30.weekOfWeekyear();
        long long43 = gJChronology30.add((long) 26220, 13046426155L, 26175);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(3903232622000L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.DurationField durationField45 = gJChronology30.years();
        org.joda.time.DurationField durationField46 = gJChronology30.weeks();
        int int47 = durationField7.compareTo(durationField46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField34, and durationField35", !(durationField7.compareTo(durationField34) == 0) || (Math.signum(durationField7.compareTo(durationField35)) == Math.signum(durationField34.compareTo(durationField35))));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField12 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField6, and durationField7", !(durationField12.compareTo(durationField6) == 0) || (Math.signum(durationField12.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0514");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded(readableDuration13, 192);
        org.joda.time.DateTime dateTime17 = dateTime9.plusHours(100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        org.joda.time.DurationField durationField24 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology21.getZone();
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone29.getID();
        boolean boolean31 = dateTimeZone29.isFixed();
        long long33 = dateTimeZone29.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(26150L);
        boolean boolean37 = dateTimeZone29.equals((java.lang.Object) 26150L);
        java.lang.String str39 = dateTimeZone29.getShortName((long) 12);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        int int45 = mutableDateTime41.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTimeISO();
        org.joda.time.DateTime.Property property49 = dateTime48.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.withPeriodAdded(readablePeriod50, 0);
        int int53 = dateTime48.getSecondOfDay();
        mutableDateTime43.setDate((org.joda.time.ReadableInstant) dateTime48);
        mutableDateTime43.addDays(26147);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime43.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTime dateTime59 = dateTime9.toDateTime(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime34", (dateTime5.compareTo(dateTime34) == 0) == dateTime5.equals(dateTime34));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0515");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology8.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 26155);
        org.joda.time.Chronology chronology13 = gJChronology4.withZone(dateTimeZone10);
        mutableDateTime3.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 0);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime15.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.hourOfDay();
        mutableDateTime15.setMillisOfDay(9);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime15.add(readableDuration23);
        java.util.Date date25 = mutableDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        int int32 = mutableDateTime28.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        mutableDateTime30.setSecondOfDay(59);
        mutableDateTime30.addMonths(26149);
        mutableDateTime30.setWeekOfWeekyear(22);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime30.secondOfDay();
        org.joda.time.DateTime dateTime40 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime28", (mutableDateTime19.compareTo(mutableDateTime28) == 0) == mutableDateTime19.equals(mutableDateTime28));
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0516");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant7", (mutableDateTime6.compareTo(instant7) == 0) == mutableDateTime6.equals(instant7));
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology22);
        org.joda.time.Instant instant31 = gJChronology22.getGregorianCutover();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime();
        int int38 = localDateTime33.getEra();
        int int39 = localDateTime33.getMillisOfDay();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.yearOfEra();
        org.joda.time.DurationField durationField49 = gJChronology46.halfdays();
        org.joda.time.DurationField durationField50 = gJChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfMonth();
        boolean boolean52 = dateTimeFieldType42.isSupported((org.joda.time.Chronology) gJChronology46);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType42.getDurationType();
        boolean boolean54 = instant41.isSupported(dateTimeFieldType42);
        boolean boolean55 = localDateTime33.isSupported(dateTimeFieldType42);
        int[] intArray57 = gJChronology22.get((org.joda.time.ReadablePartial) localDateTime33, 1645514377711L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime32", (localDateTime30.compareTo(localDateTime32) == 0) == localDateTime30.equals(localDateTime32));
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0518");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.minusWeeks(22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        org.joda.time.DateTime dateTime21 = dateTime16.withSecondOfMinute((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(23);
        boolean boolean24 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime16", (mutableDateTime1.compareTo(dateTime16) == 0) == mutableDateTime1.equals(dateTime16));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DurationField durationField20 = gJChronology18.hours();
        org.joda.time.DurationField durationField21 = gJChronology18.years();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.clockhourOfHalfday();
        java.lang.String[] strArray38 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        int int41 = strSet39.size();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime45.get(dateTimeFieldType46);
        boolean boolean48 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        boolean boolean49 = strSet39.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime.Property property50 = localDateTime43.hourOfDay();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = property50.getAsText(locale51);
        java.lang.String str53 = locale51.getCountry();
        java.lang.String str54 = dateTimeField22.getAsText((long) 26175, locale51);
        java.lang.String str55 = locale51.getDisplayScript();
        java.lang.String str56 = locale51.getCountry();
        java.lang.String str57 = dateTime10.toString("26222", locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType58.getField((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology62.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology62.weekyear();
        org.joda.time.DateTime dateTime74 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime77.getZone();
        java.lang.String str80 = dateTimeZone78.getName((long) 26150);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(dateTimeZone78);
        int int83 = dateTimeZone78.getStandardOffset(827680749358018L);
        boolean boolean84 = dateTimeZone78.isFixed();
        org.joda.time.DateTime dateTime85 = dateTime74.withZone(dateTimeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime76", (dateTime8.compareTo(mutableDateTime76) == 0) == dateTime8.equals(mutableDateTime76));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0520");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology11.seconds();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.joda.time.DateTime dateTime19 = dateTime5.withFieldAdded(durationFieldType17, 18000100);
        int int20 = dateTime19.getDayOfWeek();
        boolean boolean22 = dateTime19.isAfter(0L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withPeriodAdded(readablePeriod27, 0);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.DateTime dateTime32 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = dateTime32.toLocalDate();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime32);
        int int35 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime24", (dateTime5.compareTo(mutableDateTime24) == 0) == dateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0521");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology22.days();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        boolean boolean41 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.minusMinutes(26163);
        java.util.Date date52 = localDateTime51.toDate();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.fromDateFields(date52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes(26412854);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = gJChronology60.withZone(dateTimeZone62);
        org.joda.time.DurationField durationField64 = gJChronology60.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType65.getField((org.joda.time.Chronology) gJChronology69);
        org.joda.time.DurationField durationField75 = gJChronology69.hours();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology69);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusMinutes(26153);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = mutableDateTime80.toDateTimeISO();
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withPeriodAdded(readablePeriod83, 0);
        org.joda.time.DateTime.Property property86 = dateTime85.hourOfDay();
        org.joda.time.Chronology chronology87 = dateTime85.getChronology();
        org.joda.time.DateTime dateTime89 = dateTime85.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property90 = dateTime89.dayOfMonth();
        org.joda.time.DateTime dateTime91 = localDateTime76.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        int[] intArray93 = gJChronology60.get((org.joda.time.ReadablePartial) localDateTime76, 1645514176853L);
        int[] intArray95 = dateTimeField34.add((org.joda.time.ReadablePartial) localDateTime55, 2616422, intArray93, 26198);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime35 and localDateTime76", (localDateTime35.compareTo(localDateTime76) == 0) == localDateTime35.equals(localDateTime76));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0522");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(2);
        int int11 = localDateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.millisOfDay();
        org.joda.time.DurationField durationField20 = gJChronology15.millis();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology25.add(readablePeriod30, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology34 = gJChronology25.withUTC();
        long long38 = gJChronology25.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        boolean boolean41 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusDays((int) (short) -1);
        long long46 = gJChronology25.set((org.joda.time.ReadablePartial) localDateTime44, 826129497600000L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minus(readableDuration47);
        int[] intArray50 = gJChronology15.get((org.joda.time.ReadablePartial) localDateTime48, 1380120L);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.property(dateTimeFieldType51);
        int int53 = localDateTime8.indexOf(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTimeISO();
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        org.joda.time.DateTime dateTime58 = property57.roundHalfCeilingCopy();
        java.lang.String str59 = property57.getAsText();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime61.toDateTimeISO();
        org.joda.time.DateTime.Property property63 = dateTime62.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.withPeriodAdded(readablePeriod64, 0);
        int int67 = dateTime62.getSecondOfDay();
        org.joda.time.DateTime.Property property68 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime70 = dateTime62.minusSeconds(10);
        long long71 = property57.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime62);
        java.lang.String str72 = dateTime62.toString();
        org.joda.time.DateTime dateTime74 = dateTime62.minusHours(88);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMillis(26289);
        java.util.Date date77 = dateTime74.toDate();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78, readableInstant79, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField82 = gJChronology81.millisOfDay();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology81.secondOfMinute();
        org.joda.time.DurationField durationField84 = gJChronology81.weeks();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology81.era();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime();
        boolean boolean88 = localDateTime86.isBefore((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.withSecondOfMinute(1);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime87.withMonthOfYear(4);
        long long94 = gJChronology81.set((org.joda.time.ReadablePartial) localDateTime87, (long) '#');
        org.joda.time.DateTimeField dateTimeField95 = gJChronology81.secondOfDay();
        org.joda.time.DateTime dateTime96 = dateTime74.toDateTime((org.joda.time.Chronology) gJChronology81);
        org.joda.time.DateTimeField dateTimeField97 = dateTimeFieldType51.getField((org.joda.time.Chronology) gJChronology81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime74 and dateTime96", (dateTime74.compareTo(dateTime96) == 0) == dateTime74.equals(dateTime96));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0523");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale22);
        java.lang.String str26 = nameProvider21.getName(locale22, "secondOfMinute", "Etc/UTC");
        java.lang.String str27 = locale22.getDisplayLanguage();
        int int28 = property20.getMaximumShortTextLength(locale22);
        int int29 = property14.getMaximumShortTextLength(locale22);
        java.lang.String str30 = locale22.getScript();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.lang.String str34 = locale33.getISO3Language();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale32.getDisplayLanguage(locale33);
        java.lang.String str37 = locale22.getDisplayCountry(locale32);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("UTC");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale32.getDisplayVariant(locale39);
        int int42 = property8.getMaximumTextLength(locale39);
        java.lang.String str43 = dateTimeField3.getAsText(1582, locale39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime1 and localDateTime5", (localDateTime1.compareTo(localDateTime5) == 0) == localDateTime1.equals(localDateTime5));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0524");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology16 = gJChronology4.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.weekyear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withPeriodAdded(readablePeriod33, 0);
        int int36 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.era();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = gJChronology42.seconds();
        boolean boolean48 = dateTimeZone27.equals((java.lang.Object) gJChronology42);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale51);
        java.lang.String str55 = nameProvider50.getName(locale51, "secondOfMinute", "Etc/UTC");
        java.lang.String str56 = locale51.getDisplayLanguage();
        int int57 = dateTimeField49.getMaximumShortTextLength(locale51);
        java.lang.String str58 = locale19.getDisplayName(locale51);
        java.lang.String str59 = locale19.getVariant();
        int int60 = dateTimeField17.getMaximumTextLength(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime30", (dateTime13.compareTo(mutableDateTime30) == 0) == dateTime13.equals(mutableDateTime30));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfEra();
        int int20 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(0);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, 26148);
        org.joda.time.DateTime.Property property34 = dateTime30.era();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.DateTime dateTime38 = dateTime30.withFieldAdded(durationFieldType35, 26181);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = gJChronology42.minutes();
        org.joda.time.DurationField durationField47 = gJChronology42.millis();
        org.joda.time.DurationField durationField48 = gJChronology42.millis();
        boolean boolean49 = durationFieldType35.isSupported((org.joda.time.Chronology) gJChronology42);
        java.lang.String str50 = durationFieldType35.getName();
        mutableDateTime18.add(durationFieldType35, 329);
        org.joda.time.DateTime dateTime54 = dateTime16.withFieldAdded(durationFieldType35, 32);
        java.lang.String str55 = durationFieldType35.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime26", (mutableDateTime14.compareTo(dateTime26) == 0) == mutableDateTime14.equals(dateTime26));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) (short) 100);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.withDayOfMonth(27);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(479);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withSecondOfMinute(1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMonthOfYear(4);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime33.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime39 = dateTime33.plusWeeks(27);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusDays((int) (short) -1);
        java.lang.String str46 = localDateTime45.toString();
        org.joda.time.Chronology chronology47 = localDateTime45.getChronology();
        java.util.Date date48 = localDateTime45.toDate();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.withPeriodAdded(readablePeriod49, (int) (byte) -1);
        java.lang.Object obj52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(obj52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withField(dateTimeFieldType55, 523);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType55.getDurationType();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType55.getDurationType();
        int int60 = dateTime33.get(dateTimeFieldType55);
        org.joda.time.LocalDateTime.Property property61 = localDateTime25.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime63 = dateTime18.withField(dateTimeFieldType55, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime28", (dateTime8.compareTo(mutableDateTime28) == 0) == dateTime8.equals(mutableDateTime28));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0527");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime5.plusMillis(26185);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        boolean boolean18 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        mutableDateTime16.setZoneRetainFields(dateTimeZone26);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime16.setChronology((org.joda.time.Chronology) gJChronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        mutableDateTime16.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime16.copy();
        boolean boolean34 = dateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime14", (dateTime5.compareTo(mutableDateTime14) == 0) == dateTime5.equals(mutableDateTime14));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        java.lang.String str6 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        java.lang.String str9 = gJChronology3.toString();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField10", Math.signum(durationField5.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField5)));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0529");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfDay(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withPeriodAdded(readablePeriod14, 26148);
        org.joda.time.DateTime.Property property17 = dateTime13.era();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.DateTime dateTime21 = dateTime13.withFieldAdded(durationFieldType18, 26181);
        org.joda.time.DateTime dateTime23 = dateTime13.withYear(523);
        org.joda.time.DateTime dateTime25 = dateTime13.plusMonths(295);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(26328);
        boolean boolean28 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime9", (mutableDateTime1.compareTo(dateTime9) == 0) == mutableDateTime1.equals(dateTime9));
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0530");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        java.lang.String str6 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology5.getZone();
        org.joda.time.DurationField durationField12 = gJChronology5.millis();
        org.joda.time.DurationField durationField13 = gJChronology5.eras();
        org.joda.time.DurationField durationField14 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField13", Math.signum(durationField14.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField14)));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.hourOfHalfday();
        org.joda.time.DurationField durationField27 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = instant19.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        long long33 = gJChronology24.add(228855482355665L, (long) 26301172, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime29", (instant19.compareTo(mutableDateTime29) == 0) == instant19.equals(mutableDateTime29));
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0532");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime18 = property3.roundFloorCopy();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        java.lang.String str28 = dateTimeField26.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        int int34 = localDateTime32.get(dateTimeFieldType33);
        boolean boolean35 = localDateTime30.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.lang.String str46 = dateTimeZone43.getShortName((long) 2022, locale45);
        java.lang.String str47 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 295, locale45);
        java.util.Locale.setDefault(category19, locale45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.yearOfEra();
        org.joda.time.DurationField durationField55 = gJChronology52.halfdays();
        org.joda.time.DurationField durationField56 = gJChronology52.centuries();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology52.getZone();
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = dateTimeZone57.getName(24L, locale59);
        java.util.Locale.setDefault(category19, locale59);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.setVariant("Deutsch");
        java.util.Locale.Builder builder66 = builder63.clear();
        java.util.Locale.Builder builder68 = builder66.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder70 = builder66.setLanguage("");
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72, (int) (short) 1);
        java.lang.String str75 = gJChronology74.toString();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTime dateTime78 = dateTime76.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime76.getZone();
        org.joda.time.DateTime dateTime81 = dateTime76.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property82 = dateTime76.centuryOfEra();
        org.joda.time.DateTime dateTime83 = property82.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        boolean boolean86 = localDateTime84.isBefore((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime88 = property87.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.hourOfDay();
        boolean boolean90 = property89.isLeap();
        org.joda.time.LocalDateTime localDateTime91 = property89.getLocalDateTime();
        java.util.Locale locale92 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale92);
        java.lang.String str94 = locale92.getDisplayScript();
        java.lang.String str95 = property89.getAsShortText(locale92);
        java.lang.String str96 = property82.getAsText(locale92);
        java.util.Locale.Builder builder97 = builder66.setLocale(locale92);
        java.util.Locale.setDefault(category19, locale92);
        java.lang.String str99 = property3.getAsText(locale92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime76", (mutableDateTime1.compareTo(dateTime76) == 0) == mutableDateTime1.equals(dateTime76));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 4537011236L, 26175);
        org.joda.time.DurationField durationField13 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField13", Math.signum(durationField7.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField7)));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0534");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0535");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundCeiling();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime3", (mutableDateTime19.compareTo(mutableDateTime3) == 0) == mutableDateTime19.equals(mutableDateTime3));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0536");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property2 = dateTime1.centuryOfEra();
        long long3 = property2.remainder();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withPeriodAdded(readablePeriod8, 0);
        int int11 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime.Property property12 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime6.withWeekyear(26153);
        long long15 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        java.lang.String str20 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.monthOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology19.add(readablePeriod24, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology28 = gJChronology19.withUTC();
        long long32 = gJChronology19.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology33 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology19.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime6.withChronology((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 326, dateTimeZone37);
        int[] intArray40 = gJChronology19.get((org.joda.time.ReadablePartial) localDateTime38, 0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime35", (mutableDateTime5.compareTo(dateTime35) == 0) == mutableDateTime5.equals(dateTime35));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0537");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(26370);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        boolean boolean32 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        java.lang.String str34 = mutableDateTime30.toString("15");
        mutableDateTime30.setSecondOfMinute(15);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfDay();
        boolean boolean41 = mutableDateTime30.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.yearOfEra();
        org.joda.time.DurationField durationField48 = gJChronology45.halfdays();
        org.joda.time.DurationField durationField49 = gJChronology45.centuries();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.secondOfMinute();
        org.joda.time.DurationField durationField52 = gJChronology45.hours();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology45.getZone();
        mutableDateTime30.setZoneRetainFields(dateTimeZone53);
        mutableDateTime30.setMinuteOfHour(9);
        boolean boolean57 = dateTime26.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime24", (dateTime10.compareTo(dateTime24) == 0) == dateTime10.equals(dateTime24));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0538");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.minutes();
        int int3 = gJChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology7.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology7.halfdayOfDay();
        org.joda.time.DurationField durationField14 = gJChronology7.months();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology7.era();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        boolean boolean31 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusSeconds(0);
        int int36 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withWeekyear(26241);
        int int40 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusDays((int) (short) -1);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.Chronology chronology48 = localDateTime46.getChronology();
        int int49 = localDateTime46.getMinuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology0.validate((org.joda.time.ReadablePartial) localDateTime39, intArray50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime1 and localDateTime25", (localDateTime1.compareTo(localDateTime25) == 0) == localDateTime1.equals(localDateTime25));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0539");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(26155);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.getID();
        boolean boolean15 = dateTimeZone13.isFixed();
        long long17 = dateTimeZone13.convertUTCToLocal((long) (byte) 0);
        int int19 = dateTimeZone13.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withField(dateTimeFieldType22, (int) (short) 0);
        boolean boolean25 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime28 = property26.setCopy("26306259");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime8 and localDateTime20", (localDateTime8.compareTo(localDateTime20) == 0) == localDateTime8.equals(localDateTime20));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0540");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        boolean boolean7 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        java.lang.String str9 = mutableDateTime5.toString("15");
        mutableDateTime5.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.minuteOfHour();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDayOfWeek(5);
        int int30 = localDateTime24.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = dateTime20.getEra();
        int int35 = property12.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = dateTime20.minusMillis(999);
        int int38 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology43);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology43.year();
        org.joda.time.DurationField durationField50 = gJChronology43.centuries();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime0.toMutableDateTime((org.joda.time.Chronology) gJChronology43);
        mutableDateTime51.addSeconds(1969);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime20", (dateTime0.compareTo(dateTime20) == 0) == dateTime0.equals(dateTime20));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0541");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.minutes();
        org.joda.time.DurationField durationField10 = gJChronology3.minutes();
        org.joda.time.DurationField durationField11 = gJChronology3.days();
        java.lang.String str12 = durationField11.toString();
        long long14 = durationField11.getMillis(26336188);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DurationField durationField20 = gJChronology18.hours();
        java.lang.String str21 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.clockhourOfDay();
        java.lang.String str24 = gJChronology18.toString();
        org.joda.time.DurationField durationField25 = gJChronology18.eras();
        int int26 = durationField11.compareTo(durationField25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField5, and durationField6", !(durationField25.compareTo(durationField5) == 0) || (Math.signum(durationField25.compareTo(durationField6)) == Math.signum(durationField5.compareTo(durationField6))));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        boolean boolean21 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeekyears(26164);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        long long33 = gJChronology27.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        java.util.Locale locale37 = dateTimeFormatter36.getLocale();
        boolean boolean38 = gJChronology27.equals((java.lang.Object) dateTimeFormatter36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str40 = dateTimeZone39.getID();
        boolean boolean41 = dateTimeZone39.isFixed();
        long long43 = dateTimeZone39.convertUTCToLocal((long) (byte) 0);
        int int45 = dateTimeZone39.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime50 = property49.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusHours(10);
        boolean boolean56 = dateTimeZone39.equals((java.lang.Object) localDateTime55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter36.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime19.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.DateTime dateTime60 = dateTime14.withZone(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime17", (dateTime5.compareTo(mutableDateTime17) == 0) == dateTime5.equals(mutableDateTime17));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0543");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        boolean boolean6 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime1.addMillis(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.monthOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology12);
        mutableDateTime18.addMinutes(9);
        mutableDateTime18.addMonths(26181);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(27);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        int int27 = mutableDateTime25.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and dateTime17", (mutableDateTime4.compareTo(dateTime17) == 0) == mutableDateTime4.equals(dateTime17));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0544");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime3.copy();
        mutableDateTime20.addDays(44264689);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0545");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        java.util.Locale locale18 = java.util.Locale.PRC;
        int int19 = dateTimeField5.getMaximumTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds(26147);
        int int31 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDateTime localDateTime34 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        boolean boolean41 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology53.getZone();
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = mutableDateTime60.toDateTimeISO();
        org.joda.time.DateTime.Property property62 = dateTime61.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime65 = dateTime61.withPeriodAdded(readablePeriod63, 0);
        int int66 = dateTime61.getSecondOfDay();
        org.joda.time.DateTime.Property property67 = dateTime61.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70, (int) (short) 1);
        java.lang.String str73 = gJChronology72.toString();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.era();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology72.minuteOfDay();
        org.joda.time.DurationField durationField77 = gJChronology72.seconds();
        boolean boolean78 = dateTimeZone57.equals((java.lang.Object) gJChronology72);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology72.yearOfEra();
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = dateTimeField79.getAsText((int) 'x', locale81);
        java.lang.String str85 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, 26168, locale81);
        java.lang.String str86 = locale81.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime47 and localDateTime48", (localDateTime47.compareTo(localDateTime48) == 0) == localDateTime47.equals(localDateTime48));
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        java.lang.String str11 = dateTime8.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField18 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.weekyearOfCentury();
        long long24 = gJChronology15.add(120L, (long) 70, 26149);
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime27 = dateTime8.minusMonths(244);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime17", (mutableDateTime1.compareTo(dateTime17) == 0) == mutableDateTime1.equals(dateTime17));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0547");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField12 = gJChronology4.seconds();
        org.joda.time.DurationField durationField13 = gJChronology4.weekyears();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField15 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField10, and durationField12", !(durationField15.compareTo(durationField10) == 0) || (Math.signum(durationField15.compareTo(durationField12)) == Math.signum(durationField10.compareTo(durationField12))));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0548");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        mutableDateTime3.setZone(dateTimeZone6);
        int int10 = mutableDateTime3.getHourOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfMinute();
        java.lang.String str12 = property11.getName();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfFloor();
        mutableDateTime13.addSeconds(26273);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        org.joda.time.DateTime dateTime27 = dateTime22.withSecondOfMinute((int) '#');
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = dateTime27.isBefore(readableInstant28);
        boolean boolean30 = dateTime27.isAfterNow();
        org.joda.time.LocalDateTime localDateTime31 = dateTime27.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = dateTime27.toLocalDateTime();
        boolean boolean33 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0549");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTime.Property property16 = dateTime5.year();
        org.joda.time.DateTime.Property property17 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        mutableDateTime22.setDate((org.joda.time.ReadableInstant) dateTime27);
        mutableDateTime22.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime22.era();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        java.util.Date date38 = mutableDateTime37.toDate();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter46.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter47.withPivotYear((java.lang.Integer) 26149);
        int int50 = dateTimeFormatter47.getDefaultYear();
        int int51 = dateTimeFormatter47.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter47.withDefaultYear(8);
        boolean boolean54 = dateTime43.equals((java.lang.Object) dateTimeFormatter47);
        mutableDateTime37.setDate((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime43.minus(readablePeriod56);
        boolean boolean58 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime20", (dateTime18.compareTo(mutableDateTime20) == 0) == dateTime18.equals(mutableDateTime20));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0550");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType3.getField((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DurationField durationField13 = gJChronology7.hours();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(26153);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.era();
        boolean boolean31 = mutableDateTime26.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        int int32 = property24.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = mutableDateTime35.toDateTimeISO();
        org.joda.time.DateTime.Property property37 = dateTime36.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.withPeriodAdded(readablePeriod38, 0);
        int int41 = dateTime36.getSecondOfDay();
        org.joda.time.DateTime.Property property42 = dateTime36.minuteOfHour();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = locale43.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime47 = property24.setCopy("26", locale43);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.year();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = property48.setCopy(382);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54, (int) (short) 1);
        java.lang.String str57 = gJChronology56.toString();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology56);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology56.getZone();
        org.joda.time.Chronology chronology60 = gJChronology56.withUTC();
        org.joda.time.DurationField durationField61 = gJChronology56.halfdays();
        boolean boolean62 = localDateTime51.equals((java.lang.Object) durationField61);
        int[] intArray63 = localDateTime51.getValues();
        int[] intArray65 = dateTimeField2.add((org.joda.time.ReadablePartial) localDateTime14, 393, intArray63, (-299));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime26", (mutableDateTime1.compareTo(mutableDateTime26) == 0) == mutableDateTime1.equals(mutableDateTime26));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0551");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDateTime localDateTime14 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = localDateTime18.get(dateTimeFieldType19);
        boolean boolean21 = localDateTime16.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.dayOfYear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minus(readableDuration30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime28 and localDateTime27", (localDateTime28.compareTo(localDateTime27) == 0) == localDateTime28.equals(localDateTime27));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0552");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType6.getField((org.joda.time.Chronology) gJChronology10);
        boolean boolean16 = dateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime dateTime17 = dateTime2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.monthOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.DateTime dateTime31 = property29.addToCopy(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        org.joda.time.DateTime dateTime35 = dateTime31.withFieldAdded(durationFieldType33, 0);
        org.joda.time.DateTime dateTime37 = dateTime2.withFieldAdded(durationFieldType33, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime26", (mutableDateTime1.compareTo(dateTime26) == 0) == mutableDateTime1.equals(dateTime26));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withYear(192);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withPeriodAdded(readablePeriod32, 0);
        int int35 = dateTime30.getSecondOfDay();
        org.joda.time.DateTime.Property property36 = dateTime30.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.era();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField46 = gJChronology41.seconds();
        boolean boolean47 = dateTimeZone26.equals((java.lang.Object) gJChronology41);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale50);
        java.lang.String str54 = nameProvider49.getName(locale50, "secondOfMinute", "Etc/UTC");
        java.lang.String str55 = locale50.getDisplayLanguage();
        int int56 = dateTimeField48.getMaximumShortTextLength(locale50);
        java.lang.String str57 = locale50.getScript();
        java.lang.String str58 = locale50.getVariant();
        boolean boolean59 = property18.equals((java.lang.Object) str58);
        org.joda.time.DateTime dateTime60 = property18.roundHalfEvenCopy();
        boolean boolean61 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime29", (dateTime5.compareTo(mutableDateTime29) == 0) == dateTime5.equals(mutableDateTime29));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0554");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.eras();
        org.joda.time.DurationField durationField8 = gJChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField8, and durationField7", !(durationField7.compareTo(durationField8) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField8.compareTo(durationField7))));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0555");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundFloor();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks(26152);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusDays((int) (short) -1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        java.util.Date date32 = localDateTime29.toDate();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withPeriodAdded(readablePeriod33, (int) (byte) -1);
        java.lang.Object obj36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withField(dateTimeFieldType39, 523);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.halfdayOfDay();
        org.joda.time.DurationField durationField49 = gJChronology46.years();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType39.getField((org.joda.time.Chronology) gJChronology46);
        int int51 = dateTime20.get(dateTimeFieldType39);
        int int52 = mutableDateTime8.get(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0556");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 9);
        org.joda.time.DateTime dateTime15 = dateTime10.withCenturyOfEra(26302);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime10, (org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField53 = gJChronology48.seconds();
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) gJChronology48);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.era();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology57 = gJChronology48.withZone(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime25.toMutableDateTime(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime36", (dateTime8.compareTo(mutableDateTime36) == 0) == dateTime8.equals(mutableDateTime36));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0557");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        boolean boolean6 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        boolean boolean17 = localDateTime7.equals((java.lang.Object) property15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology22.era();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = gJChronology22.add(readablePeriod28, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology22.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType18.getField((org.joda.time.Chronology) gJChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime0 and localDateTime34", (localDateTime0.compareTo(localDateTime34) == 0) == localDateTime0.equals(localDateTime34));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.yearOfCentury();
        org.joda.time.DurationField durationField16 = gJChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.monthOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.dayOfWeek();
        org.joda.time.DurationField durationField27 = gJChronology21.halfdays();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime31.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        boolean boolean47 = dateTimeZone44.isStandardOffset(2L);
        mutableDateTime31.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology49 = gJChronology21.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology50 = gJChronology12.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology52 = gJChronology3.withZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and mutableDateTime51", (mutableDateTime29.compareTo(mutableDateTime51) == 0) == mutableDateTime29.equals(mutableDateTime51));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0559");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.centuryOfEra();
        java.lang.String str2 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays(26249);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = mutableDateTime6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        org.joda.time.DateTime dateTime13 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.Chronology chronology24 = gJChronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology17.getZone();
        org.joda.time.DateTime dateTime26 = dateTime12.withZone(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime22", (mutableDateTime6.compareTo(dateTime22) == 0) == mutableDateTime6.equals(dateTime22));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0560");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.withWeekyear(26153);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withPeriodAdded(readablePeriod24, 0);
        int int27 = dateTime22.getSecondOfDay();
        org.joda.time.DateTime.Property property28 = dateTime22.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime30 = dateTime2.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Instant instant31 = dateTime30.toInstant();
        org.joda.time.Instant instant33 = instant31.withMillis(826129497600000L);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant31", (dateTime30.compareTo(instant31) == 0) == dateTime30.equals(instant31));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0561");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology7.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.withPeriodAdded(readablePeriod17, 0);
        int int20 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime.Property property21 = dateTime15.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime23 = dateTime3.withZoneRetainFields(dateTimeZone11);
        org.joda.time.Instant instant24 = dateTime3.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime3", (mutableDateTime14.compareTo(dateTime3) == 0) == mutableDateTime14.equals(dateTime3));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0562");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = mutableDateTime4.toDateTimeISO();
        boolean boolean6 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = gJChronology12.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = chronology25.halfdays();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime2.toMutableDateTime(chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 671, chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and mutableDateTime27", (mutableDateTime2.compareTo(mutableDateTime27) == 0) == mutableDateTime2.equals(mutableDateTime27));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0563");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        java.lang.String str23 = dateTimeField21.toString();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = localDateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeZone38.getShortName((long) 2022, locale40);
        java.lang.String str42 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 295, locale40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime44.toDateTimeISO();
        org.joda.time.DateTime.Property property46 = dateTime45.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime45.withPeriodAdded(readablePeriod47, 0);
        org.joda.time.DateTime.Property property50 = dateTime49.hourOfDay();
        org.joda.time.Chronology chronology51 = dateTime49.getChronology();
        org.joda.time.DateTime dateTime53 = dateTime49.withMinuteOfHour(0);
        boolean boolean54 = dateTime53.isEqualNow();
        org.joda.time.DateTime dateTime57 = dateTime53.withDurationAdded((long) 2000, 26148);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime61.toDateTimeISO();
        int int63 = mutableDateTime59.compareTo((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = mutableDateTime65.toDateTimeISO();
        org.joda.time.DateTime.Property property67 = dateTime66.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.DateTime dateTime70 = dateTime66.withPeriodAdded(readablePeriod68, 0);
        int int71 = dateTime66.getSecondOfDay();
        mutableDateTime61.setDate((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime74 = dateTime66.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMillis(100);
        boolean boolean77 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime78 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79, readableInstant80, (int) (short) 1);
        java.lang.String str83 = gJChronology82.toString();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology82.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology82.era();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology82.minuteOfDay();
        org.joda.time.DurationField durationField87 = gJChronology82.seconds();
        org.joda.time.DurationFieldType durationFieldType88 = durationField87.getType();
        java.lang.String str89 = durationFieldType88.toString();
        boolean boolean90 = localDateTime36.isSupported(durationFieldType88);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime13.withFieldAdded(durationFieldType88, 228);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime13 and localDateTime24", (localDateTime13.compareTo(localDateTime24) == 0) == localDateTime13.equals(localDateTime24));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0564");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) 995);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        java.lang.String str22 = dateTimeZone21.getID();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.monthOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        int int34 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = instant33.plus((long) 2000);
        org.joda.time.Instant instant38 = instant33.withMillis(825908572826157L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime43 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime45 = property42.addToCopy((long) 2);
        boolean boolean46 = instant38.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType47.getField((org.joda.time.Chronology) gJChronology52);
        int int61 = instant38.get(dateTimeFieldType47);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType47.getRangeDurationType();
        boolean boolean63 = dateTime11.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime40", (dateTime5.compareTo(mutableDateTime40) == 0) == dateTime5.equals(mutableDateTime40));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0565");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime21", (dateTime9.compareTo(dateTime21) == 0) == dateTime9.equals(dateTime21));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0566");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime3.add(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime3.property(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime3.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        java.lang.String str52 = gJChronology51.toString();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology51);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime53.getZone();
        org.joda.time.DateTime dateTime58 = dateTime53.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property59 = dateTime53.centuryOfEra();
        org.joda.time.DateTime dateTime60 = property59.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime65 = property64.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.hourOfDay();
        boolean boolean67 = property66.isLeap();
        org.joda.time.LocalDateTime localDateTime68 = property66.getLocalDateTime();
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = locale69.getDisplayScript();
        java.lang.String str72 = property66.getAsShortText(locale69);
        java.lang.String str73 = property59.getAsText(locale69);
        java.lang.String str74 = locale69.getISO3Country();
        java.lang.String str75 = dateTimeZone45.getName(35L, locale69);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and dateTime53", (mutableDateTime27.compareTo(dateTime53) == 0) == mutableDateTime27.equals(dateTime53));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusWeeks(26152);
        java.util.Date date28 = dateTime24.toDate();
        org.joda.time.Chronology chronology29 = dateTime24.getChronology();
        org.joda.time.Chronology chronology30 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        int int32 = dateTime9.get(dateTimeField31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfMinute();
        long long14 = dateTimeField12.roundHalfEven(3903232621682L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.era();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology18.add(readablePeriod24, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        boolean boolean37 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        int[] intArray53 = localDateTime50.getValues();
        int int54 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = mutableDateTime58.toDateTimeISO();
        int int60 = mutableDateTime56.compareTo((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = mutableDateTime62.toDateTimeISO();
        org.joda.time.DateTime.Property property64 = dateTime63.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.withPeriodAdded(readablePeriod65, 0);
        int int68 = dateTime63.getSecondOfDay();
        mutableDateTime58.setDate((org.joda.time.ReadableInstant) dateTime63);
        mutableDateTime58.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime58.era();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        int int78 = mutableDateTime74.compareTo((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = mutableDateTime80.toDateTimeISO();
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withPeriodAdded(readablePeriod83, 0);
        int int86 = dateTime81.getSecondOfDay();
        mutableDateTime76.setDate((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime76.setMillisOfDay((int) 'a');
        boolean boolean90 = mutableDateTime58.isAfter((org.joda.time.ReadableInstant) mutableDateTime76);
        mutableDateTime76.setDayOfYear((int) (short) 10);
        int int93 = mutableDateTime76.getWeekOfWeekyear();
        org.joda.time.Instant instant94 = mutableDateTime76.toInstant();
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime76.yearOfEra();
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime76.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime97 = property96.roundHalfEven();
        org.joda.time.DateTime dateTime98 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) mutableDateTime97);
        org.joda.time.DateTime dateTime99 = dateTime98.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime31", (localDateTime30.compareTo(localDateTime31) == 0) == localDateTime30.equals(localDateTime31));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0569");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        long long10 = property9.remainder();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType12.getField((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DurationField durationField22 = gJChronology16.hours();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(26190);
        java.lang.String str27 = localDateTime25.toString("192");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime25.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        long long41 = dateTimeZone37.convertLocalToUTC((long) 1, false);
        long long43 = dateTimeZone37.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays(44344426);
        int int47 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = mutableDateTime58.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime59.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.withPeriodAdded(readablePeriod61, 0);
        int int64 = dateTime59.getSecondOfDay();
        org.joda.time.DateTime.Property property65 = dateTime59.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68, (int) (short) 1);
        java.lang.String str71 = gJChronology70.toString();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.era();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology70.minuteOfDay();
        org.joda.time.DurationField durationField75 = gJChronology70.seconds();
        boolean boolean76 = dateTimeZone55.equals((java.lang.Object) gJChronology70);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology70.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        boolean boolean80 = localDateTime78.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekyear();
        int int83 = localDateTime81.get(dateTimeFieldType82);
        boolean boolean84 = localDateTime79.isAfter((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime81.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.minusMinutes(20);
        int[] intArray97 = new int[] { '4', 8, 26148, '#' };
        int int98 = dateTimeField77.getMaximumValue((org.joda.time.ReadablePartial) localDateTime90, intArray97);
        int int99 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime25, intArray97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime23 and localDateTime78", (localDateTime23.compareTo(localDateTime78) == 0) == localDateTime23.equals(localDateTime78));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0570");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        int int10 = mutableDateTime3.getMinuteOfHour();
        int int11 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfDay();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField20 = gJChronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField21.getType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.yearOfCentury();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.Instant instant34 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.monthOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = gJChronology41.add(readablePeriod46, 1645514151595L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = property54.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = property56.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology63.getZone();
        org.joda.time.Chronology chronology68 = gJChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology63.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField75 = gJChronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType70.getField((org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale83 = java.util.Locale.PRC;
        java.lang.String str84 = dateTimeZone81.getShortName((long) 2022, locale83);
        java.lang.String str85 = locale83.getScript();
        java.lang.String str86 = dateTimeField79.getAsText((int) '4', locale83);
        java.lang.String str87 = locale83.getISO3Language();
        int int88 = dateTimeField69.getMaximumShortTextLength(locale83);
        java.lang.String str89 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localDateTime58, 26222, locale83);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.centuryOfEra();
        java.lang.String str92 = property91.getAsText();
        org.joda.time.LocalDateTime localDateTime94 = property91.setCopy(26164);
        java.util.Date date95 = localDateTime94.toDate();
        int[] intArray96 = localDateTime94.getValues();
        gJChronology27.validate((org.joda.time.ReadablePartial) localDateTime58, intArray96);
        org.joda.time.DateTimeField dateTimeField98 = dateTimeFieldType22.getField((org.joda.time.Chronology) gJChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime33", (mutableDateTime1.compareTo(dateTime33) == 0) == mutableDateTime1.equals(dateTime33));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0571");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property2 = dateTime1.centuryOfEra();
        long long3 = property2.remainder();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withPeriodAdded(readablePeriod8, 0);
        int int11 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime.Property property12 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime6.withWeekyear(26153);
        long long15 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        java.lang.String str20 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.monthOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology19.add(readablePeriod24, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology28 = gJChronology19.withUTC();
        long long32 = gJChronology19.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology33 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology19.millisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime6.withChronology((org.joda.time.Chronology) gJChronology19);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = gJChronology19.add(readablePeriod36, 36000000L, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime35", (mutableDateTime5.compareTo(dateTime35) == 0) == mutableDateTime5.equals(dateTime35));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0572");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.Instant instant10 = instant7.minus((-1L));
        org.joda.time.Instant instant12 = instant7.plus(1645514158018L);
        org.joda.time.DateTime dateTime13 = instant7.toDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, 26407);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0573");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("26168");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        java.lang.String str10 = dateTimeZone9.getID();
        long long13 = dateTimeZone9.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        int int22 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) instant21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.getID();
        boolean boolean28 = dateTimeZone26.isFixed();
        long long30 = dateTimeZone26.convertUTCToLocal((long) (byte) 0);
        int int32 = dateTimeZone26.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone26);
        int int34 = localDateTime33.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withField(dateTimeFieldType35, (int) (short) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear(297);
        int int41 = localDateTime37.getCenturyOfEra();
        int[] intArray43 = gJChronology23.get((org.joda.time.ReadablePartial) localDateTime37, (long) 999);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, (org.joda.time.Chronology) gJChronology23);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMinutes((-292269055));
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.yearOfEra();
        org.joda.time.DurationField durationField53 = gJChronology50.halfdays();
        org.joda.time.DurationField durationField54 = gJChronology50.centuries();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology50.dayOfMonth();
        org.joda.time.DurationField durationField56 = gJChronology50.hours();
        org.joda.time.DurationFieldType durationFieldType57 = durationField56.getType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime46.withFieldAdded(durationFieldType57, 26352);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61, (int) (short) 1);
        java.lang.String str64 = gJChronology63.toString();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology63);
        org.joda.time.DurationField durationField66 = gJChronology63.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.era();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology63.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology63.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology63.era();
        org.joda.time.DurationField durationField73 = durationFieldType57.getField((org.joda.time.Chronology) gJChronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and dateTime65", (dateTime24.compareTo(dateTime65) == 0) == dateTime24.equals(dateTime65));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.Instant instant13 = gJChronology9.getGregorianCutover();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        int int18 = mutableDateTime5.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(391);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = property19.getAsShortText(locale22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField53 = gJChronology48.seconds();
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) gJChronology48);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology48.millisOfSecond();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DateTime dateTime60 = dateTime58.minusYears((-292275054));
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime58.toYearMonthDay();
        long long62 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime36", (dateTime14.compareTo(mutableDateTime36) == 0) == dateTime14.equals(mutableDateTime36));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0575");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.centuryOfEra();
        org.joda.time.DurationField durationField19 = durationFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.year();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime6, (org.joda.time.Chronology) gJChronology11);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime6.plus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime22", (dateTime5.compareTo(mutableDateTime22) == 0) == dateTime5.equals(mutableDateTime22));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        long long22 = gJChronology18.set((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DurationField durationField23 = gJChronology18.months();
        org.joda.time.DurationField durationField24 = gJChronology18.weekyears();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology18.add(readablePeriod25, (long) 144, 883);
        org.joda.time.DurationField durationField29 = gJChronology18.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField23, and durationField24", !(durationField29.compareTo(durationField23) == 0) || (Math.signum(durationField29.compareTo(durationField24)) == Math.signum(durationField23.compareTo(durationField24))));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        boolean boolean21 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        boolean boolean23 = mutableDateTime17.isEqual((long) 7);
        mutableDateTime17.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField((org.joda.time.Chronology) gJChronology30);
        mutableDateTime17.setChronology((org.joda.time.Chronology) gJChronology30);
        mutableDateTime17.addMonths((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime17.property(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.era();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = gJChronology42.seconds();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology42.centuryOfEra();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime17, (org.joda.time.Chronology) gJChronology42);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime15.toMutableDateTime((org.joda.time.Chronology) gJChronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime19", (dateTime5.compareTo(mutableDateTime19) == 0) == dateTime5.equals(mutableDateTime19));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        int int18 = dateTimeField16.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale17.getDisplayScript();
        java.lang.String str20 = dateTimeField8.getAsShortText(28464393600117L, locale17);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone25);
        int int29 = dateTimeZone25.getOffsetFromLocal((-76088L));
        long long32 = dateTimeZone25.convertLocalToUTC((long) 26266, true);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) 28464393600117L, dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime26", (dateTime5.compareTo(mutableDateTime26) == 0) == dateTime5.equals(mutableDateTime26));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime11", (dateTime9.compareTo(mutableDateTime11) == 0) == dateTime9.equals(mutableDateTime11));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0580");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime30 = dateTime20.withDayOfMonth(7);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        java.lang.String str35 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DurationField durationField37 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = gJChronology34.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = gJChronology34.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = property51.getLocalDateTime();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, locale53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusYears((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        boolean boolean59 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        int int62 = localDateTime60.get(dateTimeFieldType61);
        boolean boolean63 = localDateTime58.isAfter((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withDurationAdded(readableDuration74, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.dayOfMonth();
        org.joda.time.LocalDateTime.Property property78 = localDateTime76.millisOfSecond();
        int[] intArray79 = localDateTime76.getValues();
        gJChronology34.validate((org.joda.time.ReadablePartial) localDateTime56, intArray79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime20, (org.joda.time.Chronology) gJChronology34);
        org.joda.time.DurationField durationField82 = gJChronology34.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime81", (mutableDateTime19.compareTo(dateTime81) == 0) == mutableDateTime19.equals(dateTime81));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime3.add(readablePeriod18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology24.getZone();
        java.lang.String str28 = dateTimeZone26.getName((long) 26155);
        org.joda.time.Chronology chronology29 = gJChronology20.withZone(dateTimeZone26);
        long long31 = dateTimeZone26.previousTransition((long) 26167);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = dateTimeZone26.getShortName(5L, locale35);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime3.toMutableDateTime(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime3.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime37", (mutableDateTime1.compareTo(mutableDateTime37) == 0) == mutableDateTime1.equals(mutableDateTime37));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        long long13 = dateTimeZone7.previousTransition((long) 5);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        long long17 = dateTimeZone7.convertLocalToUTC((long) 26178, false);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.withYear(26163);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis(26170);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis(26195);
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays((-6));
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime23", (mutableDateTime14.compareTo(dateTime23) == 0) == mutableDateTime14.equals(dateTime23));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0583");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        int int9 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfDay(26147);
        int int17 = localDateTime16.getYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(9);
        int int20 = localDateTime19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType21.getField((org.joda.time.Chronology) gJChronology25);
        org.joda.time.DurationField durationField31 = gJChronology25.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(26153);
        int int35 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis(26250);
        int int38 = localDateTime34.getDayOfMonth();
        int int39 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime0 and localDateTime32", (localDateTime0.compareTo(localDateTime32) == 0) == localDateTime0.equals(localDateTime32));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.weekyear();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField6, and durationField8", !(durationField10.compareTo(durationField6) == 0) || (Math.signum(durationField10.compareTo(durationField8)) == Math.signum(durationField6.compareTo(durationField8))));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight19 = dateTime11.toDateMidnight();
        org.joda.time.DateTime dateTime21 = dateTime11.plusMonths(5);
        org.joda.time.DateTime.Property property22 = dateTime11.dayOfYear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(437);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str28 = dateTimeZone27.getID();
        java.lang.String str29 = dateTimeZone27.getID();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        org.joda.time.DateTime dateTime40 = dateTime35.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property41 = dateTime35.centuryOfEra();
        org.joda.time.DateTime dateTime42 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        boolean boolean45 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime47 = property46.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        boolean boolean49 = property48.isLeap();
        org.joda.time.LocalDateTime localDateTime50 = property48.getLocalDateTime();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = locale51.getDisplayScript();
        java.lang.String str54 = property48.getAsShortText(locale51);
        java.lang.String str55 = property41.getAsText(locale51);
        org.joda.time.DateTime dateTime57 = property41.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime57.toMutableDateTime();
        mutableDateTime58.addSeconds(26176);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.yearOfCentury();
        org.joda.time.DurationField durationField68 = gJChronology64.days();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology64.centuryOfEra();
        mutableDateTime58.setRounding(dateTimeField70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime58.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        boolean boolean74 = dateTimeField73.isLenient();
        boolean boolean75 = dateTimeZone27.equals((java.lang.Object) dateTimeField73);
        org.joda.time.DateTime dateTime76 = dateTime26.toDateTime(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight19 and dateTime37", (dateMidnight19.compareTo(dateTime37) == 0) == dateMidnight19.equals(dateTime37));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0586");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 26245, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        mutableDateTime22.setDate((org.joda.time.ReadableInstant) dateTime27);
        mutableDateTime22.setMillisOfDay((int) 'a');
        mutableDateTime22.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime22.add(readableDuration38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTimeISO();
        int int43 = dateTime42.getYearOfEra();
        boolean boolean44 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) dateTime42);
        java.util.GregorianCalendar gregorianCalendar45 = mutableDateTime22.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plus(readableDuration48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withWeekyear(38090);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMonths((-26165));
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 28, locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime20", (mutableDateTime11.compareTo(mutableDateTime20) == 0) == mutableDateTime11.equals(mutableDateTime20));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0587");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths((int) (short) 100);
        int int27 = dateTime26.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime24", (dateTime10.compareTo(dateTime24) == 0) == dateTime10.equals(dateTime24));
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0588");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime16 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(26267);
        org.joda.time.LocalTime localTime21 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.plusMonths(292278993);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds(26189);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology31.getZone();
        org.joda.time.DurationField durationField34 = gJChronology31.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.dayOfWeek();
        long long39 = gJChronology31.add((-166150900L), (long) 26160, 4);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology31.year();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.millisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime27.toDateTime((org.joda.time.Chronology) gJChronology31);
        boolean boolean43 = localTime21.equals((java.lang.Object) gJChronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime42", (dateTime27.compareTo(dateTime42) == 0) == dateTime27.equals(dateTime42));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0589");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = property8.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale16);
        java.lang.String str20 = nameProvider15.getName(locale16, "secondOfMinute", "Etc/UTC");
        java.lang.String str21 = locale16.getDisplayLanguage();
        java.lang.String str22 = locale12.getDisplayVariant(locale16);
        java.lang.String str23 = locale9.getDisplayScript(locale12);
        java.util.Locale.setDefault(locale12);
        java.util.Set<java.lang.String> strSet25 = locale12.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray26 = strSet25.toArray();
        java.lang.String[] strArray41 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        int int44 = strSet42.size();
        java.lang.String[] strArray59 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        int int62 = strSet60.size();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        java.lang.String str67 = gJChronology66.toString();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology66);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        boolean boolean71 = localDateTime69.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyear();
        int int74 = localDateTime72.get(dateTimeFieldType73);
        boolean boolean75 = localDateTime70.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.withDayOfWeek(5);
        int int78 = localDateTime72.getYear();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime72.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime81 = dateTime68.withFields((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTime.Property property82 = dateTime68.yearOfCentury();
        java.lang.String str83 = property82.getName();
        boolean boolean84 = strSet60.contains((java.lang.Object) property82);
        boolean boolean85 = strSet42.addAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator88 = strSet87.spliterator();
        java.lang.Object[] objArray89 = strSet87.toArray();
        boolean boolean90 = strSet60.addAll((java.util.Collection<java.lang.String>) strSet87);
        boolean boolean91 = strSet25.retainAll((java.util.Collection<java.lang.String>) strSet60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime68", (mutableDateTime1.compareTo(dateTime68) == 0) == mutableDateTime1.equals(dateTime68));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DurationField durationField9 = gJChronology3.years();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.joda.time.DurationField durationField11 = gJChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField10", Math.signum(durationField9.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField9)));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        java.lang.String str6 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        java.lang.String str9 = gJChronology3.toString();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.joda.time.DurationField durationField11 = gJChronology3.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField10", Math.signum(durationField5.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField5)));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0593");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime19.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.secondOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime19.add(readableDuration23, 253);
        int int26 = property14.getDifference((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime16", (dateTime13.compareTo(mutableDateTime16) == 0) == dateTime13.equals(mutableDateTime16));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0594");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Chronology chronology30 = gJChronology17.withZone(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter11.withZone(dateTimeZone29);
        boolean boolean36 = gJChronology3.equals((java.lang.Object) dateTimeZone29);
        java.lang.String str37 = dateTimeZone29.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = mutableDateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.withPeriodAdded(readablePeriod42, 0);
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime44.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        long long58 = gJChronology52.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long62 = gJChronology52.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField63 = gJChronology52.days();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime48.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        java.lang.String str69 = gJChronology68.toString();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.era();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology68.millisOfSecond();
        org.joda.time.DurationField durationField73 = gJChronology68.years();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology68);
        boolean boolean75 = dateTime48.isAfter((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) mutableDateTime74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and mutableDateTime64", (dateTime48.compareTo(mutableDateTime64) == 0) == dateTime48.equals(mutableDateTime64));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0595");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField5 = gJChronology0.weekyears();
        org.joda.time.DurationField durationField6 = gJChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.minuteOfHour();
        org.joda.time.DurationField durationField14 = gJChronology10.years();
        org.joda.time.DurationField durationField15 = gJChronology10.hours();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.secondOfMinute();
        boolean boolean17 = gJChronology0.equals((java.lang.Object) gJChronology10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField6", (durationField5.compareTo(durationField6) == 0) == durationField5.equals(durationField6));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField9 = gJChronology3.hours();
        org.joda.time.DurationField durationField10 = gJChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime16.getZone();
        int int21 = dateTimeZone19.getOffset((long) 26173);
        org.joda.time.Chronology chronology22 = gJChronology3.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        int int29 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        int int37 = dateTime32.getSecondOfDay();
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) dateTime32);
        mutableDateTime27.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.era();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = mutableDateTime45.toDateTimeISO();
        int int47 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = mutableDateTime49.toDateTimeISO();
        org.joda.time.DateTime.Property property51 = dateTime50.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.withPeriodAdded(readablePeriod52, 0);
        int int55 = dateTime50.getSecondOfDay();
        mutableDateTime45.setDate((org.joda.time.ReadableInstant) dateTime50);
        mutableDateTime45.setMillisOfDay((int) 'a');
        boolean boolean59 = mutableDateTime27.isAfter((org.joda.time.ReadableInstant) mutableDateTime45);
        mutableDateTime45.setDayOfYear((int) (short) 10);
        mutableDateTime45.addSeconds(764);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65, (int) (short) 1);
        java.lang.String str68 = gJChronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        boolean boolean72 = localDateTime70.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyear();
        int int75 = localDateTime73.get(dateTimeFieldType74);
        boolean boolean76 = localDateTime71.isAfter((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime73.minusSeconds(0);
        int int81 = dateTimeField69.getMaximumValue((org.joda.time.ReadablePartial) localDateTime80);
        java.util.Locale locale82 = java.util.Locale.PRC;
        int int83 = dateTimeField69.getMaximumTextLength(locale82);
        java.lang.String str84 = locale82.getVariant();
        java.util.Set<java.lang.Character> charSet85 = locale82.getExtensionKeys();
        java.util.Calendar calendar86 = mutableDateTime45.toCalendar(locale82);
        java.lang.String str87 = dateTimeZone19.getName((long) 26458666, locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime25", (dateTime16.compareTo(mutableDateTime25) == 0) == dateTime16.equals(mutableDateTime25));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0597");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514159154L);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime((org.joda.time.Chronology) gJChronology2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime1.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        int int10 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.withPeriodAdded(readablePeriod15, 0);
        int int18 = dateTime13.getSecondOfDay();
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime21 = dateTime13.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis(100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(53);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology33.getZone();
        java.lang.String str37 = dateTimeZone35.getName((long) 26155);
        org.joda.time.Chronology chronology38 = gJChronology29.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField39 = gJChronology29.millis();
        org.joda.time.DateTime dateTime40 = dateTime27.toDateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime1, (org.joda.time.Chronology) gJChronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime40", (dateTime27.compareTo(dateTime40) == 0) == dateTime27.equals(dateTime40));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0598");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withOffsetParsed();
        java.util.Locale locale42 = dateTimeFormatter41.getLocale();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology47);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        org.joda.time.Chronology chronology60 = gJChronology47.withZone(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter41.withZone(dateTimeZone59);
        boolean boolean66 = gJChronology33.equals((java.lang.Object) dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology33.millisOfDay();
        org.joda.time.DurationField durationField71 = gJChronology33.weekyears();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime29.toMutableDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology33.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime72", (mutableDateTime10.compareTo(mutableDateTime72) == 0) == mutableDateTime10.equals(mutableDateTime72));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0599");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime3.getZone();
        int int11 = mutableDateTime3.getSecondOfDay();
        mutableDateTime3.addYears(26156);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.era();
        boolean boolean35 = mutableDateTime30.isEqual((org.joda.time.ReadableInstant) mutableDateTime33);
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = mutableDateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime44 = dateTime40.withPeriodAdded(readablePeriod42, 0);
        int int45 = dateTime40.getSecondOfDay();
        org.joda.time.DateTime.Property property46 = dateTime40.minuteOfHour();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = property46.getAsText(locale47);
        java.lang.String str50 = locale47.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime51 = property28.setCopy("26", locale47);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusDays(26158);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plus(readablePeriod55);
        long long58 = gJChronology17.set((org.joda.time.ReadablePartial) localDateTime56, (long) 18000100);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology17.hourOfDay();
        org.joda.time.DateTime dateTime60 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology17.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime60", (mutableDateTime3.compareTo(dateTime60) == 0) == mutableDateTime3.equals(dateTime60));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = dateTime10.isBefore(readableInstant11);
        boolean boolean13 = dateTime10.isAfterNow();
        org.joda.time.LocalDateTime localDateTime14 = dateTime10.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays((int) (short) -1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfDay(26160);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology29.getZone();
        org.joda.time.DurationField durationField32 = gJChronology29.eras();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.weekOfWeekyear();
        boolean boolean34 = localDateTime14.equals((java.lang.Object) dateTimeField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime24 and localDateTime25", (localDateTime24.compareTo(localDateTime25) == 0) == localDateTime24.equals(localDateTime25));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0601");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.weekOfWeekyear();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfDay(0);
        org.joda.time.DateTime dateTime28 = dateTime26.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, 26148);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusDays((int) (short) -1);
        java.lang.String str38 = localDateTime37.toString();
        org.joda.time.Chronology chronology39 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime28.toDateTime(chronology39);
        int int41 = property17.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime43 = property17.setCopy(26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime40", (dateTime28.compareTo(dateTime40) == 0) == dateTime28.equals(dateTime40));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = gJChronology18.withZone(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime24", (dateTime10.compareTo(dateTime24) == 0) == dateTime10.equals(dateTime24));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0603");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTime.Property property19 = dateTime5.yearOfCentury();
        java.lang.String str20 = property19.getName();
        org.joda.time.DateTime dateTime22 = property19.addToCopy(26197998);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        int int28 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setSecondOfDay(59);
        mutableDateTime26.addMonths(26149);
        int int33 = mutableDateTime26.getMinuteOfHour();
        int int34 = property19.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        java.lang.String str35 = property19.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime24", (dateTime5.compareTo(mutableDateTime24) == 0) == dateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        long long12 = gJChronology3.add(120L, (long) 70, 26149);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        int int14 = mutableDateTime13.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology18.getZone();
        org.joda.time.DurationField durationField21 = gJChronology18.weekyears();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime28 = dateTime25.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMinutes(13);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(26318);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) dateTime31);
        mutableDateTime13.setZone(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime24", (dateTime5.compareTo(mutableDateTime24) == 0) == dateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0605");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) (-1), true, (long) (short) 10);
        org.joda.time.Chronology chronology15 = gJChronology3.withZone(dateTimeZone10);
        java.lang.String str16 = gJChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        boolean boolean29 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDayOfWeek(5);
        int int32 = localDateTime26.getYear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime22.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        boolean boolean42 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks(26151);
        boolean boolean49 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.minusYears(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime46.withCenturyOfEra(26185);
        int[] intArray57 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime46, (long) 137);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and dateTime22", (mutableDateTime8.compareTo(dateTime22) == 0) == mutableDateTime8.equals(dateTime22));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0606");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.yearOfEra();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 26150);
        long long15 = property11.remainder();
        long long16 = property11.remainder();
        int int17 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime20 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        boolean boolean58 = dateTimeZone37.equals((java.lang.Object) gJChronology52);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.era();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology61 = gJChronology52.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(58558L, dateTimeZone60);
        org.joda.time.DateTime dateTime65 = localDateTime26.toDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        boolean boolean68 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        int int71 = localDateTime69.get(dateTimeFieldType70);
        boolean boolean72 = localDateTime67.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime69.minusSeconds(0);
        int int77 = localDateTime69.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property78 = localDateTime69.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime69.plusHours(15);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withDurationAdded(readableDuration83, 144);
        org.joda.time.Chronology chronology86 = localDateTime82.getChronology();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime88 = org.joda.time.MutableDateTime.now(dateTimeZone87);
        org.joda.time.DateTime dateTime89 = mutableDateTime88.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        java.lang.String str92 = dateTimeZone90.getName((long) 26150);
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(dateTimeZone90);
        int int94 = localDateTime82.compareTo((org.joda.time.ReadablePartial) localDateTime93);
        boolean boolean95 = dateTime65.equals((java.lang.Object) localDateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime26 and localDateTime28", (localDateTime26.compareTo(localDateTime28) == 0) == localDateTime26.equals(localDateTime28));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0607");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        boolean boolean22 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        java.lang.String str24 = mutableDateTime20.toString("15");
        mutableDateTime20.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.minuteOfHour();
        int int28 = property27.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        boolean boolean42 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDayOfWeek(5);
        int int45 = localDateTime39.getYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime35.withFields((org.joda.time.ReadablePartial) localDateTime47);
        int int49 = dateTime35.getEra();
        int int50 = property27.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime52 = dateTime35.minusMillis(999);
        int int53 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55, (int) (short) 1);
        java.lang.String str58 = gJChronology57.toString();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillisOfDay(0);
        org.joda.time.DateTime dateTime63 = dateTime61.withYear((int) '#');
        org.joda.time.DateTime dateTime65 = dateTime63.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(dateTimeZone66);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime70 = property68.add(1L);
        boolean boolean71 = dateTime65.isBefore((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.DateTime dateTime73 = dateTime65.minus(readablePeriod72);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str77 = dateTimeZone76.getID();
        boolean boolean78 = dateTimeZone76.isFixed();
        long long80 = dateTimeZone76.convertUTCToLocal((long) (byte) 0);
        int int82 = dateTimeZone76.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone76);
        int int84 = localDateTime83.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime83.withField(dateTimeFieldType85, (int) (short) 0);
        org.joda.time.DateTime.Property property88 = dateTime73.property(dateTimeFieldType85);
        boolean boolean89 = mutableDateTime16.isSupported(dateTimeFieldType85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime35", (mutableDateTime1.compareTo(dateTime35) == 0) == mutableDateTime1.equals(dateTime35));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfDay(611);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime.Property property36 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime38 = property36.addToCopy(0L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.property(dateTimeFieldType43);
        int int45 = dateTime38.get(dateTimeFieldType43);
        org.joda.time.DateTime.Property property46 = dateTime28.property(dateTimeFieldType43);
        int int47 = property46.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0609");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType12.getField((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.clockhourOfDay();
        int int25 = dateTime9.get(dateTimeField24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime32.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime.Property property43 = dateTime32.year();
        org.joda.time.DateTime.Property property44 = dateTime32.millisOfSecond();
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        boolean boolean46 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime45", (mutableDateTime1.compareTo(dateTime45) == 0) == mutableDateTime1.equals(dateTime45));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0610");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime5 = localDateTime1.toDateTime();
        int int6 = localDateTime1.getEra();
        int int7 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.era();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology12.add(readablePeriod18, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology12.getZone();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("26168");
        java.lang.String str29 = dateTimeZone25.getName(26165L, locale28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime36 = property33.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology40.getZone();
        org.joda.time.DurationField durationField43 = gJChronology40.weekyears();
        boolean boolean44 = dateTime36.equals((java.lang.Object) gJChronology40);
        boolean boolean45 = dateTime36.isBeforeNow();
        org.joda.time.DateTime dateTime47 = dateTime36.minusMinutes((int) (short) 1);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = localDateTime1.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay(0);
        org.joda.time.DateTime dateTime59 = dateTime57.withYear((int) '#');
        org.joda.time.DateTime dateTime61 = dateTime57.withWeekyear(26149);
        org.joda.time.DateTime dateTime63 = dateTime57.minusWeeks(26154);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMillis(26261);
        int int66 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime31 and dateTime55", (mutableDateTime31.compareTo(dateTime55) == 0) == mutableDateTime31.equals(dateTime55));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        long long22 = dateTimeZone7.nextTransition((long) (-1));
        int int24 = dateTimeZone7.getOffsetFromLocal((long) 26207);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        boolean boolean30 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        boolean boolean31 = dateTimeZone7.equals((java.lang.Object) boolean30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        long long41 = gJChronology35.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology35);
        org.joda.time.DurationField durationField43 = gJChronology35.minutes();
        boolean boolean44 = dateTimeZone7.equals((java.lang.Object) gJChronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and mutableDateTime42", (mutableDateTime26.compareTo(mutableDateTime42) == 0) == mutableDateTime26.equals(mutableDateTime42));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0612");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfHour();
        org.joda.time.DurationField durationField15 = gJChronology11.years();
        org.joda.time.DurationField durationField16 = gJChronology11.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime6.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField19 = gJChronology11.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime18", (dateTime6.compareTo(mutableDateTime18) == 0) == dateTime6.equals(mutableDateTime18));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0613");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(26155);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.getID();
        boolean boolean15 = dateTimeZone13.isFixed();
        long long17 = dateTimeZone13.convertUTCToLocal((long) (byte) 0);
        int int19 = dateTimeZone13.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withField(dateTimeFieldType22, (int) (short) 0);
        boolean boolean25 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.year();
        org.joda.time.DurationField durationField27 = property26.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime8 and localDateTime20", (localDateTime8.compareTo(localDateTime20) == 0) == localDateTime8.equals(localDateTime20));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0614");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Chronology chronology24 = gJChronology11.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = chronology24.halfdays();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime1.toMutableDateTime(chronology24);
        int int27 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime26", (mutableDateTime3.compareTo(mutableDateTime26) == 0) == mutableDateTime3.equals(mutableDateTime26));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0615");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("26158015");
        boolean boolean5 = dateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay(0);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withPeriodAdded(readablePeriod16, 26148);
        org.joda.time.DateTime.Property property19 = dateTime15.era();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str21 = durationFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime15.withFieldAdded(durationFieldType20, 26181);
        org.joda.time.DateTime dateTime25 = dateTime2.withFieldAdded(durationFieldType20, 26418);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekyear(26149);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks(764);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(326);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology30.getZone();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        long long39 = dateTimeZone23.getMillisKeepLocal(dateTimeZone36, (long) (-292269054));
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime42 = dateTime15.toDateTime(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime25", (dateTime5.compareTo(mutableDateTime25) == 0) == dateTime5.equals(mutableDateTime25));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.monthOfYear();
        org.joda.time.DurationField durationField11 = gJChronology3.months();
        org.joda.time.DurationField durationField12 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField9, and durationField11", !(durationField12.compareTo(durationField9) == 0) || (Math.signum(durationField12.compareTo(durationField11)) == Math.signum(durationField9.compareTo(durationField11))));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0618");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        boolean boolean21 = mutableDateTime19.isBeforeNow();
        java.lang.Object obj22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.yearOfEra();
        org.joda.time.DurationField durationField29 = gJChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(obj22, (org.joda.time.Chronology) gJChronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime19.toMutableDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DurationField durationField33 = gJChronology26.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime31", (mutableDateTime1.compareTo(mutableDateTime31) == 0) == mutableDateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0619");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.monthOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        boolean boolean12 = dateTime10.isBefore((long) 26177);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.yearOfEra();
        org.joda.time.DurationField durationField20 = gJChronology17.halfdays();
        org.joda.time.DurationField durationField21 = gJChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.dayOfMonth();
        boolean boolean23 = dateTimeFieldType13.isSupported((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.secondOfMinute();
        org.joda.time.DurationField durationField25 = gJChronology17.days();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.minuteOfHour();
        org.joda.time.DurationField durationField33 = gJChronology29.years();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.secondOfMinute();
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology39.getZone();
        java.lang.String str43 = dateTimeZone41.getName((long) 26155);
        org.joda.time.Chronology chronology44 = gJChronology35.withZone(dateTimeZone41);
        long long46 = dateTimeZone41.previousTransition((long) 26167);
        org.joda.time.Chronology chronology47 = gJChronology29.withZone(dateTimeZone41);
        long long51 = dateTimeZone41.convertLocalToUTC(1380120L, false, (long) ' ');
        org.joda.time.Chronology chronology52 = gJChronology17.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.DateTime dateTime54 = dateTime10.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 441, dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime55", (dateTime10.compareTo(dateTime55) == 0) == dateTime10.equals(dateTime55));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0620");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology12.getZone();
        org.joda.time.DurationField durationField15 = gJChronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime19.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime19.minusMinutes(13);
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(26318);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean29 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusDays((int) (short) -1);
        int int36 = localDateTime30.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.minusSeconds(88);
        org.joda.time.LocalDateTime.Property property39 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property39.addWrapFieldToCopy(26279);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology45);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillisOfDay(0);
        org.joda.time.DateTime dateTime51 = dateTime49.withYear((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime51.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean55 = dateTime53.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.yearOfEra();
        org.joda.time.DurationField durationField62 = gJChronology59.halfdays();
        org.joda.time.DurationField durationField63 = gJChronology59.centuries();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology59.secondOfMinute();
        org.joda.time.DurationField durationField66 = gJChronology59.hours();
        org.joda.time.DurationField durationField67 = gJChronology59.halfdays();
        boolean boolean68 = dateTimeFieldType54.isSupported((org.joda.time.Chronology) gJChronology59);
        int int69 = localDateTime41.get(dateTimeFieldType54);
        int int70 = dateTime25.get(dateTimeFieldType54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime47", (mutableDateTime1.compareTo(dateTime47) == 0) == mutableDateTime1.equals(dateTime47));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0621");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        mutableDateTime9.addMinutes(9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        int int18 = mutableDateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        org.joda.time.DateTime.Property property22 = dateTime21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withPeriodAdded(readablePeriod23, 0);
        int int26 = dateTime21.getSecondOfDay();
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime29 = dateTime21.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMillis(100);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(53);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTime.Property property37 = dateTime35.dayOfWeek();
        org.joda.time.DateTime dateTime38 = property37.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime40 = dateTime38.plusWeeks(26339);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        int int46 = localDateTime44.get(dateTimeFieldType45);
        boolean boolean47 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.yearOfEra();
        org.joda.time.DurationField durationField66 = gJChronology63.halfdays();
        boolean boolean67 = dateTimeFieldType59.isSupported((org.joda.time.Chronology) gJChronology63);
        int int68 = localDateTime58.get(dateTimeFieldType59);
        int int69 = localDateTime51.get(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTime.Property property71 = dateTime38.property(dateTimeFieldType59);
        int int72 = mutableDateTime9.get(dateTimeFieldType59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime14", (dateTime8.compareTo(mutableDateTime14) == 0) == dateTime8.equals(mutableDateTime14));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime3.secondOfDay();
        java.lang.String str29 = property28.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(525);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DurationField durationField12 = durationFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, (org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField17 = gJChronology11.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime16", (mutableDateTime1.compareTo(mutableDateTime16) == 0) == mutableDateTime1.equals(mutableDateTime16));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        boolean boolean10 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime12 = dateTime8.minusHours(1970);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.yearOfEra();
        org.joda.time.DurationField durationField19 = gJChronology16.halfdays();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) (-1), true, (long) (short) 10);
        org.joda.time.Chronology chronology28 = gJChronology16.withZone(dateTimeZone23);
        int int30 = dateTimeZone23.getStandardOffset((long) 570);
        org.joda.time.DateTime dateTime31 = dateTime12.withZone(dateTimeZone23);
        org.joda.time.DateTime.Property property32 = dateTime12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        java.lang.String str37 = gJChronology36.toString();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology36);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfDay(0);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) '#');
        org.joda.time.DateTime dateTime44 = dateTime40.withWeekyear(26149);
        org.joda.time.DateTime dateTime46 = dateTime40.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = gJChronology51.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = gJChronology51.minutes();
        org.joda.time.DurationField durationField56 = durationFieldType47.getField((org.joda.time.Chronology) gJChronology51);
        org.joda.time.DateTime dateTime58 = dateTime46.withFieldAdded(durationFieldType47, (int) '4');
        java.util.Date date59 = dateTime46.toDate();
        org.joda.time.DateTime dateTime61 = dateTime46.minusDays(100);
        org.joda.time.DateTime dateTime63 = dateTime61.plusSeconds(627);
        org.joda.time.DateTime dateTime65 = dateTime61.minusWeeks((-7));
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime61.minus(readablePeriod66);
        org.joda.time.DateTime dateTime69 = dateTime67.minusDays(26147);
        int int70 = property32.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and dateTime38", (mutableDateTime7.compareTo(dateTime38) == 0) == mutableDateTime7.equals(dateTime38));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0625");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale7 = new java.util.Locale("26", "halfdays");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = property12.setCopy(26168);
        boolean boolean17 = strSet8.contains((java.lang.Object) property12);
        strSet8.clear();
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet8);
        java.lang.String[] strArray34 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        int int37 = strSet35.size();
        java.lang.String[] strArray52 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        int int55 = strSet53.size();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        java.lang.String str60 = gJChronology59.toString();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        int int67 = localDateTime65.get(dateTimeFieldType66);
        boolean boolean68 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withDayOfWeek(5);
        int int71 = localDateTime65.getYear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime65.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime61.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.DateTime.Property property75 = dateTime61.yearOfCentury();
        java.lang.String str76 = property75.getName();
        boolean boolean77 = strSet53.contains((java.lang.Object) property75);
        boolean boolean78 = strSet35.addAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale locale79 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator81 = strSet80.spliterator();
        java.lang.Object[] objArray82 = strSet80.toArray();
        boolean boolean83 = strSet53.addAll((java.util.Collection<java.lang.String>) strSet80);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        boolean boolean86 = localDateTime84.isBefore((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.minusWeeks(53);
        org.joda.time.LocalDateTime.Property property90 = localDateTime84.dayOfYear();
        boolean boolean91 = strSet80.contains((java.lang.Object) property90);
        boolean boolean92 = strSet8.retainAll((java.util.Collection<java.lang.String>) strSet80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime61", (mutableDateTime10.compareTo(dateTime61) == 0) == mutableDateTime10.equals(dateTime61));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0626");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime9.withFieldAdded(durationFieldType14, 26181);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekOfWeekyear();
        int int21 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.hourOfDay();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("UTC");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayScript();
        java.lang.String str29 = property23.getAsText(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime19", (dateTime5.compareTo(mutableDateTime19) == 0) == dateTime5.equals(mutableDateTime19));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0627");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        boolean boolean11 = dateTime10.isEqualNow();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((-887840351973833L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = gJChronology17.add(readablePeriod23, (long) 26155, 9);
        org.joda.time.DateTime dateTime27 = dateTime13.withChronology((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology17.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime27", (dateTime13.compareTo(dateTime27) == 0) == dateTime13.equals(dateTime27));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        java.lang.String str23 = dateTimeZone21.getName((long) 26150);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.era();
        boolean boolean38 = mutableDateTime33.isEqual((org.joda.time.ReadableInstant) mutableDateTime36);
        int int39 = property31.getDifference((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withPeriodAdded(readablePeriod45, 0);
        int int48 = dateTime43.getSecondOfDay();
        org.joda.time.DateTime.Property property49 = dateTime43.minuteOfHour();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale50);
        java.lang.String str52 = property49.getAsText(locale50);
        java.lang.String str53 = locale50.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime54 = property31.setCopy("26", locale50);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property62 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(dateTimeZone66);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.era();
        boolean boolean69 = mutableDateTime64.isEqual((org.joda.time.ReadableInstant) mutableDateTime67);
        int int70 = property62.getDifference((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = mutableDateTime73.toDateTimeISO();
        org.joda.time.DateTime.Property property75 = dateTime74.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.DateTime dateTime78 = dateTime74.withPeriodAdded(readablePeriod76, 0);
        int int79 = dateTime74.getSecondOfDay();
        org.joda.time.DateTime.Property property80 = dateTime74.minuteOfHour();
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale81);
        java.lang.String str83 = property80.getAsText(locale81);
        java.lang.String str84 = locale81.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime85 = property62.setCopy("26", locale81);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withYearOfEra(5);
        boolean boolean88 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime87);
        boolean boolean89 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime87);
        org.joda.time.Chronology chronology90 = localDateTime87.getChronology();
        int int91 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDateTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime19", (dateTime5.compareTo(mutableDateTime19) == 0) == dateTime5.equals(mutableDateTime19));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        java.lang.String str38 = gJChronology37.toString();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        int int45 = localDateTime43.get(dateTimeFieldType44);
        boolean boolean46 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.withDayOfWeek(5);
        int int49 = localDateTime43.getYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime43.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime39.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        int int58 = localDateTime56.get(dateTimeFieldType57);
        boolean boolean59 = localDateTime54.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks(26151);
        boolean boolean66 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minusYears(0);
        boolean boolean69 = dateTimeZone30.isLocalDateTimeGap(localDateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime39", (dateTime33.compareTo(dateTime39) == 0) == dateTime33.equals(dateTime39));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0630");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        int[] intArray22 = localDateTime19.getValues();
        java.lang.String str23 = localDateTime19.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) str23, (org.joda.time.Chronology) gJChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime0 and localDateTime32", (localDateTime0.compareTo(localDateTime32) == 0) == localDateTime0.equals(localDateTime32));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0631");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology8.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 26155);
        org.joda.time.Chronology chronology13 = gJChronology4.withZone(dateTimeZone10);
        mutableDateTime3.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 0);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime15.toMutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.hourOfDay();
        mutableDateTime15.setMillisOfDay(9);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.withPeriodAdded(readablePeriod36, 0);
        int int39 = dateTime34.getSecondOfDay();
        org.joda.time.DateTime.Property property40 = dateTime34.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.era();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.minuteOfDay();
        org.joda.time.DurationField durationField50 = gJChronology45.seconds();
        boolean boolean51 = dateTimeZone30.equals((java.lang.Object) gJChronology45);
        org.joda.time.DurationField durationField52 = gJChronology45.halfdays();
        org.joda.time.DurationField durationField53 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology45.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology45.halfdayOfDay();
        mutableDateTime15.setRounding(dateTimeField55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and mutableDateTime33", (mutableDateTime19.compareTo(mutableDateTime33) == 0) == mutableDateTime19.equals(mutableDateTime33));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField25 = gJChronology20.seconds();
        long long29 = gJChronology20.add(20000L, (long) 1, 192);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.secondOfDay();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.withPeriodAdded(readablePeriod36, 0);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale40.getDisplayScript();
        java.lang.String str43 = locale40.toLanguageTag();
        java.lang.String str44 = locale40.getDisplayVariant();
        int int45 = property39.getMaximumTextLength(locale40);
        java.util.Calendar calendar46 = mutableDateTime3.toCalendar(locale40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime33", (dateTime10.compareTo(mutableDateTime33) == 0) == dateTime10.equals(mutableDateTime33));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0633");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime16 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(53);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(0);
        boolean boolean31 = dateTime22.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = dateTime22.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime28", (mutableDateTime1.compareTo(dateTime28) == 0) == mutableDateTime1.equals(dateTime28));
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0634");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DurationField durationField5 = gJChronology3.eras();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField6, and durationField5", !(durationField5.compareTo(durationField6) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField6.compareTo(durationField5))));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0635");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime30 = dateTime20.withDayOfMonth(7);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        java.lang.String str35 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DurationField durationField37 = gJChronology34.centuries();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = gJChronology34.withZone(dateTimeZone39);
        org.joda.time.Chronology chronology41 = gJChronology34.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = property51.getLocalDateTime();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, locale53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusYears((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        boolean boolean59 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        int int62 = localDateTime60.get(dateTimeFieldType61);
        boolean boolean63 = localDateTime58.isAfter((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withDurationAdded(readableDuration74, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.dayOfMonth();
        org.joda.time.LocalDateTime.Property property78 = localDateTime76.millisOfSecond();
        int[] intArray79 = localDateTime76.getValues();
        gJChronology34.validate((org.joda.time.ReadablePartial) localDateTime56, intArray79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime20, (org.joda.time.Chronology) gJChronology34);
        org.joda.time.DurationField durationField82 = gJChronology34.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime81", (mutableDateTime19.compareTo(dateTime81) == 0) == mutableDateTime19.equals(dateTime81));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0636");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        long long23 = gJChronology17.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long27 = gJChronology17.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField28 = gJChronology17.days();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = dateTime32.getMillisOfSecond();
        org.joda.time.DateTime dateTime35 = dateTime32.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType36.getField((org.joda.time.Chronology) gJChronology40);
        boolean boolean46 = dateTime32.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime.Property property47 = dateTime32.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDateTime57.getFieldType((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime48.property(dateTimeFieldType61);
        java.lang.String str63 = mutableDateTime48.toString();
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime48.copy();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime48.minuteOfHour();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime48.yearOfCentury();
        boolean boolean67 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime31", (dateTime8.compareTo(mutableDateTime31) == 0) == dateTime8.equals(mutableDateTime31));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0637");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMinutes(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        boolean boolean31 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withDayOfWeek(5);
        int int34 = localDateTime28.getYear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withDurationAdded(readableDuration37, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withMillisOfDay(26147);
        int int42 = localDateTime36.getDayOfWeek();
        org.joda.time.Chronology chronology43 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.plusYears((-26165));
        org.joda.time.LocalDateTime localDateTime46 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        java.lang.String str52 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.yearOfEra();
        int int57 = dateTimeField55.getMinimumValue(1645514151595L);
        int int59 = dateTimeField55.get((long) 26150);
        long long62 = dateTimeField55.add((long) 192, (long) 26152);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = mutableDateTime64.toDateTimeISO();
        org.joda.time.DateTime.Property property66 = dateTime65.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.withPeriodAdded(readablePeriod67, 0);
        org.joda.time.DateTime.Property property70 = dateTime69.hourOfDay();
        org.joda.time.Chronology chronology71 = dateTime69.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime69.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        org.joda.time.DateTime.Property property78 = dateTime77.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime81 = dateTime77.withPeriodAdded(readablePeriod79, 0);
        int int82 = dateTime77.getSecondOfDay();
        org.joda.time.DateTime.Property property83 = dateTime77.minuteOfHour();
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale84);
        java.lang.String str86 = property83.getAsText(locale84);
        java.lang.String str87 = locale84.getVariant();
        int int88 = property74.getMaximumTextLength(locale84);
        int int89 = dateTimeField55.getMaximumShortTextLength(locale84);
        java.util.Set<java.lang.String> strSet90 = locale84.getUnicodeLocaleAttributes();
        java.lang.String str91 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, 44223676, locale84);
        boolean boolean92 = dateTimeField8.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime64", (dateTime5.compareTo(mutableDateTime64) == 0) == dateTime5.equals(mutableDateTime64));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology25);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.secondOfMinute();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale30.getDisplayScript();
        java.lang.String str33 = locale30.toLanguageTag();
        java.lang.String str34 = locale30.getLanguage();
        java.lang.String str35 = dateTimeField28.getAsText(53L, locale30);
        boolean boolean36 = dateTimeZone7.equals((java.lang.Object) 53L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime27", (dateTime21.compareTo(mutableDateTime27) == 0) == dateTime21.equals(mutableDateTime27));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        java.lang.String str33 = dateTimeZone32.getID();
        long long36 = dateTimeZone32.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        java.lang.String str41 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.monthOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        int int45 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) instant44);
        long long47 = dateTimeZone32.nextTransition((long) (-1));
        java.util.TimeZone timeZone48 = dateTimeZone32.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime24.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime51.toDateTimeISO();
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfCeilingCopy();
        java.lang.String str55 = property53.getAsText();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = mutableDateTime57.toDateTimeISO();
        org.joda.time.DateTime.Property property59 = dateTime58.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.withPeriodAdded(readablePeriod60, 0);
        int int63 = dateTime58.getSecondOfDay();
        org.joda.time.DateTime.Property property64 = dateTime58.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime58.minusSeconds(10);
        long long67 = property53.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        java.lang.String str68 = dateTime58.toString();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        boolean boolean71 = localDateTime69.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property75 = localDateTime69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime77.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.era();
        boolean boolean82 = mutableDateTime77.isEqual((org.joda.time.ReadableInstant) mutableDateTime80);
        int int83 = property75.getDifference((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.DurationField durationField84 = property75.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime85 = property75.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime86 = property75.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.minusMillis(26182);
        org.joda.time.DateTime dateTime89 = dateTime58.withFields((org.joda.time.ReadablePartial) localDateTime88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        boolean boolean91 = dateTime58.isBefore(readableInstant90);
        int int92 = dateTimeZone32.getOffset(readableInstant90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime24", (dateTime10.compareTo(dateTime24) == 0) == dateTime10.equals(dateTime24));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0640");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        int int11 = dateTime9.getSecondOfMinute();
        java.util.Date date12 = dateTime9.toDate();
        org.joda.time.DateTime dateTime14 = dateTime9.withYear(26397283);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds(0);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(0);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((int) '#');
        org.joda.time.DateTime dateTime29 = dateTime25.withWeekyear(26149);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Chronology chronology39 = gJChronology36.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = gJChronology36.minutes();
        org.joda.time.DurationField durationField41 = durationFieldType32.getField((org.joda.time.Chronology) gJChronology36);
        org.joda.time.DateTime dateTime43 = dateTime31.withFieldAdded(durationFieldType32, (int) '4');
        java.util.Date date44 = dateTime31.toDate();
        org.joda.time.DateTime dateTime46 = dateTime31.minusDays(100);
        org.joda.time.DateTime dateTime48 = dateTime31.plusMillis(28);
        org.joda.time.DateTime.Property property49 = dateTime48.era();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillis((long) 26280);
        int int52 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime23", (mutableDateTime1.compareTo(dateTime23) == 0) == mutableDateTime1.equals(dateTime23));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0641");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        long long23 = gJChronology17.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long27 = gJChronology17.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField28 = gJChronology17.days();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology17.yearOfCentury();
        org.joda.time.Chronology chronology31 = gJChronology17.withUTC();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        int int38 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime36.setMillisOfDay((int) 'a');
        mutableDateTime36.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime36.add(readableDuration52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTimeISO();
        int int57 = dateTime56.getYearOfEra();
        boolean boolean58 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = dateTime56.plusSeconds(5);
        boolean boolean61 = dateTime56.isEqualNow();
        org.joda.time.DateTime dateTime63 = dateTime56.minusYears(26239);
        org.joda.time.DateTime.Property property64 = dateTime56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = mutableDateTime66.toDateTimeISO();
        int int68 = dateTime67.getMillisOfSecond();
        org.joda.time.DateTime dateTime70 = dateTime67.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType71.getField((org.joda.time.Chronology) gJChronology75);
        boolean boolean81 = dateTime67.isSupported(dateTimeFieldType71);
        org.joda.time.DateTime.Property property82 = dateTime67.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85, readableInstant86, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology88.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology88.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology88);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime92.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = localDateTime92.getFieldType((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property97 = mutableDateTime83.property(dateTimeFieldType96);
        int int98 = dateTime56.get(dateTimeFieldType96);
        int int99 = dateTime32.get(dateTimeFieldType96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime34", (dateTime8.compareTo(mutableDateTime34) == 0) == dateTime8.equals(mutableDateTime34));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0642");
        java.lang.String[] strArray14 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        int int17 = strSet15.size();
        strSet15.clear();
        strSet15.clear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology24.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology24.years();
        org.joda.time.DurationField durationField33 = gJChronology24.years();
        boolean boolean34 = strSet15.equals((java.lang.Object) durationField33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType35.getField((org.joda.time.Chronology) gJChronology39);
        org.joda.time.DurationField durationField45 = gJChronology39.hours();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology39.minuteOfHour();
        org.joda.time.DurationField durationField49 = gJChronology39.eras();
        int int50 = durationField33.compareTo(durationField49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField49, durationField33, and durationField45", !(durationField49.compareTo(durationField33) == 0) || (Math.signum(durationField49.compareTo(durationField45)) == Math.signum(durationField33.compareTo(durationField45))));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0643");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology13.add(readablePeriod18, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology22 = gJChronology13.withUTC();
        long long26 = gJChronology13.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusDays((int) (short) -1);
        long long34 = gJChronology13.set((org.joda.time.ReadablePartial) localDateTime32, 826129497600000L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minus(readableDuration35);
        int[] intArray38 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime36, 1380120L);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.property(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minusSeconds(1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.centuryOfEra();
        int int44 = localDateTime42.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusDays(31);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readablePeriod47);
        java.lang.Object obj49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(obj49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType51.getField((org.joda.time.Chronology) gJChronology55);
        org.joda.time.DurationField durationField61 = gJChronology55.hours();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology55);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusMinutes(26153);
        int int65 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        int int67 = localDateTime62.get(dateTimeFieldType66);
        int int68 = localDateTime42.get(dateTimeFieldType66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime27 and localDateTime62", (localDateTime27.compareTo(localDateTime62) == 0) == localDateTime27.equals(localDateTime62));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0644");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant10 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        int int16 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.withPeriodAdded(readablePeriod21, 0);
        int int24 = dateTime19.getSecondOfDay();
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime27 = dateTime19.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis(100);
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        boolean boolean32 = dateTime29.isSupported(dateTimeFieldType31);
        boolean boolean33 = instant10.isSupported(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DurationField durationField38 = gJChronology37.halfdays();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.era();
        int int41 = gJChronology37.getMinimumDaysInFirstWeek();
        org.joda.time.DateTime dateTime42 = instant10.toDateTime((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTime dateTime43 = instant10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = instant10.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and dateTime43", (dateTime42.compareTo(dateTime43) == 0) == dateTime42.equals(dateTime43));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0645");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str18 = dateTime8.toString();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.era();
        boolean boolean32 = mutableDateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        int int33 = property25.getDifference((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.DurationField durationField34 = property25.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime35 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis(26182);
        org.joda.time.DateTime dateTime39 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42, (int) (short) 1);
        java.lang.String str45 = gJChronology44.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime48, dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime39.toMutableDateTime(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime46", (mutableDateTime1.compareTo(dateTime46) == 0) == mutableDateTime1.equals(dateTime46));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0646");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.Chronology chronology33 = gJChronology20.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Chronology chronology44 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        int int51 = localDateTime49.get(dateTimeFieldType50);
        boolean boolean52 = localDateTime47.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMonths(100);
        int int59 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.minuteOfHour();
        int[] intArray66 = localDateTime62.getValues();
        gJChronology20.validate((org.joda.time.ReadablePartial) localDateTime58, intArray66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusMonths(26163);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusSeconds(345);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withWeekyear(26168);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        boolean boolean78 = localDateTime76.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property82 = localDateTime76.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(dateTimeZone83);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime84.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime87 = org.joda.time.MutableDateTime.now(dateTimeZone86);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime87.era();
        boolean boolean89 = mutableDateTime84.isEqual((org.joda.time.ReadableInstant) mutableDateTime87);
        int int90 = property82.getDifference((org.joda.time.ReadableInstant) mutableDateTime84);
        org.joda.time.DurationField durationField91 = property82.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime92 = property82.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime93 = property82.roundCeilingCopy();
        org.joda.time.Instant instant95 = org.joda.time.Instant.parse("26168");
        org.joda.time.DateTime dateTime96 = localDateTime93.toDateTime((org.joda.time.ReadableInstant) instant95);
        boolean boolean97 = localDateTime73.isEqual((org.joda.time.ReadablePartial) localDateTime93);
        int int98 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and mutableDateTime84", (dateTime34.compareTo(mutableDateTime84) == 0) == dateTime34.equals(mutableDateTime84));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(9);
        int int34 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds(26147);
        int int46 = localDateTime43.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalDateTime localDateTime49 = property47.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType64.getField((org.joda.time.Chronology) gJChronology68);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = dateTimeZone75.getShortName((long) 2022, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = dateTimeField73.getAsText((int) '4', locale77);
        java.lang.String str81 = locale77.getISO3Language();
        java.lang.String str82 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale77);
        org.joda.time.DurationField durationField83 = dateTimeField29.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime62 and localDateTime63", (localDateTime62.compareTo(localDateTime63) == 0) == localDateTime62.equals(localDateTime63));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        long long15 = gJChronology9.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long19 = gJChronology9.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) 2493072000000L);
        boolean boolean23 = dateTime20.isEqual((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str26 = dateTimeZone25.getID();
        boolean boolean27 = dateTimeZone25.isFixed();
        long long29 = dateTimeZone25.convertUTCToLocal((long) (byte) 0);
        int int31 = dateTimeZone25.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone25);
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        int int39 = localDateTime37.get(dateTimeFieldType38);
        boolean boolean40 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime37);
        boolean boolean41 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.minus(readablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        long long53 = dateTimeZone51.nextTransition((long) 'x');
        java.util.TimeZone timeZone54 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        long long64 = dateTimeZone62.nextTransition((long) 'x');
        java.util.TimeZone timeZone65 = dateTimeZone62.toTimeZone();
        java.time.ZoneId zoneId66 = timeZone65.toZoneId();
        boolean boolean67 = timeZone65.observesDaylightTime();
        boolean boolean68 = timeZone54.hasSameRules(timeZone65);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.lang.String str70 = timeZone69.getID();
        java.time.ZoneId zoneId71 = timeZone69.toZoneId();
        boolean boolean72 = timeZone54.hasSameRules(timeZone69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTime dateTime74 = localDateTime43.toDateTime(dateTimeZone73);
        long long76 = dateTimeZone73.previousTransition((long) 26389663);
        mutableDateTime22.setZone(dateTimeZone73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime20", (dateTime5.compareTo(dateTime20) == 0) == dateTime5.equals(dateTime20));
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("26158015");
        boolean boolean5 = dateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTime.Property property6 = dateTime2.year();
        int int7 = dateTime2.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight8 = dateTime2.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime11 = property9.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add(1L);
        boolean boolean29 = dateTime23.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime23.minus(readablePeriod30);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone34.getID();
        boolean boolean36 = dateTimeZone34.isFixed();
        long long38 = dateTimeZone34.convertUTCToLocal((long) (byte) 0);
        int int40 = dateTimeZone34.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone34);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withField(dateTimeFieldType43, (int) (short) 0);
        org.joda.time.DateTime.Property property46 = dateTime31.property(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType43.getDurationType();
        int int48 = dateTime11.get(dateTimeFieldType43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime17", (mutableDateTime1.compareTo(dateTime17) == 0) == mutableDateTime1.equals(dateTime17));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTime.Property property6 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime8 = dateTime2.minusMillis(26246);
        java.util.Date date9 = dateTime2.toDate();
        int int10 = dateTime2.getMinuteOfDay();
        int int11 = dateTime2.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology15.halfdays();
        org.joda.time.DateTime dateTime20 = dateTime2.withChronology((org.joda.time.Chronology) gJChronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime17", (mutableDateTime1.compareTo(mutableDateTime17) == 0) == mutableDateTime1.equals(mutableDateTime17));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0651");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        java.util.Date date4 = localDateTime0.toDate();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date4);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withPeriodAdded(readablePeriod12, 0);
        int int15 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime.Property property16 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime10.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str20 = durationFieldType19.getName();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType19, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.yearOfCentury();
        org.joda.time.DurationField durationField30 = gJChronology26.days();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.secondOfDay();
        org.joda.time.DateTime dateTime32 = dateTime18.withChronology((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        java.lang.String str41 = dateTimeZone40.getID();
        long long44 = dateTimeZone40.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.monthOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        int int53 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant52);
        long long55 = dateTimeZone40.nextTransition((long) (-1));
        java.util.TimeZone timeZone56 = dateTimeZone40.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime32.toMutableDateTime(dateTimeZone40);
        int int58 = property7.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime57", (dateTime18.compareTo(mutableDateTime57) == 0) == dateTime18.equals(mutableDateTime57));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology4.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 26185, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology4.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology4.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology4.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField22", Math.signum(durationField9.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField9)));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0653");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = gJChronology42.days();
        org.joda.time.DurationField durationField47 = gJChronology42.months();
        org.joda.time.DurationField durationField48 = gJChronology42.weekyears();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime21, (org.joda.time.Chronology) gJChronology42);
        org.joda.time.DurationField durationField50 = gJChronology42.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime49", (mutableDateTime21.compareTo(mutableDateTime49) == 0) == mutableDateTime21.equals(mutableDateTime49));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0654");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        boolean boolean32 = dateTime28.isAfter((-94232602002L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime34.toDateTimeISO();
        org.joda.time.DateTime.Property property36 = dateTime35.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime35.withPeriodAdded(readablePeriod37, 0);
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        java.lang.String str41 = property40.getAsShortText();
        org.joda.time.DateTime dateTime42 = property40.roundHalfFloorCopy();
        org.joda.time.Instant instant43 = dateTime42.toInstant();
        boolean boolean44 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = dateTime42.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        mutableDateTime9.addMinutes(9);
        mutableDateTime9.addMonths(26181);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(27);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime17", (mutableDateTime16.compareTo(mutableDateTime17) == 0) == mutableDateTime16.equals(mutableDateTime17));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0656");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.era();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime12.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationField durationField23 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.era();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology27.seconds();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.centuryOfEra();
        org.joda.time.DurationField durationField34 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology27);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDateTime48.getFieldType((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        int int58 = localDateTime56.get(dateTimeFieldType57);
        boolean boolean59 = localDateTime54.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        boolean boolean65 = dateTimeFieldType52.isSupported(chronology64);
        int int66 = dateTime38.get(dateTimeFieldType52);
        int int67 = mutableDateTime35.get(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime37", (dateTime12.compareTo(mutableDateTime37) == 0) == dateTime12.equals(mutableDateTime37));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0657");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        int int27 = mutableDateTime23.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withPeriodAdded(readablePeriod32, 0);
        int int35 = dateTime30.getSecondOfDay();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) dateTime30);
        mutableDateTime25.setMillisOfDay((int) 'a');
        mutableDateTime25.addMillis(4);
        java.lang.String str41 = mutableDateTime25.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = mutableDateTime45.toDateTimeISO();
        int int47 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = mutableDateTime49.toDateTimeISO();
        org.joda.time.DateTime.Property property51 = dateTime50.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.withPeriodAdded(readablePeriod52, 0);
        int int55 = dateTime50.getSecondOfDay();
        mutableDateTime45.setDate((org.joda.time.ReadableInstant) dateTime50);
        mutableDateTime45.setMillisOfDay((int) 'a');
        mutableDateTime45.setWeekyear((int) (short) 0);
        boolean boolean61 = mutableDateTime25.isEqual((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime45.add(readableDuration62);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = mutableDateTime65.toDateTimeISO();
        org.joda.time.DateTime dateTime68 = dateTime66.withMillisOfDay(611);
        mutableDateTime45.setDate((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = dateTime21.isAfter((org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime23", (dateTime5.compareTo(mutableDateTime23) == 0) == dateTime5.equals(mutableDateTime23));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0658");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        long long15 = gJChronology9.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long19 = gJChronology9.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime22 = dateTime5.minusWeeks((-26275));
        boolean boolean24 = dateTime22.isAfter(4519245664L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime20", (dateTime5.compareTo(dateTime20) == 0) == dateTime5.equals(dateTime20));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0659");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        boolean boolean7 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        java.lang.String str9 = mutableDateTime5.toString("15");
        mutableDateTime5.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.minuteOfHour();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDayOfWeek(5);
        int int30 = localDateTime24.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = dateTime20.getEra();
        int int35 = property12.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = dateTime20.minusMillis(999);
        int int38 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime20.plus(readablePeriod39);
        org.joda.time.DateTime.Property property41 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime43 = dateTime20.withYear(63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and mutableDateTime3", (dateTime0.compareTo(mutableDateTime3) == 0) == dateTime0.equals(mutableDateTime3));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0660");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy(7);
        int int14 = dateTime13.getDayOfYear();
        int int15 = dateTime13.getEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.yearOfEra();
        org.joda.time.DurationField durationField23 = gJChronology20.halfdays();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone24.getShortName((long) 2022, locale26);
        long long30 = dateTimeZone24.adjustOffset((long) 2, false);
        org.joda.time.Chronology chronology31 = gJChronology20.withZone(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(5L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime13.toMutableDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        int int39 = mutableDateTime35.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setSecondOfDay(59);
        mutableDateTime37.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTimeISO();
        int int49 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime51.toDateTimeISO();
        org.joda.time.DateTime.Property property53 = dateTime52.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.withPeriodAdded(readablePeriod54, 0);
        int int57 = dateTime52.getSecondOfDay();
        mutableDateTime47.setDate((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime60 = dateTime52.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis(100);
        mutableDateTime37.setDate((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime62.withWeekyear(26154);
        org.joda.time.Chronology chronology66 = dateTime62.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfEra(26220);
        int int70 = dateTime69.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.plus(readableDuration71);
        boolean boolean73 = mutableDateTime33.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime35", (dateTime5.compareTo(mutableDateTime35) == 0) == dateTime5.equals(mutableDateTime35));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0661");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.DateTime dateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withOffsetParsed();
        java.util.Locale locale15 = dateTimeFormatter14.getLocale();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.Chronology chronology33 = gJChronology20.withZone(dateTimeZone32);
        long long37 = dateTimeZone32.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter14.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((-1199900L), dateTimeZone32);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale44 = java.util.Locale.PRC;
        java.lang.String str45 = dateTimeZone42.getShortName((long) 2022, locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale.setDefault(category41, locale44);
        java.lang.String str48 = dateTimeZone32.getShortName((-8L), locale44);
        org.joda.time.DateTime dateTime49 = dateTime9.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths(736);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        java.lang.String str61 = dateTimeZone60.getID();
        long long64 = dateTimeZone60.convertLocalToUTC((long) 1, false);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 53, dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.yearOfEra();
        java.lang.String str73 = dateTimeField71.getAsShortText((long) 59);
        mutableDateTime65.setRounding(dateTimeField71);
        boolean boolean75 = dateTime51.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = mutableDateTime77.toDateTimeISO();
        org.joda.time.DateTime.Property property79 = dateTime78.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime82 = dateTime78.withPeriodAdded(readablePeriod80, 0);
        org.joda.time.DateTime.Property property83 = dateTime82.hourOfDay();
        org.joda.time.DateTime dateTime84 = property83.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime85 = dateTime84.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime87 = dateTime85.withMinuteOfHour(1);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.DateTime dateTime89 = dateTime85.minus(readablePeriod88);
        org.joda.time.DateTime dateTime91 = dateTime85.withMillis((long) 26315);
        boolean boolean92 = mutableDateTime65.isEqual((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime49", (dateTime9.compareTo(dateTime49) == 0) == dateTime9.equals(dateTime49));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.joda.time.DurationField durationField10 = gJChronology3.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField10, and durationField9", !(durationField9.compareTo(durationField10) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField10.compareTo(durationField9))));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0663");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks(26152);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusDays((int) (short) -1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        java.util.Date date32 = localDateTime29.toDate();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withPeriodAdded(readablePeriod33, (int) (byte) -1);
        java.lang.Object obj36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withField(dateTimeFieldType39, 523);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType39.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.halfdayOfDay();
        org.joda.time.DurationField durationField49 = gJChronology46.years();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType39.getField((org.joda.time.Chronology) gJChronology46);
        int int51 = dateTime20.get(dateTimeFieldType39);
        boolean boolean52 = dateTime8.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0664");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 5, 0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant3.withDurationAdded(readableDuration4, (int) (short) 10);
        org.joda.time.Instant instant8 = instant3.minus((long) 26150);
        org.joda.time.Chronology chronology9 = instant3.getChronology();
        org.joda.time.Instant instant12 = instant3.withDurationAdded((-166046260L), 26251275);
        boolean boolean14 = instant12.isEqual((long) (-2179));
        org.joda.time.Chronology chronology15 = instant12.getChronology();
        org.joda.time.DateTime dateTime16 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = dateTimeZone26.getShortName((long) 2022, locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int[] intArray32 = gJChronology20.get((org.joda.time.ReadablePartial) localDateTime30, 7L);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology20.getZone();
        org.joda.time.DateTime dateTime36 = dateTime16.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime16.minusMonths(736);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime16", (instant12.compareTo(dateTime16) == 0) == instant12.equals(dateTime16));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0665");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.eras();
        org.joda.time.DurationFieldType durationFieldType14 = durationField13.getType();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.dayOfMonth();
        org.joda.time.DurationField durationField21 = durationFieldType14.getField((org.joda.time.Chronology) gJChronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField21", Math.signum(durationField12.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField12)));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        int int11 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeField dateTimeField12 = null;
        mutableDateTime10.setRounding(dateTimeField12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        long long24 = dateTimeZone22.convertUTCToLocal((long) 26169);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = dateTimeZone22.getName((long) 16, locale26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone22);
        java.lang.String str29 = dateTimeZone22.toString();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) 926);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField12, dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime10", (instant9.compareTo(mutableDateTime10) == 0) == instant9.equals(mutableDateTime10));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0667");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(11);
        org.joda.time.DateTime.Property property13 = dateTime10.era();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear((int) '#');
        org.joda.time.DateTime dateTime25 = dateTime23.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.add(1L);
        boolean boolean31 = dateTime25.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime25.minus(readablePeriod32);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfSecond();
        boolean boolean36 = property13.equals((java.lang.Object) property35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.millis();
        org.joda.time.DurationField durationField7 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField7", Math.signum(durationField6.compareTo(durationField7)) == -Math.signum(durationField7.compareTo(durationField6)));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.TimeOfDay timeOfDay18 = dateTime6.toTimeOfDay();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime();
        int int20 = dateTime19.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime17", (dateTime19.compareTo(dateTime17) == 0) == dateTime19.equals(dateTime17));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0670");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology4.hours();
        org.joda.time.DurationField durationField7 = gJChronology4.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(17526956400000L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField6, and durationField7", !(durationField10.compareTo(durationField6) == 0) || (Math.signum(durationField10.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0671");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        int int11 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime10);
        boolean boolean12 = dateTimeZone7.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime10", (instant9.compareTo(mutableDateTime10) == 0) == instant9.equals(mutableDateTime10));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology6.getZone();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.copy();
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfCeiling();
        java.lang.String str18 = property16.getAsString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime14", (dateTime13.compareTo(mutableDateTime14) == 0) == dateTime13.equals(mutableDateTime14));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0673");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale13);
        java.lang.String str17 = nameProvider12.getName(locale13, "secondOfMinute", "Etc/UTC");
        java.lang.String str18 = locale13.getDisplayLanguage();
        int int19 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.DateTime dateTime21 = property11.addToCopy((long) 26148);
        org.joda.time.DateTime dateTime22 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra(26163);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.yearOfEra();
        org.joda.time.DurationField durationField31 = gJChronology28.halfdays();
        org.joda.time.DurationField durationField32 = gJChronology28.centuries();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology28.getZone();
        long long35 = dateTimeZone33.nextTransition((long) 611);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        boolean boolean37 = dateTime22.equals((java.lang.Object) dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeZone38.getShortName((long) 2022, locale40);
        long long43 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, 1645470026159L);
        boolean boolean45 = dateTimeZone33.isStandardOffset((long) 44341993);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(26251);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and dateTime46", (mutableDateTime9.compareTo(dateTime46) == 0) == mutableDateTime9.equals(dateTime46));
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0674");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        java.util.Date date4 = localDateTime0.toDate();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromDateFields(date4);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date4);
        int int8 = localDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("26158015");
        boolean boolean14 = dateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime.Property property15 = dateTime11.year();
        int int16 = dateTime11.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = dateTime11.toDateMidnight();
        org.joda.time.DateTime.Property property18 = dateTime11.secondOfDay();
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DurationField durationField26 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = gJChronology23.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology30 = gJChronology23.withUTC();
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = dateTime34.getMillisOfSecond();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType38.getField((org.joda.time.Chronology) gJChronology42);
        boolean boolean48 = dateTime34.isSupported(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DurationField durationField54 = durationFieldType49.getField((org.joda.time.Chronology) gJChronology53);
        boolean boolean55 = dateTimeFieldType38.isSupported((org.joda.time.Chronology) gJChronology53);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType38.getDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType38.getDurationType();
        org.joda.time.DateTime dateTime59 = dateTime19.withFieldAdded(durationFieldType57, 26174);
        int int60 = dateTime19.getMonthOfYear();
        boolean boolean61 = localDateTime7.equals((java.lang.Object) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime10", (dateTime3.compareTo(mutableDateTime10) == 0) == dateTime3.equals(mutableDateTime10));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0675");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology3.getZone();
        org.joda.time.DurationField durationField10 = gJChronology3.days();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.plusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime33 = dateTime30.withEra(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int35 = dateTime30.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime27.property(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.era();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundFloor();
        int int41 = mutableDateTime40.getRoundingMode();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.secondOfMinute();
        org.joda.time.Chronology chronology43 = mutableDateTime40.getChronology();
        boolean boolean45 = mutableDateTime40.isAfter((long) 26187);
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime40.add(readableDuration46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        org.joda.time.Chronology chronology65 = gJChronology52.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone64);
        mutableDateTime40.setZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = localDateTime27.toDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime27.minusMonths(0);
        int[] intArray72 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime27, 3903232781669L);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology3.secondOfDay();
        int int75 = dateTimeField73.getMinimumValue(1645428077906L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and dateTime66", (mutableDateTime29.compareTo(dateTime66) == 0) == mutableDateTime29.equals(dateTime66));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0676");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType8.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField18 = gJChronology12.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(26153);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.withPeriodAdded(readablePeriod26, 0);
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.Chronology chronology30 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime28.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray36 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime19, 1645514176853L);
        org.joda.time.DurationField durationField37 = gJChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        java.lang.String str46 = dateTimeZone45.getID();
        long long49 = dateTimeZone45.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.monthOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        int int58 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) instant57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.Chronology chronology62 = gJChronology3.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology3.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and dateTime60", (mutableDateTime23.compareTo(dateTime60) == 0) == mutableDateTime23.equals(dateTime60));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0677");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.yearOfCentury();
        org.joda.time.DurationField durationField18 = gJChronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology14.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime21", (mutableDateTime1.compareTo(dateTime21) == 0) == mutableDateTime1.equals(dateTime21));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0678");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = instant15.toMutableDateTime();
        org.joda.time.DateTime dateTime18 = instant15.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime17", (mutableDateTime1.compareTo(mutableDateTime17) == 0) == mutableDateTime1.equals(mutableDateTime17));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0679");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.LocalDateTime localDateTime1 = dateTime0.toLocalDateTime();
        org.joda.time.DateTime dateTime3 = dateTime0.plusMonths(292278993);
        org.joda.time.DateTime dateTime5 = dateTime3.minusSeconds(26189);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(26217);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime13.addDays(26147);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime13.add(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        long long35 = dateTimeZone33.nextTransition((long) 26149);
        long long39 = dateTimeZone33.convertLocalToUTC((long) 2000, false, (long) 26154);
        long long42 = dateTimeZone33.adjustOffset((long) 26229, false);
        mutableDateTime13.setZone(dateTimeZone33);
        boolean boolean44 = dateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and mutableDateTime11", (dateTime0.compareTo(mutableDateTime11) == 0) == dateTime0.equals(mutableDateTime11));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.minusYears(2022);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) dateTime16);
        java.lang.Object obj19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        java.lang.String str22 = localDateTime20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime25.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime27.property(dateTimeFieldType28);
        boolean boolean30 = localDateTime20.isSupported(dateTimeFieldType28);
        int int31 = dateTime16.get(dateTimeFieldType28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime24", (dateTime5.compareTo(mutableDateTime24) == 0) == dateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0681");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime2.minusMonths(16);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((-1L), 244);
        org.joda.time.DateTime dateTime12 = dateTime7.plusSeconds(14025312);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        int[] intArray29 = new int[] {};
        int[] intArray31 = dateTimeField20.add((org.joda.time.ReadablePartial) localDateTime22, (int) (byte) 100, intArray29, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime22.plusWeeks(7);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalDateTime localDateTime38 = property35.addWrapFieldToCopy(192);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.era();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime46 = property43.addWrapField(9);
        org.joda.time.MutableDateTime mutableDateTime47 = property43.getMutableDateTime();
        org.joda.time.DateTime dateTime48 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateTime dateTime50 = dateTime48.withCenturyOfEra(26235);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withPeriodAdded(readablePeriod51, 35);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTime dateTime57 = localDateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = mutableDateTime59.toDateTimeISO();
        org.joda.time.DateTime.Property property61 = dateTime60.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime64 = dateTime60.withPeriodAdded(readablePeriod62, 0);
        org.joda.time.DateTime.Property property65 = dateTime64.hourOfDay();
        org.joda.time.Chronology chronology66 = dateTime64.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime64.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property69 = dateTime68.dayOfMonth();
        org.joda.time.DateTime dateTime71 = dateTime68.minus((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology76.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.yearOfEra();
        org.joda.time.DurationField durationField79 = gJChronology76.halfdays();
        org.joda.time.DurationField durationField80 = gJChronology76.centuries();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology76.dayOfMonth();
        boolean boolean82 = dateTimeFieldType72.isSupported((org.joda.time.Chronology) gJChronology76);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType72.getDurationType();
        org.joda.time.DateTime.Property property84 = dateTime68.property(dateTimeFieldType72);
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType72.getDurationType();
        int int86 = localDateTime54.get(dateTimeFieldType72);
        int int87 = dateTime53.get(dateTimeFieldType72);
        org.joda.time.DateTime dateTime89 = dateTime7.withField(dateTimeFieldType72, 26164);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.DateTime dateTime92 = dateTime89.withPeriodAdded(readablePeriod90, 1046607);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime57", (mutableDateTime1.compareTo(dateTime57) == 0) == mutableDateTime1.equals(dateTime57));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0682");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.minusYears(22);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime2.plus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = dateTime7.minusWeeks(26248);
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusDays((int) (short) -1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours(22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusHours(60);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 1898);
        org.joda.time.Instant instant27 = instant25.plus(1645427861155L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = localDateTime31.get(dateTimeFieldType32);
        boolean boolean34 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime31.yearOfEra();
        java.lang.String str40 = property39.getAsShortText();
        org.joda.time.LocalDateTime localDateTime42 = property39.addToCopy((long) 26150);
        org.joda.time.LocalDateTime localDateTime44 = property39.addToCopy(1970);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        java.lang.String str51 = gJChronology50.toString();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillisOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withPeriodAdded(readablePeriod57, 26148);
        org.joda.time.DateTime.Property property60 = dateTime56.era();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str62 = durationFieldType61.getName();
        org.joda.time.DateTime dateTime64 = dateTime56.withFieldAdded(durationFieldType61, 26181);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.yearOfEra();
        org.joda.time.DurationField durationField72 = gJChronology69.halfdays();
        org.joda.time.DurationField durationField73 = gJChronology69.centuries();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology69.dayOfMonth();
        boolean boolean75 = dateTimeFieldType65.isSupported((org.joda.time.Chronology) gJChronology69);
        org.joda.time.DateTime dateTime77 = dateTime56.withField(dateTimeFieldType65, 26151);
        int int78 = localDateTime46.get(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType65.getDurationType();
        int int80 = instant25.get(dateTimeFieldType65);
        int int81 = localDateTime23.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime82 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime52", (mutableDateTime1.compareTo(dateTime52) == 0) == mutableDateTime1.equals(dateTime52));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        java.lang.String str16 = dateTimeZone15.getID();
        long long19 = dateTimeZone15.convertLocalToUTC((long) 1, false);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 53, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime6, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime6.plus(readableDuration22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime21", (mutableDateTime1.compareTo(mutableDateTime21) == 0) == mutableDateTime1.equals(mutableDateTime21));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0684");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant0.withDurationAdded(readableDuration2, 2022);
        org.joda.time.MutableDateTime mutableDateTime5 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime6 = instant0.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = localDateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusSeconds(0);
        int int24 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        int int25 = localDateTime23.getEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.yearOfCentury();
        int int28 = localDateTime23.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.withMillisOfDay(26215);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime34.toDateTimeISO();
        int int36 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.withPeriodAdded(readablePeriod41, 0);
        int int44 = dateTime39.getSecondOfDay();
        mutableDateTime34.setDate((org.joda.time.ReadableInstant) dateTime39);
        mutableDateTime34.setMillisOfDay((int) 'a');
        mutableDateTime34.addMillis(4);
        java.lang.String str50 = mutableDateTime34.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = mutableDateTime54.toDateTimeISO();
        int int56 = mutableDateTime52.compareTo((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = mutableDateTime58.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime59.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime59.withPeriodAdded(readablePeriod61, 0);
        int int64 = dateTime59.getSecondOfDay();
        mutableDateTime54.setDate((org.joda.time.ReadableInstant) dateTime59);
        mutableDateTime54.setMillisOfDay((int) 'a');
        mutableDateTime54.setWeekyear((int) (short) 0);
        boolean boolean70 = mutableDateTime34.isEqual((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime34.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime34.copy();
        mutableDateTime72.setWeekyear((-1));
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime72.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str77 = dateTimeZone76.getID();
        boolean boolean78 = dateTimeZone76.isFixed();
        long long80 = dateTimeZone76.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone76);
        java.lang.String str83 = dateTimeZone76.getShortName(874L);
        mutableDateTime72.setZone(dateTimeZone76);
        boolean boolean85 = localDateTime23.equals((java.lang.Object) mutableDateTime72);
        org.joda.time.DateTime dateTime86 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime5", (instant0.compareTo(mutableDateTime5) == 0) == instant0.equals(mutableDateTime5));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.years();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.weekyears();
        long long13 = gJChronology3.add((long) 707, 4346364803L, (int) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField9", (durationField6.compareTo(durationField9) == 0) == durationField6.equals(durationField9));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0686");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("hi!");
        int int10 = property5.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        org.joda.time.Chronology chronology29 = gJChronology16.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Chronology chronology40 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime45.get(dateTimeFieldType46);
        boolean boolean48 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths(100);
        int int55 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.minuteOfHour();
        int[] intArray62 = localDateTime58.getValues();
        gJChronology16.validate((org.joda.time.ReadablePartial) localDateTime54, intArray62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology16.hourOfHalfday();
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale67.getDisplayName();
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str71 = dateTimeField65.getAsText((long) 26152, locale67);
        org.joda.time.LocalDateTime localDateTime72 = property5.setCopy("1", locale67);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = mutableDateTime74.toDateTimeISO();
        int int76 = dateTime75.getMillisOfSecond();
        org.joda.time.DateTime dateTime78 = dateTime75.plusDays((int) (byte) 10);
        int int79 = property5.getDifference((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and mutableDateTime74", (dateTime30.compareTo(mutableDateTime74) == 0) == dateTime30.equals(mutableDateTime74));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0687");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.yearOfEra();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 26150);
        long long15 = property11.remainder();
        long long16 = property11.remainder();
        int int17 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime20 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        boolean boolean58 = dateTimeZone37.equals((java.lang.Object) gJChronology52);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.era();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology61 = gJChronology52.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(58558L, dateTimeZone60);
        org.joda.time.DateTime dateTime65 = localDateTime26.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = dateTime65.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime26 and localDateTime28", (localDateTime26.compareTo(localDateTime28) == 0) == localDateTime26.equals(localDateTime28));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0688");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.setWeekyear((int) (short) 0);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime3.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.era();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime21.add(readableDuration23, 26164);
        mutableDateTime21.addMonths(26261);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime31.setSecondOfDay(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean37 = mutableDateTime31.equals((java.lang.Object) dateTimeFieldType36);
        java.lang.Object obj38 = mutableDateTime31.clone();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableDateTime31.add(readablePeriod39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime31.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.monthOfYear();
        org.joda.time.Instant instant49 = gJChronology45.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = gJChronology45.add(readablePeriod50, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology54 = gJChronology45.withUTC();
        org.joda.time.DurationField durationField55 = gJChronology45.months();
        org.joda.time.Instant instant56 = gJChronology45.getGregorianCutover();
        org.joda.time.Instant instant58 = instant56.minus((long) 20);
        long long59 = property41.getDifferenceAsLong((org.joda.time.ReadableInstant) instant58);
        boolean boolean60 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62, (int) (short) 1);
        java.lang.String str65 = gJChronology64.toString();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.era();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.millisOfSecond();
        org.joda.time.DurationField durationField69 = gJChronology64.years();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property75 = dateTime74.centuryOfEra();
        org.joda.time.DateTime dateTime76 = property75.withMaximumValue();
        int int77 = property72.getDifference((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = instant58.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime70", (mutableDateTime1.compareTo(mutableDateTime70) == 0) == mutableDateTime1.equals(mutableDateTime70));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = property18.getAsShortText(locale21);
        java.lang.String str25 = property11.getAsText(locale21);
        org.joda.time.DateTime dateTime27 = property11.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        mutableDateTime28.addSeconds(26176);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.yearOfCentury();
        org.joda.time.DurationField durationField38 = gJChronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.centuryOfEra();
        mutableDateTime28.setRounding(dateTimeField40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        java.lang.String str51 = dateTimeZone50.getID();
        long long54 = dateTimeZone50.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        java.lang.String str59 = gJChronology58.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.monthOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        int int63 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) instant62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfSecond();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 26274, (org.joda.time.Chronology) gJChronology64);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime28.toMutableDateTime((org.joda.time.Chronology) gJChronology64);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and mutableDateTime67", (mutableDateTime28.compareTo(mutableDateTime67) == 0) == mutableDateTime28.equals(mutableDateTime67));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0690");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 26148);
        org.joda.time.DateTime.Property property14 = dateTime10.era();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.DateTime dateTime18 = dateTime10.withFieldAdded(durationFieldType15, 26181);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.yearOfCentury();
        org.joda.time.DurationField durationField26 = gJChronology22.minutes();
        org.joda.time.DurationField durationField27 = gJChronology22.millis();
        org.joda.time.DurationField durationField28 = gJChronology22.millis();
        boolean boolean29 = durationFieldType15.isSupported((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.weekOfWeekyear();
        long long35 = gJChronology22.add((long) 26220, 13046426155L, 26175);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(3903232622000L, (org.joda.time.Chronology) gJChronology22);
        org.joda.time.DurationField durationField37 = gJChronology22.years();
        org.joda.time.DurationField durationField38 = gJChronology22.weeks();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = gJChronology42.add(readablePeriod48, (long) 26155, 9);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTime dateTime55 = localDateTime52.toDateTime();
        java.util.Date date56 = localDateTime52.toDate();
        long long58 = gJChronology42.set((org.joda.time.ReadablePartial) localDateTime52, 4518963757L);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology42.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology42.millisOfSecond();
        org.joda.time.DurationField durationField63 = gJChronology42.minutes();
        int int64 = durationField38.compareTo(durationField63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime55", (dateTime6.compareTo(dateTime55) == 0) == dateTime6.equals(dateTime55));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0691");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale13);
        java.lang.String str17 = nameProvider12.getName(locale13, "secondOfMinute", "Etc/UTC");
        java.lang.String str18 = locale13.getLanguage();
        java.util.Locale locale19 = locale13.stripExtensions();
        int int20 = property11.getMaximumShortTextLength(locale13);
        java.util.Set<java.lang.String> strSet21 = locale13.getUnicodeLocaleKeys();
        strSet21.clear();
        int int23 = strSet21.size();
        java.util.Locale locale26 = new java.util.Locale("26", "halfdays");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.DurationField durationField32 = property31.getLeapDurationField();
        org.joda.time.DateTime dateTime33 = property31.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = property31.setCopy(26168);
        boolean boolean36 = strSet27.contains((java.lang.Object) property31);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        int int39 = localDateTime37.get(dateTimeFieldType38);
        boolean boolean40 = strSet27.contains((java.lang.Object) int39);
        java.lang.String[] strArray55 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        int int58 = strSet56.size();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str60 = dateTimeZone59.getID();
        boolean boolean61 = dateTimeZone59.isFixed();
        long long63 = dateTimeZone59.convertUTCToLocal((long) (byte) 0);
        long long65 = dateTimeZone59.convertUTCToLocal(20000L);
        int int67 = dateTimeZone59.getStandardOffset((long) 26151);
        boolean boolean68 = strSet56.contains((java.lang.Object) int67);
        org.joda.time.tz.Provider provider69 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet70 = provider69.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream71 = strSet70.stream();
        boolean boolean72 = strSet56.retainAll((java.util.Collection<java.lang.String>) strSet70);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale73);
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleAttributes();
        boolean boolean76 = strSet75.isEmpty();
        java.lang.String[] strArray85 = new java.lang.String[] { "2022-02-22T00:00:00.101Z", "DateTimeField[hourOfHalfday]", "+00:00", "2022-02-22T00:00:00.101Z", "de-DE", "UTC", "Deutsch", "2022-02-21T07:15:52.625" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        boolean boolean88 = strSet75.containsAll((java.util.Collection<java.lang.String>) strList86);
        boolean boolean89 = strSet56.removeAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean90 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean91 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime29", (dateTime8.compareTo(mutableDateTime29) == 0) == dateTime8.equals(mutableDateTime29));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0692");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(1);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology16.add(readablePeriod18, (long) 948, (int) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime9.withChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond(0);
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime24", (dateTime8.compareTo(dateTime24) == 0) == dateTime8.equals(dateTime24));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0693");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.plusMinutes(26179);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        int int19 = mutableDateTime18.getEra();
        int int20 = mutableDateTime18.getRoundingMode();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfYear();
        boolean boolean22 = dateTime16.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTime dateTime24 = dateTime16.minusMinutes(448);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime18", (dateTime5.compareTo(mutableDateTime18) == 0) == dateTime5.equals(mutableDateTime18));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0694");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField10 = gJChronology3.months();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology3.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField10, and durationField12", !(durationField16.compareTo(durationField10) == 0) || (Math.signum(durationField16.compareTo(durationField12)) == Math.signum(durationField10.compareTo(durationField12))));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0695");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        long long20 = gJChronology14.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long24 = gJChronology14.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField25 = gJChronology14.days();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.Chronology chronology27 = gJChronology14.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime26", (dateTime10.compareTo(mutableDateTime26) == 0) == dateTime10.equals(mutableDateTime26));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0696");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        org.joda.time.DateTime dateTime11 = dateTime6.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property12 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        boolean boolean20 = property19.isLeap();
        org.joda.time.LocalDateTime localDateTime21 = property19.getLocalDateTime();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale22.getDisplayScript();
        java.lang.String str25 = property19.getAsShortText(locale22);
        java.lang.String str26 = property12.getAsText(locale22);
        org.joda.time.DateTime dateTime28 = property12.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        mutableDateTime29.addSeconds(26176);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.yearOfCentury();
        org.joda.time.DurationField durationField39 = gJChronology35.days();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.centuryOfEra();
        mutableDateTime29.setRounding(dateTimeField41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        java.lang.String str52 = dateTimeZone51.getID();
        long long55 = dateTimeZone51.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        java.lang.String str60 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.monthOfYear();
        org.joda.time.Instant instant63 = gJChronology59.getGregorianCutover();
        int int64 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) instant63);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology65.millisOfSecond();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 26274, (org.joda.time.Chronology) gJChronology65);
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime29.toMutableDateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 26287317, (org.joda.time.Chronology) gJChronology65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and mutableDateTime68", (mutableDateTime29.compareTo(mutableDateTime68) == 0) == mutableDateTime29.equals(mutableDateTime68));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime9.withFieldAdded(durationFieldType14, 26181);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekOfWeekyear();
        int int21 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = gJChronology25.add(readablePeriod30, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology34 = gJChronology25.withUTC();
        org.joda.time.DateTime dateTime35 = dateTime17.toDateTime((org.joda.time.Chronology) gJChronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime19", (dateTime5.compareTo(mutableDateTime19) == 0) == dateTime5.equals(mutableDateTime19));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        int int9 = mutableDateTime3.getMinuteOfHour();
        org.joda.time.Instant instant10 = mutableDateTime3.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime20.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology27.getZone();
        org.joda.time.DateTime dateTime31 = dateTime20.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear(26299778);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        int int39 = localDateTime37.get(dateTimeFieldType38);
        boolean boolean40 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.yearOfEra();
        org.joda.time.DurationField durationField59 = gJChronology56.halfdays();
        boolean boolean60 = dateTimeFieldType52.isSupported((org.joda.time.Chronology) gJChronology56);
        int int61 = localDateTime51.get(dateTimeFieldType52);
        int int62 = localDateTime44.get(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfDay();
        org.joda.time.DurationField durationField68 = gJChronology66.hours();
        org.joda.time.DurationField durationField69 = gJChronology66.years();
        boolean boolean70 = dateTimeFieldType52.isSupported((org.joda.time.Chronology) gJChronology66);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType52.getDurationType();
        org.joda.time.DateTime dateTime73 = dateTime31.withField(dateTimeFieldType52, 479);
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime16", (mutableDateTime1.compareTo(dateTime16) == 0) == mutableDateTime1.equals(dateTime16));
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0699");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime22.toMutableDateTime((org.joda.time.Chronology) gJChronology28);
        org.joda.time.DurationField durationField33 = gJChronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.minuteOfDay();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale38);
        java.lang.String str42 = nameProvider37.getName(locale38, "secondOfMinute", "Etc/UTC");
        java.lang.String str43 = locale38.getDisplayLanguage();
        java.lang.String str44 = locale38.getDisplayName();
        java.lang.String str45 = dateTimeField35.getAsShortText(1645427848717L, locale38);
        java.util.Calendar calendar46 = mutableDateTime3.toCalendar(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime16", (mutableDateTime3.compareTo(dateTime16) == 0) == mutableDateTime3.equals(dateTime16));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField18 = gJChronology3.eras();
        org.joda.time.DurationField durationField19 = gJChronology3.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField19, and durationField18", !(durationField18.compareTo(durationField19) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField19.compareTo(durationField18))));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(26252);
        int int17 = dateTime16.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime14", (dateTime10.compareTo(dateTime14) == 0) == dateTime10.equals(dateTime14));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0702");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long4 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.centuryOfEra();
        long long31 = gJChronology27.set((org.joda.time.ReadablePartial) localDateTime28, (long) (-1));
        org.joda.time.DurationField durationField32 = gJChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.era();
        org.joda.time.DateTime dateTime34 = dateTime8.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime34", (dateTime5.compareTo(dateTime34) == 0) == dateTime5.equals(dateTime34));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight19 = dateTime11.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfDay(0);
        org.joda.time.DateTime dateTime29 = dateTime27.withYear((int) '#');
        org.joda.time.DateTime dateTime31 = dateTime29.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(1L);
        boolean boolean37 = dateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime31.minus(readablePeriod38);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str43 = dateTimeZone42.getID();
        boolean boolean44 = dateTimeZone42.isFixed();
        long long46 = dateTimeZone42.convertUTCToLocal((long) (byte) 0);
        int int48 = dateTimeZone42.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone42);
        int int50 = localDateTime49.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withField(dateTimeFieldType51, (int) (short) 0);
        org.joda.time.DateTime.Property property54 = dateTime39.property(dateTimeFieldType51);
        java.lang.String str55 = dateTimeFieldType51.getName();
        int int56 = dateTime11.get(dateTimeFieldType51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime25", (mutableDateTime10.compareTo(dateTime25) == 0) == mutableDateTime10.equals(dateTime25));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0704");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.hourOfHalfday();
        org.joda.time.DurationField durationField27 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = instant19.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        long long41 = dateTimeZone37.convertLocalToUTC((long) 1, false);
        long long43 = dateTimeZone37.previousTransition((long) 5);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        mutableDateTime29.setZoneRetainFields(dateTimeZone37);
        long long47 = dateTimeZone37.convertUTCToLocal((long) 1898);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime29", (instant19.compareTo(mutableDateTime29) == 0) == instant19.equals(mutableDateTime29));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0705");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        boolean boolean32 = dateTime28.isAfter((-94232602002L));
        org.joda.time.DateTime dateTime34 = dateTime28.plusHours(19);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Chronology chronology31 = gJChronology18.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime13.withZone(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime32", (dateTime8.compareTo(dateTime32) == 0) == dateTime8.equals(dateTime32));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillis(15831244800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime14", (dateTime12.compareTo(dateTime14) == 0) == dateTime12.equals(dateTime14));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0708");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 9);
        int int26 = property11.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology30.getZone();
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.year();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime44.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime38.property(dateTimeFieldType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime41", (dateTime8.compareTo(mutableDateTime41) == 0) == dateTime8.equals(mutableDateTime41));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0709");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        int int8 = localDateTime7.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusDays((int) (short) -1);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusHours(22);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusHours(60);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        int int27 = localDateTime25.get(dateTimeFieldType26);
        boolean boolean28 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minusSeconds(0);
        int int33 = localDateTime25.getDayOfWeek();
        int int34 = localDateTime25.getWeekOfWeekyear();
        java.util.Locale locale36 = null;
        java.lang.String str37 = localDateTime25.toString("26161757", locale36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime25.withDurationAdded(readableDuration38, 26189);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime40);
        int[] intArray42 = localDateTime41.getValues();
        int[] intArray44 = dateTimeField2.add((org.joda.time.ReadablePartial) localDateTime7, 26483, intArray42, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime1 and localDateTime7", (localDateTime1.compareTo(localDateTime7) == 0) == localDateTime1.equals(localDateTime7));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(9);
        int int34 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds(26147);
        int int46 = localDateTime43.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalDateTime localDateTime49 = property47.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType64.getField((org.joda.time.Chronology) gJChronology68);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = dateTimeZone75.getShortName((long) 2022, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = dateTimeField73.getAsText((int) '4', locale77);
        java.lang.String str81 = locale77.getISO3Language();
        java.lang.String str82 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale77);
        java.util.Locale.setDefault(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime62 and localDateTime63", (localDateTime62.compareTo(localDateTime63) == 0) == localDateTime62.equals(localDateTime63));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0711");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusMonths(292278993);
        org.joda.time.DateTime dateTime8 = dateTime6.minusSeconds(26189);
        org.joda.time.DateTime.Property property9 = dateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str51 = nameProvider46.getName(locale47, "secondOfMinute", "Etc/UTC");
        java.lang.String str52 = locale47.getDisplayLanguage();
        int int53 = dateTimeField45.getMaximumShortTextLength(locale47);
        java.lang.String str54 = locale47.getScript();
        java.lang.String str55 = locale47.getVariant();
        int int56 = property15.getMaximumTextLength(locale47);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale58);
        java.lang.String str62 = nameProvider57.getName(locale58, "secondOfMinute", "Etc/UTC");
        java.lang.String str63 = locale58.getDisplayLanguage();
        java.lang.String str64 = property15.getAsText(locale58);
        java.lang.String str65 = property9.getAsText(locale58);
        java.lang.String str66 = locale1.getDisplayName(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and mutableDateTime26", (dateTime3.compareTo(mutableDateTime26) == 0) == dateTime3.equals(mutableDateTime26));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0712");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.DateTime dateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime10 = property7.getDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minus((long) (-2179));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DurationField durationField19 = gJChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.era();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime18", (mutableDateTime1.compareTo(dateTime18) == 0) == mutableDateTime1.equals(dateTime18));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0713");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 5, 0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant3.withDurationAdded(readableDuration4, (int) (short) 10);
        org.joda.time.Instant instant8 = instant3.minus((long) 26150);
        org.joda.time.Chronology chronology9 = instant3.getChronology();
        org.joda.time.Instant instant12 = instant3.withDurationAdded((-166046260L), 26251275);
        boolean boolean14 = instant12.isEqual((long) (-2179));
        org.joda.time.Chronology chronology15 = instant12.getChronology();
        org.joda.time.DateTime dateTime16 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = dateTimeZone26.getShortName((long) 2022, locale28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int[] intArray32 = gJChronology20.get((org.joda.time.ReadablePartial) localDateTime30, 7L);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology20.getZone();
        org.joda.time.DateTime dateTime36 = dateTime16.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(1645514285600L);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.withDurationAdded(readableDuration39, 26330);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = dateTime38.minusMinutes(26261);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime16", (instant12.compareTo(dateTime16) == 0) == instant12.equals(dateTime16));
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekyear(26149);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = gJChronology18.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology18.minutes();
        org.joda.time.DurationField durationField23 = durationFieldType14.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime25 = dateTime13.withFieldAdded(durationFieldType14, (int) '4');
        int int26 = dateTime25.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        int int30 = dateTime29.getMillisOfSecond();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMinutes((int) (short) 0);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfEra(436);
        org.joda.time.DateTime dateTime36 = dateTime34.plusYears(1);
        org.joda.time.DateTime.Property property37 = dateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = dateTime36.toLocalDateTime();
        boolean boolean39 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime28", (dateTime5.compareTo(mutableDateTime28) == 0) == dateTime5.equals(mutableDateTime28));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0715");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime5 = localDateTime1.toDateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(2051);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        boolean boolean14 = property13.isLeap();
        org.joda.time.LocalDateTime localDateTime15 = property13.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        boolean boolean25 = localDateTime15.equals((java.lang.Object) property23);
        org.joda.time.DateTime dateTime26 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.era();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfCeiling();
        java.util.Locale locale33 = new java.util.Locale("26", "halfdays");
        java.lang.String str34 = property29.getAsText(locale33);
        org.joda.time.MutableDateTime mutableDateTime36 = property29.addWrapField(26173);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.yearOfEra();
        org.joda.time.DurationField durationField43 = gJChronology40.halfdays();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = dateTimeZone44.getShortName((long) 2022, locale46);
        long long50 = dateTimeZone44.adjustOffset((long) 2, false);
        org.joda.time.Chronology chronology51 = gJChronology40.withZone(dateTimeZone44);
        boolean boolean52 = property29.equals((java.lang.Object) chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime26, chronology51);
        boolean boolean54 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        java.lang.String str59 = gJChronology58.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.era();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology58.era();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology58.halfdayOfDay();
        org.joda.time.DurationField durationField65 = gJChronology58.months();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology58.minuteOfDay();
        org.joda.time.DurationField durationField67 = gJChronology58.minutes();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology58.era();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology58.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime53", (dateTime26.compareTo(dateTime53) == 0) == dateTime26.equals(dateTime53));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.halfdayOfDay();
        long long15 = dateTimeField13.remainder((long) 52);
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField23.getType();
        java.lang.String str25 = dateTimeField23.toString();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = localDateTime29.get(dateTimeFieldType30);
        boolean boolean32 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = dateTimeZone40.getShortName((long) 2022, locale42);
        java.lang.String str44 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 295, locale42);
        java.util.Locale.setDefault(category16, locale42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = mutableDateTime56.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime57.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime61 = dateTime57.withPeriodAdded(readablePeriod59, 0);
        int int62 = dateTime57.getSecondOfDay();
        org.joda.time.DateTime.Property property63 = dateTime57.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        java.lang.String str69 = gJChronology68.toString();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.era();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology68.minuteOfDay();
        org.joda.time.DurationField durationField73 = gJChronology68.seconds();
        boolean boolean74 = dateTimeZone53.equals((java.lang.Object) gJChronology68);
        org.joda.time.DateTimeField dateTimeField75 = gJChronology68.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider77 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale78);
        java.lang.String str82 = nameProvider77.getName(locale78, "secondOfMinute", "Etc/UTC");
        java.lang.String str83 = locale78.getDisplayLanguage();
        java.lang.String str84 = dateTimeField75.getAsText(4528800000L, locale78);
        boolean boolean85 = locale78.hasExtensions();
        java.lang.String str86 = locale78.getScript();
        java.util.Locale.setDefault(category16, locale78);
        int int88 = dateTimeField13.getMaximumShortTextLength(locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime56", (dateTime9.compareTo(mutableDateTime56) == 0) == dateTime9.equals(mutableDateTime56));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0717");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.DateTime dateTime17 = dateTime9.withFieldAdded(durationFieldType14, 26181);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.yearOfCentury();
        org.joda.time.DurationField durationField25 = gJChronology21.minutes();
        org.joda.time.DurationField durationField26 = gJChronology21.millis();
        org.joda.time.DurationField durationField27 = gJChronology21.millis();
        boolean boolean28 = durationFieldType14.isSupported((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology21.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        int int38 = localDateTime36.get(dateTimeFieldType37);
        boolean boolean39 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime36.yearOfEra();
        java.lang.String str45 = property44.getAsShortText();
        org.joda.time.LocalDateTime localDateTime47 = property44.addToCopy((long) 26150);
        long long48 = property44.remainder();
        long long49 = property44.remainder();
        int int50 = property44.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime52 = property44.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime53 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        int int67 = localDateTime65.get(dateTimeFieldType66);
        boolean boolean68 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime65.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime65.yearOfEra();
        java.lang.String str74 = property73.getAsShortText();
        org.joda.time.LocalDateTime localDateTime75 = property73.roundHalfCeilingCopy();
        int int76 = property73.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime77 = property73.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.era();
        int int79 = localDateTime59.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        int[] intArray81 = gJChronology21.get((org.joda.time.ReadablePartial) localDateTime77, 1645514421945L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime59 and localDateTime61", (localDateTime59.compareTo(localDateTime61) == 0) == localDateTime59.equals(localDateTime61));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        java.util.Date date19 = mutableDateTime18.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 26149);
        int int31 = dateTimeFormatter28.getDefaultYear();
        int int32 = dateTimeFormatter28.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter28.withDefaultYear(8);
        boolean boolean35 = dateTime24.equals((java.lang.Object) dateTimeFormatter28);
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime24.minus(readablePeriod37);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.withWeekyear(21);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.minuteOfHour();
        org.joda.time.DurationField durationField49 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.secondOfMinute();
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology55.getZone();
        java.lang.String str59 = dateTimeZone57.getName((long) 26155);
        org.joda.time.Chronology chronology60 = gJChronology51.withZone(dateTimeZone57);
        long long62 = dateTimeZone57.previousTransition((long) 26167);
        org.joda.time.Chronology chronology63 = gJChronology45.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime64 = dateTime41.toDateTime(chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.secondOfMinute();
        org.joda.time.DateTime dateTime66 = property65.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime64", (dateTime41.compareTo(dateTime64) == 0) == dateTime41.equals(dateTime64));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0719");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        int int12 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.withPeriodAdded(readablePeriod17, 0);
        int int20 = dateTime15.getSecondOfDay();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime10.addDays(26147);
        int int24 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime10);
        java.lang.String str25 = mutableDateTime10.toString();
        mutableDateTime10.addSeconds(26175);
        mutableDateTime10.addMinutes(26169);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime36.withMinuteOfHour(0);
        boolean boolean41 = dateTime40.isEqualNow();
        org.joda.time.DateTime dateTime44 = dateTime40.withDurationAdded((long) 2000, 26148);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = mutableDateTime48.toDateTimeISO();
        int int50 = mutableDateTime46.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = mutableDateTime52.toDateTimeISO();
        org.joda.time.DateTime.Property property54 = dateTime53.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.withPeriodAdded(readablePeriod55, 0);
        int int58 = dateTime53.getSecondOfDay();
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime61 = dateTime53.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMillis(100);
        boolean boolean64 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime61);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology70.weekyear();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology70.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = gJChronology70.add(readablePeriod76, 16993L, (int) (byte) 10);
        org.joda.time.DateTime dateTime80 = mutableDateTime10.toDateTime((org.joda.time.Chronology) gJChronology70);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology70.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime80", (mutableDateTime10.compareTo(dateTime80) == 0) == mutableDateTime10.equals(dateTime80));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0720");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.era();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundFloor();
        int int18 = mutableDateTime17.getRoundingMode();
        org.joda.time.DateTime dateTime19 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfMonth();
        boolean boolean30 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology24);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime17.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationField durationField32 = gJChronology24.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime31", (mutableDateTime15.compareTo(mutableDateTime31) == 0) == mutableDateTime15.equals(mutableDateTime31));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0721");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime2.minusMinutes(13);
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(26318);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(33);
        java.lang.Object obj13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType15.getField((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DurationField durationField25 = gJChronology19.hours();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(26153);
        int int29 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        int int31 = localDateTime26.get(dateTimeFieldType30);
        boolean boolean32 = dateTime12.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime14 and localDateTime26", (localDateTime14.compareTo(localDateTime26) == 0) == localDateTime14.equals(localDateTime26));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0722");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime6.minus(readablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.add(26182);
        boolean boolean27 = dateTime6.equals((java.lang.Object) 26182);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime6", (dateTime17.compareTo(dateTime6) == 0) == dateTime17.equals(dateTime6));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0723");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime3.add(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime3.property(dateTimeFieldType43);
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (byte) 10);
        int int52 = property44.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime48.plus(readableDuration53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMonths(26224);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58, (int) (short) 1);
        java.lang.String str61 = gJChronology60.toString();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology60);
        org.joda.time.DateTime dateTime64 = dateTime62.withMillisOfDay(0);
        org.joda.time.DateTime dateTime66 = dateTime64.withYear((int) '#');
        org.joda.time.DateTime dateTime68 = dateTime64.withWeekyear(26149);
        org.joda.time.DateTime dateTime70 = dateTime64.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = gJChronology75.withZone(dateTimeZone77);
        org.joda.time.DurationField durationField79 = gJChronology75.minutes();
        org.joda.time.DurationField durationField80 = durationFieldType71.getField((org.joda.time.Chronology) gJChronology75);
        org.joda.time.DateTime dateTime82 = dateTime70.withFieldAdded(durationFieldType71, (int) '4');
        org.joda.time.DateTime dateTime84 = dateTime82.plusDays(26156);
        org.joda.time.DateTime.Property property85 = dateTime84.secondOfDay();
        org.joda.time.DateTime dateTime87 = dateTime84.withYear((-62750278));
        boolean boolean88 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime62", (mutableDateTime1.compareTo(dateTime62) == 0) == mutableDateTime1.equals(dateTime62));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0724");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.Instant instant13 = instant10.withDurationAdded((long) '4', 15);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, 2);
        org.joda.time.DateTime dateTime17 = instant13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology21.getZone();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readablePeriod30);
        boolean boolean32 = instant13.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime28", (dateTime9.compareTo(dateTime28) == 0) == dateTime9.equals(dateTime28));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 9);
        int int26 = property11.getDifference((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology30.getZone();
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology30);
        mutableDateTime38.addWeekyears(26465);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withPeriodAdded(readablePeriod45, 0);
        org.joda.time.DateTime.Property property48 = dateTime47.hourOfDay();
        org.joda.time.Chronology chronology49 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime47.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime54 = dateTime51.minus((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.yearOfEra();
        org.joda.time.DurationField durationField62 = gJChronology59.halfdays();
        org.joda.time.DurationField durationField63 = gJChronology59.centuries();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfMonth();
        boolean boolean65 = dateTimeFieldType55.isSupported((org.joda.time.Chronology) gJChronology59);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType55.getDurationType();
        org.joda.time.DateTime.Property property67 = dateTime51.property(dateTimeFieldType55);
        org.joda.time.DateTime.Property property68 = dateTime51.millisOfSecond();
        org.joda.time.DateTime dateTime70 = dateTime51.withYear(0);
        int int71 = mutableDateTime38.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime42", (dateTime8.compareTo(mutableDateTime42) == 0) == dateTime8.equals(mutableDateTime42));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfMinute();
        long long14 = dateTimeField12.roundHalfEven(3903232621682L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.era();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology18.add(readablePeriod24, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        boolean boolean37 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        int[] intArray53 = localDateTime50.getValues();
        int int54 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime57 = property55.setCopy("303");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime31", (localDateTime30.compareTo(localDateTime31) == 0) == localDateTime30.equals(localDateTime31));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(26370);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 51);
        java.lang.String str31 = dateTimeZone29.getName(4537020646L);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        org.joda.time.Chronology chronology46 = dateTimeFormatter45.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = dateTimeFormatter45.getPrinter();
        int int48 = dateTimeFormatter45.getDefaultYear();
        int int49 = dateTimeFormatter45.getDefaultYear();
        boolean boolean50 = dateTimeFormatter45.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.monthOfYear();
        org.joda.time.Instant instant58 = gJChronology54.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.dayOfWeek();
        org.joda.time.DurationField durationField60 = gJChronology54.halfdays();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = mutableDateTime64.toDateTimeISO();
        int int66 = mutableDateTime62.compareTo((org.joda.time.ReadableInstant) mutableDateTime64);
        mutableDateTime64.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime64.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology73.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology73.getZone();
        java.lang.String str78 = dateTimeZone77.getID();
        boolean boolean80 = dateTimeZone77.isStandardOffset(2L);
        mutableDateTime64.setZone(dateTimeZone77);
        org.joda.time.Chronology chronology82 = gJChronology54.withZone(dateTimeZone77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter45.withZone(dateTimeZone77);
        long long85 = dateTimeZone40.getMillisKeepLocal(dateTimeZone77, (long) 295);
        java.lang.String str87 = dateTimeZone77.getShortName(1645514209509L);
        java.lang.String str89 = dateTimeZone77.getNameKey((long) 26226);
        org.joda.time.DateTime dateTime90 = dateTime24.toDateTime(dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime32", (dateTime10.compareTo(dateTime32) == 0) == dateTime10.equals(dateTime32));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0728");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(611);
        org.joda.time.DateTime dateTime7 = dateTime3.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.clockhourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime7.toDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1645514167449L, (org.joda.time.Chronology) gJChronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime18", (dateTime7.compareTo(dateTime18) == 0) == dateTime7.equals(dateTime18));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0729");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear(23);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = gJChronology12.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = gJChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology12.add(readablePeriod18, 4537011236L, 26175);
        org.joda.time.DurationField durationField22 = gJChronology12.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) gJChronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField22", Math.signum(durationField16.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField16)));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0730");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        org.joda.time.DurationField durationField15 = gJChronology10.days();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.millisOfSecond();
        org.joda.time.DurationField durationField17 = gJChronology10.years();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField17", (durationField13.compareTo(durationField17) == 0) == durationField13.equals(durationField17));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0731");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology16 = gJChronology4.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone15);
        int int19 = dateTimeZone15.getOffset(1645514242000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime17", (dateTime13.compareTo(dateTime17) == 0) == dateTime13.equals(dateTime17));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0732");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime();
        boolean boolean16 = dateTime15.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime14", (dateTime15.compareTo(dateTime14) == 0) == dateTime15.equals(dateTime14));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withOffsetParsed();
        java.util.Locale locale42 = dateTimeFormatter41.getLocale();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology47);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        org.joda.time.Chronology chronology60 = gJChronology47.withZone(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter41.withZone(dateTimeZone59);
        boolean boolean66 = gJChronology33.equals((java.lang.Object) dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology33.millisOfDay();
        org.joda.time.DurationField durationField71 = gJChronology33.weekyears();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime29.toMutableDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology33.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime72", (mutableDateTime10.compareTo(mutableDateTime72) == 0) == mutableDateTime10.equals(mutableDateTime72));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0734");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfDay();
        int int19 = localDateTime16.size();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withDurationAdded(readableDuration20, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plus(readablePeriod23);
        int int25 = localDateTime24.getEra();
        java.util.Date date26 = localDateTime24.toDate();
        int int27 = localDateTime24.getYear();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.era();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.minuteOfDay();
        org.joda.time.DurationField durationField37 = durationFieldType28.getField((org.joda.time.Chronology) gJChronology32);
        org.joda.time.Instant instant38 = gJChronology32.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        int int44 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = mutableDateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime47.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.withPeriodAdded(readablePeriod49, 0);
        int int52 = dateTime47.getSecondOfDay();
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime55 = dateTime47.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis(100);
        org.joda.time.DateTime dateTime58 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        boolean boolean60 = dateTime57.isSupported(dateTimeFieldType59);
        boolean boolean61 = instant38.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) instant38);
        java.util.GregorianCalendar gregorianCalendar63 = dateTime62.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65, (int) (short) 1);
        java.lang.String str68 = gJChronology67.toString();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology67);
        org.joda.time.DateTime dateTime71 = dateTime69.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime69.getZone();
        org.joda.time.DateTime dateTime74 = dateTime69.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property75 = dateTime69.centuryOfEra();
        org.joda.time.DateTime dateTime76 = property75.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime77 = property75.roundCeilingCopy();
        org.joda.time.DateTime dateTime78 = property75.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime80 = property75.setCopy("20");
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property82 = dateTime81.secondOfDay();
        java.util.Locale locale85 = new java.util.Locale("zh_CN", "26161757");
        java.util.Locale locale86 = java.util.Locale.ITALY;
        java.lang.String str87 = locale86.getDisplayName();
        java.util.Locale locale88 = locale86.stripExtensions();
        java.lang.String str89 = locale85.getDisplayScript(locale88);
        boolean boolean90 = locale88.hasExtensions();
        int int91 = property82.getMaximumTextLength(locale88);
        java.util.Calendar calendar92 = dateTime62.toCalendar(locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime58 and dateTime71", (dateTime58.compareTo(dateTime71) == 0) == dateTime58.equals(dateTime71));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0735");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.yearOfEra();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 26150);
        long long15 = property11.remainder();
        long long16 = property11.remainder();
        int int17 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime20 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withDurationAdded(readableDuration29, 44364);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean33 = localDateTime28.isSupported(durationFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime26 and localDateTime28", (localDateTime26.compareTo(localDateTime28) == 0) == localDateTime26.equals(localDateTime28));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMinutes(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDateTime22.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        boolean boolean31 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withDayOfWeek(5);
        int int34 = localDateTime28.getYear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withDurationAdded(readableDuration37, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withMillisOfDay(26147);
        int int42 = localDateTime36.getDayOfWeek();
        org.joda.time.Chronology chronology43 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.plusYears((-26165));
        org.joda.time.LocalDateTime localDateTime46 = localDateTime22.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        java.lang.String str52 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.yearOfEra();
        int int57 = dateTimeField55.getMinimumValue(1645514151595L);
        int int59 = dateTimeField55.get((long) 26150);
        long long62 = dateTimeField55.add((long) 192, (long) 26152);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = mutableDateTime64.toDateTimeISO();
        org.joda.time.DateTime.Property property66 = dateTime65.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.withPeriodAdded(readablePeriod67, 0);
        org.joda.time.DateTime.Property property70 = dateTime69.hourOfDay();
        org.joda.time.Chronology chronology71 = dateTime69.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime69.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        org.joda.time.DateTime.Property property78 = dateTime77.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime81 = dateTime77.withPeriodAdded(readablePeriod79, 0);
        int int82 = dateTime77.getSecondOfDay();
        org.joda.time.DateTime.Property property83 = dateTime77.minuteOfHour();
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale84);
        java.lang.String str86 = property83.getAsText(locale84);
        java.lang.String str87 = locale84.getVariant();
        int int88 = property74.getMaximumTextLength(locale84);
        int int89 = dateTimeField55.getMaximumShortTextLength(locale84);
        java.util.Set<java.lang.String> strSet90 = locale84.getUnicodeLocaleAttributes();
        java.lang.String str91 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, 44223676, locale84);
        java.util.Locale locale93 = new java.util.Locale("centuries");
        java.lang.String str94 = locale93.getISO3Country();
        java.util.Locale locale95 = locale93.stripExtensions();
        java.lang.String str96 = locale93.getCountry();
        java.lang.String str97 = locale84.getDisplayVariant(locale93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime64", (dateTime5.compareTo(mutableDateTime64) == 0) == dateTime5.equals(mutableDateTime64));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0737");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime26 = dateTime18.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(100);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear(26154);
        org.joda.time.DateTime dateTime33 = dateTime28.minusMillis(949);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfEra();
        org.joda.time.DurationField durationField40 = gJChronology37.halfdays();
        org.joda.time.DurationField durationField41 = gJChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.dayOfMonth();
        org.joda.time.DurationField durationField43 = gJChronology37.hours();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology37.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTime dateTime47 = dateTime33.withChronology((org.joda.time.Chronology) gJChronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime46", (mutableDateTime1.compareTo(mutableDateTime46) == 0) == mutableDateTime1.equals(mutableDateTime46));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.minus(readableDuration12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime11", (dateTime9.compareTo(dateTime11) == 0) == dateTime9.equals(dateTime11));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DurationField durationField16 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField17 = gJChronology11.halfdays();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime4.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime18", (mutableDateTime4.compareTo(mutableDateTime18) == 0) == mutableDateTime4.equals(mutableDateTime18));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0740");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(26163);
        java.lang.String str8 = dateTime5.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded(readableDuration9, 26270);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str19 = dateTimeZone12.getShortName(874L);
        org.joda.time.DateTime dateTime20 = dateTime5.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime22 = dateTime5.minusDays(26265);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime17", (dateTime5.compareTo(dateTime17) == 0) == dateTime5.equals(dateTime17));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0741");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusHours(10);
        boolean boolean18 = dateTimeZone1.equals((java.lang.Object) localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 44219160, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Chronology chronology37 = gJChronology24.withZone(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC(4518960813L, true, 0L);
        long long44 = dateTimeZone36.adjustOffset(0L, false);
        org.joda.time.DateTime dateTime45 = dateTime19.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(26260);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(26350);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str53 = dateTimeZone52.getID();
        boolean boolean54 = dateTimeZone52.isFixed();
        long long56 = dateTimeZone52.convertUTCToLocal((long) (byte) 0);
        int int58 = dateTimeZone52.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone52);
        int int60 = localDateTime59.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        int int66 = localDateTime64.get(dateTimeFieldType65);
        boolean boolean67 = localDateTime62.isAfter((org.joda.time.ReadablePartial) localDateTime64);
        boolean boolean68 = localDateTime59.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime.Property property69 = localDateTime62.weekOfWeekyear();
        boolean boolean70 = dateTime50.equals((java.lang.Object) property69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime28 and localDateTime59", (localDateTime28.compareTo(localDateTime59) == 0) == localDateTime28.equals(localDateTime59));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = property11.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField15 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight35 = dateTime27.toDateMidnight();
        int int36 = property11.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime26", (dateTime5.compareTo(mutableDateTime26) == 0) == dateTime5.equals(mutableDateTime26));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0743");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 0);
        int int19 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime14.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.era();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.minuteOfDay();
        org.joda.time.DurationField durationField30 = gJChronology25.seconds();
        boolean boolean31 = dateTimeZone10.equals((java.lang.Object) gJChronology25);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology25.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale34);
        java.lang.String str38 = nameProvider33.getName(locale34, "secondOfMinute", "Etc/UTC");
        java.lang.String str39 = locale34.getDisplayLanguage();
        int int40 = dateTimeField32.getMaximumShortTextLength(locale34);
        java.lang.String str41 = locale34.getScript();
        java.lang.String str42 = locale34.getVariant();
        boolean boolean43 = property2.equals((java.lang.Object) str42);
        org.joda.time.DateTime dateTime44 = property2.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withPeriodAdded(readablePeriod45, 26196);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology51.getZone();
        org.joda.time.DurationField durationField54 = gJChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.hourOfHalfday();
        org.joda.time.DurationField durationField56 = gJChronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.dayOfMonth();
        org.joda.time.DateTime dateTime58 = dateTime44.toDateTime((org.joda.time.Chronology) gJChronology51);
        int int59 = dateTime44.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and dateTime58", (dateTime44.compareTo(dateTime58) == 0) == dateTime44.equals(dateTime58));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime(chronology20);
        java.lang.String str23 = dateTime21.toString("1970");
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        java.lang.String str40 = gJChronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.monthOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology39);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 9);
        int int50 = property35.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology54.getZone();
        org.joda.time.DateTime dateTime61 = dateTime46.toDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField62 = gJChronology54.seconds();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime21.toMutableDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField64 = gJChronology54.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime21", (dateTime9.compareTo(dateTime21) == 0) == dateTime9.equals(dateTime21));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime13 and localDateTime18", (localDateTime13.compareTo(localDateTime18) == 0) == localDateTime13.equals(localDateTime18));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0746");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime3.copy();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime3.add(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(1L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusDays((int) (short) -1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        java.util.Date date22 = localDateTime19.toDate();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withPeriodAdded(readablePeriod23, (int) (byte) -1);
        java.lang.Object obj26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withField(dateTimeFieldType29, 523);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.halfdayOfDay();
        org.joda.time.DurationField durationField39 = gJChronology36.years();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType29.getField((org.joda.time.Chronology) gJChronology36);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime13.property(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType29.getDurationType();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime3.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        java.lang.String str48 = gJChronology47.toString();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology47);
        org.joda.time.DurationField durationField50 = gJChronology47.halfdays();
        org.joda.time.DurationField durationField51 = gJChronology47.years();
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType29.getField((org.joda.time.Chronology) gJChronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime49", (mutableDateTime1.compareTo(dateTime49) == 0) == mutableDateTime1.equals(dateTime49));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.Instant instant10 = instant7.minus((-1L));
        org.joda.time.Instant instant12 = instant7.plus(1645514158018L);
        org.joda.time.Instant instant14 = instant12.minus((long) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant12.minus(readableDuration15);
        org.joda.time.Instant instant19 = instant16.withDurationAdded(765923411980150L, 2547);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology3.era();
        org.joda.time.DurationField durationField18 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField20 = gJChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField20, and durationField18", !(durationField18.compareTo(durationField20) == 0) || (Math.signum(durationField18.compareTo(durationField18)) == Math.signum(durationField20.compareTo(durationField18))));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.secondOfDay();
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(0);
        int int31 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime15", (dateTime8.compareTo(mutableDateTime15) == 0) == dateTime8.equals(mutableDateTime15));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0750");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType1.getField((org.joda.time.Chronology) gJChronology5);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology5.getZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-72436L), dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        java.lang.String str20 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = gJChronology19.add(readablePeriod25, (long) 26155, 9);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTime dateTime32 = localDateTime29.toDateTime();
        java.util.Date date33 = localDateTime29.toDate();
        long long35 = gJChronology19.set((org.joda.time.ReadablePartial) localDateTime29, 4518963757L);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology19.millisOfSecond();
        org.joda.time.DurationField durationField40 = gJChronology19.minutes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTime dateTime42 = dateMidnight15.toDateTime((org.joda.time.Chronology) gJChronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime29 and localDateTime41", (localDateTime29.compareTo(localDateTime41) == 0) == localDateTime29.equals(localDateTime41));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0751");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        long long12 = dateTimeZone8.convertLocalToUTC((long) 1, false);
        long long14 = dateTimeZone8.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone8);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromDateFields(date17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = localDateTime23.get(dateTimeFieldType24);
        boolean boolean26 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis(10);
        int int37 = localDateTime34.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withCenturyOfEra(523);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusMinutes(24);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays(995);
        int int46 = localDateTime45.getYearOfEra();
        int int47 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime19.plusDays(26449);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.monthOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology53);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime60.minusWeeks(26152);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        boolean boolean66 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusDays((int) (short) -1);
        java.lang.String str70 = localDateTime69.toString();
        org.joda.time.Chronology chronology71 = localDateTime69.getChronology();
        java.util.Date date72 = localDateTime69.toDate();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime69.withPeriodAdded(readablePeriod73, (int) (byte) -1);
        java.lang.Object obj76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(obj76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.withField(dateTimeFieldType79, 523);
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType79.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.chrono.GJChronology gJChronology86 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone83, readableInstant84, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone87 = gJChronology86.getZone();
        org.joda.time.DateTimeField dateTimeField88 = gJChronology86.halfdayOfDay();
        org.joda.time.DurationField durationField89 = gJChronology86.years();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType79.getField((org.joda.time.Chronology) gJChronology86);
        int int91 = dateTime60.get(dateTimeFieldType79);
        int int92 = localDateTime49.get(dateTimeFieldType79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime58", (dateTime16.compareTo(dateTime58) == 0) == dateTime16.equals(dateTime58));
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DurationField durationField9 = property7.getDurationField();
        long long12 = durationField9.getMillis(26212, 0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        long long19 = dateTimeZone17.nextTransition((long) 26149);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField23 = gJChronology22.months();
        int int24 = durationField9.compareTo(durationField23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime20", (mutableDateTime1.compareTo(mutableDateTime20) == 0) == mutableDateTime1.equals(mutableDateTime20));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfEra();
        org.joda.time.DurationField durationField16 = gJChronology13.halfdays();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.secondOfMinute();
        org.joda.time.DurationField durationField20 = gJChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.dayOfYear();
        long long26 = gJChronology13.add((long) 26148, (long) 26185, 23);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime9.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology13.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime27", (dateTime8.compareTo(mutableDateTime27) == 0) == dateTime8.equals(mutableDateTime27));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0754");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        int int29 = dateTime28.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime28.getZone();
        boolean boolean32 = dateTime28.isAfter((-94232602002L));
        org.joda.time.DateTime dateTime34 = dateTime28.plusHours(19);
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0755");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        java.lang.String str33 = dateTimeZone32.getID();
        long long36 = dateTimeZone32.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        java.lang.String str41 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.monthOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        int int45 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) instant44);
        long long47 = dateTimeZone32.nextTransition((long) (-1));
        java.util.TimeZone timeZone48 = dateTimeZone32.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime24.toMutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DurationField durationField56 = gJChronology54.hours();
        java.lang.String str57 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYear((int) (byte) 10);
        int int68 = localDateTime65.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.withPeriodAdded(readablePeriod74, 0);
        int int77 = dateTime72.getSecondOfDay();
        org.joda.time.DateTime.Property property78 = dateTime72.minuteOfHour();
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale79);
        java.lang.String str81 = property78.getAsText(locale79);
        java.util.Locale locale82 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale82);
        java.lang.String str84 = locale82.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider85 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale86);
        java.lang.String str90 = nameProvider85.getName(locale86, "secondOfMinute", "Etc/UTC");
        java.lang.String str91 = locale86.getDisplayLanguage();
        java.lang.String str92 = locale82.getDisplayVariant(locale86);
        java.lang.String str93 = locale79.getDisplayScript(locale82);
        java.lang.String str94 = localDateTime65.toString("192", locale79);
        java.lang.String str95 = locale79.getCountry();
        int int96 = dateTimeField59.getMaximumShortTextLength(locale79);
        java.lang.String str97 = locale79.getISO3Country();
        java.lang.String str98 = dateTimeZone32.getShortName(1641609845574L, locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime24", (dateTime10.compareTo(dateTime24) == 0) == dateTime10.equals(dateTime24));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0756");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.getID();
        boolean boolean9 = dateTimeZone7.isFixed();
        long long11 = dateTimeZone7.convertUTCToLocal((long) (byte) 0);
        long long13 = dateTimeZone7.convertUTCToLocal(20000L);
        long long17 = dateTimeZone7.convertLocalToUTC((long) 24, true, 1830550L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime();
        mutableDateTime22.setHourOfDay(2);
        mutableDateTime22.addMonths(2922790);
        int int27 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone29.getID();
        boolean boolean31 = dateTimeZone29.isFixed();
        long long33 = dateTimeZone29.convertUTCToLocal((long) (byte) 0);
        int int35 = dateTimeZone29.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone29);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId39 = timeZone38.toZoneId();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone(zoneId39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime(dateTimeZone41);
        long long46 = dateTimeZone7.getMillisKeepLocal(dateTimeZone41, 951236172466L);
        mutableDateTime6.setZone(dateTimeZone7);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59, (int) (short) 1);
        java.lang.String str62 = gJChronology61.toString();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.era();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime55.toMutableDateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DurationField durationField66 = durationFieldType49.getField((org.joda.time.Chronology) gJChronology61);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((java.lang.Object) 2L, (org.joda.time.Chronology) gJChronology61);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology61.era();
        java.lang.String str70 = gJChronology61.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology61.secondOfDay();
        int int72 = mutableDateTime6.get(dateTimeField71);
        mutableDateTime6.setWeekyear(26173);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime42 and dateTime55", (mutableDateTime42.compareTo(dateTime55) == 0) == mutableDateTime42.equals(dateTime55));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField8 = gJChronology3.eras();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 1645514228123L, 47);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.era();
        boolean boolean26 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        int int27 = property19.getDifference((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withPeriodAdded(readablePeriod33, 0);
        int int36 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = property37.getAsText(locale38);
        java.lang.String str41 = locale38.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime42 = property19.setCopy("26", locale38);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfEra(5);
        int[] intArray46 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime42, (long) 38090);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime21", (mutableDateTime7.compareTo(mutableDateTime21) == 0) == mutableDateTime7.equals(mutableDateTime21));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0758");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.era();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(0);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.withPeriodAdded(readablePeriod28, 26148);
        org.joda.time.DateTime.Property property31 = dateTime27.era();
        org.joda.time.DateTime dateTime32 = property31.roundCeilingCopy();
        org.joda.time.DateTime dateTime33 = property31.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        org.joda.time.Chronology chronology51 = gJChronology38.withZone(dateTimeZone50);
        long long55 = dateTimeZone50.convertLocalToUTC(4518960813L, true, 0L);
        long long58 = dateTimeZone50.adjustOffset(0L, false);
        org.joda.time.DateTime dateTime59 = dateTime33.toDateTime(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.Chronology chronology61 = gJChronology12.withZone(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime60", (dateTime6.compareTo(mutableDateTime60) == 0) == dateTime6.equals(mutableDateTime60));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        long long16 = gJChronology3.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusDays((int) (short) -1);
        long long24 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime22, 826129497600000L);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime35 = property32.setCopy(0);
        java.util.Date date36 = localDateTime35.toDate();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromDateFields(date36);
        int int38 = localDateTime37.getMinuteOfHour();
        boolean boolean39 = gJChronology3.equals((java.lang.Object) int38);
        org.joda.time.DurationField durationField40 = gJChronology3.eras();
        org.joda.time.DurationField durationField41 = gJChronology3.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField40, durationField41, and durationField40", !(durationField40.compareTo(durationField41) == 0) || (Math.signum(durationField40.compareTo(durationField40)) == Math.signum(durationField41.compareTo(durationField40))));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0760");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        boolean boolean21 = mutableDateTime19.isBeforeNow();
        java.lang.Object obj22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.yearOfEra();
        org.joda.time.DurationField durationField29 = gJChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(obj22, (org.joda.time.Chronology) gJChronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime19.toMutableDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime31", (mutableDateTime1.compareTo(mutableDateTime31) == 0) == mutableDateTime1.equals(mutableDateTime31));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withSecondOfMinute(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withMonthOfYear(4);
        long long16 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime9, (long) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        int int22 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withPeriodAdded(readablePeriod27, 0);
        int int30 = dateTime25.getSecondOfDay();
        mutableDateTime20.setDate((org.joda.time.ReadableInstant) dateTime25);
        mutableDateTime20.setMillisOfDay((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str35 = dateTimeZone34.getID();
        boolean boolean36 = dateTimeZone34.isFixed();
        long long38 = dateTimeZone34.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime39.getZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime20, dateTimeZone41);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = dateTimeZone41.getShortName(0L, locale44);
        org.joda.time.Chronology chronology46 = gJChronology3.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField47 = gJChronology3.years();
        org.joda.time.DurationField durationField48 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField48, durationField6, and durationField47", !(durationField48.compareTo(durationField6) == 0) || (Math.signum(durationField48.compareTo(durationField47)) == Math.signum(durationField6.compareTo(durationField47))));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0762");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        boolean boolean7 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        java.lang.String str9 = mutableDateTime5.toString("15");
        mutableDateTime5.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.minuteOfHour();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDayOfWeek(5);
        int int30 = localDateTime24.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = dateTime20.getEra();
        int int35 = property12.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = dateTime20.minusMillis(999);
        int int38 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime20.plus(readablePeriod39);
        org.joda.time.DateTime.Property property41 = dateTime20.weekyear();
        int int42 = dateTime20.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime20", (dateTime0.compareTo(dateTime20) == 0) == dateTime0.equals(dateTime20));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0763");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str16 = dateTimeZone15.getID();
        boolean boolean17 = dateTimeZone15.isFixed();
        long long19 = dateTimeZone15.convertUTCToLocal((long) (byte) 0);
        int int21 = dateTimeZone15.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId25 = timeZone24.toZoneId();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone(zoneId25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime(dateTimeZone27);
        boolean boolean31 = dateTime12.equals((java.lang.Object) dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime28", (dateTime8.compareTo(mutableDateTime28) == 0) == dateTime8.equals(mutableDateTime28));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0764");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.addWeeks(4);
        org.joda.time.DateTime dateTime18 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(8);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.minus(readablePeriod21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType23.getField((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.clockhourOfDay();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology27);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = gJChronology27.add(readablePeriod37, 4519000290L, 26248);
        org.joda.time.DurationField durationField41 = gJChronology27.millis();
        org.joda.time.DurationField durationField42 = gJChronology27.weekyears();
        org.joda.time.DateTime dateTime43 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DurationField durationField44 = gJChronology27.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime43", (dateTime18.compareTo(dateTime43) == 0) == dateTime18.equals(dateTime43));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0765");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfSecond((int) '#');
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        long long24 = gJChronology18.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean25 = durationFieldType14.isSupported((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.withFieldAdded(durationFieldType14, 22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withPeriodAdded(readablePeriod32, 0);
        int int35 = dateTime30.getSecondOfDay();
        org.joda.time.DateTime.Property property36 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime38 = dateTime30.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str40 = durationFieldType39.getName();
        org.joda.time.DateTime dateTime42 = dateTime38.withFieldAdded(durationFieldType39, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.yearOfCentury();
        org.joda.time.DurationField durationField50 = gJChronology46.days();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.secondOfDay();
        org.joda.time.DateTime dateTime52 = dateTime38.withChronology((org.joda.time.Chronology) gJChronology46);
        boolean boolean53 = durationFieldType14.isSupported((org.joda.time.Chronology) gJChronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime52", (dateTime38.compareTo(dateTime52) == 0) == dateTime38.equals(dateTime52));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0766");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.lang.String str18 = dateTimeZone16.getName((long) 26150);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime26.getZone();
        org.joda.time.DateTime dateTime31 = dateTime26.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property32 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime34 = property32.addToCopy(7);
        int int35 = dateTime34.getDayOfYear();
        int int36 = dateTime34.getEra();
        int int37 = dateTime34.getDayOfWeek();
        boolean boolean38 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime26", (mutableDateTime14.compareTo(dateTime26) == 0) == mutableDateTime14.equals(dateTime26));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0767");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime10.plusDays(516);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(62167195440000L, 56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime11", (dateTime10.compareTo(dateTime11) == 0) == dateTime10.equals(dateTime11));
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0768");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        java.lang.String str7 = mutableDateTime3.toString("15");
        mutableDateTime3.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.minuteOfHour();
        int int11 = property10.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(26163);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis(26170);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis(26195);
        org.joda.time.DateTime dateTime27 = dateTime25.minusDays((-6));
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        int int38 = localDateTime36.get(dateTimeFieldType37);
        boolean boolean39 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minusSeconds(0);
        int int44 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property45 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime36.plusHours(15);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = dateTimeZone51.getShortName((long) 2022, locale53);
        java.lang.String str55 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, 21, locale53);
        java.util.Calendar calendar56 = dateTime25.toCalendar(locale53);
        boolean boolean57 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0769");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale1);
        java.lang.String str5 = nameProvider0.getName(locale1, "secondOfMinute", "Etc/UTC");
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.lang.String str7 = locale1.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.monthOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.yearOfCentury();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.Instant instant18 = gJChronology11.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.monthOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale40);
        java.lang.String str44 = nameProvider39.getName(locale40, "secondOfMinute", "Etc/UTC");
        java.lang.String str45 = locale40.getLanguage();
        java.util.Locale locale46 = locale40.stripExtensions();
        int int47 = property38.getMaximumShortTextLength(locale40);
        java.util.Set<java.lang.String> strSet48 = locale40.getUnicodeLocaleKeys();
        java.lang.String str49 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale40);
        java.lang.String str50 = locale1.getDisplayVariant(locale40);
        java.util.Locale locale51 = locale40.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology57.getZone();
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = mutableDateTime64.toDateTimeISO();
        org.joda.time.DateTime.Property property66 = dateTime65.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime65.withPeriodAdded(readablePeriod67, 0);
        int int70 = dateTime65.getSecondOfDay();
        org.joda.time.DateTime.Property property71 = dateTime65.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74, (int) (short) 1);
        java.lang.String str77 = gJChronology76.toString();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology76.era();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology76.minuteOfDay();
        org.joda.time.DurationField durationField81 = gJChronology76.seconds();
        boolean boolean82 = dateTimeZone61.equals((java.lang.Object) gJChronology76);
        org.joda.time.DateTimeField dateTimeField83 = gJChronology76.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider84 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale85);
        java.lang.String str89 = nameProvider84.getName(locale85, "secondOfMinute", "Etc/UTC");
        java.lang.String str90 = locale85.getDisplayLanguage();
        int int91 = dateTimeField83.getMaximumShortTextLength(locale85);
        java.lang.String str92 = locale53.getDisplayName(locale85);
        java.lang.String str93 = locale85.getVariant();
        java.util.Set<java.lang.Character> charSet94 = locale85.getExtensionKeys();
        java.lang.String str95 = locale85.getISO3Language();
        java.lang.String str96 = locale51.getDisplayLanguage(locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and mutableDateTime64", (dateTime35.compareTo(mutableDateTime64) == 0) == dateTime35.equals(mutableDateTime64));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0770");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        int int9 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond(345);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        java.lang.String str29 = dateTimeZone28.getID();
        boolean boolean31 = dateTimeZone28.isStandardOffset(2L);
        mutableDateTime15.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        int int38 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime36.setMillisOfDay((int) 'a');
        mutableDateTime36.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime36.add(readableDuration52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTimeISO();
        int int57 = dateTime56.getYearOfEra();
        boolean boolean58 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) dateTime56);
        java.util.GregorianCalendar gregorianCalendar59 = mutableDateTime36.toGregorianCalendar();
        long long60 = mutableDateTime36.getMillis();
        java.lang.String str61 = mutableDateTime36.toString();
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, (org.joda.time.ReadableInstant) mutableDateTime36);
        long long65 = dateTimeZone28.adjustOffset(9223120539630000000L, false);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime8.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property67 = dateTime8.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime13 and mutableDateTime66", (mutableDateTime13.compareTo(mutableDateTime66) == 0) == mutableDateTime13.equals(mutableDateTime66));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        boolean boolean13 = dateTime10.isBefore((long) 26167);
        org.joda.time.DateTime dateTime15 = dateTime10.withYear(26171);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.yearOfEra();
        org.joda.time.DateTime dateTime46 = dateTime15.withChronology((org.joda.time.Chronology) gJChronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime26", (dateTime8.compareTo(mutableDateTime26) == 0) == dateTime8.equals(mutableDateTime26));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0772");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType8.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField18 = gJChronology12.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(26153);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.withPeriodAdded(readablePeriod26, 0);
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.Chronology chronology30 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime28.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray36 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime19, 1645514176853L);
        org.joda.time.DurationField durationField37 = gJChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        java.lang.String str46 = dateTimeZone45.getID();
        long long49 = dateTimeZone45.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.monthOfYear();
        org.joda.time.Instant instant57 = gJChronology53.getGregorianCutover();
        int int58 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) instant57);
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.Chronology chronology62 = gJChronology3.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        java.lang.String str67 = gJChronology66.toString();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology66.monthOfYear();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology66.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = gJChronology66.add(readablePeriod72, (long) 26155, 9);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        boolean boolean78 = localDateTime76.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTime dateTime79 = localDateTime76.toDateTime();
        java.util.Date date80 = localDateTime76.toDate();
        long long82 = gJChronology66.set((org.joda.time.ReadablePartial) localDateTime76, 4518963757L);
        org.joda.time.DateTimeField dateTimeField83 = gJChronology66.millisOfDay();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology66.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology66.yearOfCentury();
        org.joda.time.DurationField durationField86 = gJChronology66.days();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology66);
        long long89 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime87, (long) 26246);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime19 and localDateTime76", (localDateTime19.compareTo(localDateTime76) == 0) == localDateTime19.equals(localDateTime76));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = property18.getAsShortText(locale21);
        java.lang.String str25 = property11.getAsText(locale21);
        org.joda.time.DateTime dateTime27 = property11.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight30 = dateTime29.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and mutableDateTime28", (dateTime27.compareTo(mutableDateTime28) == 0) == dateTime27.equals(mutableDateTime28));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0774");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology21.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        java.util.Date date19 = mutableDateTime18.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 26149);
        int int31 = dateTimeFormatter28.getDefaultYear();
        int int32 = dateTimeFormatter28.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter28.withDefaultYear(8);
        boolean boolean35 = dateTime24.equals((java.lang.Object) dateTimeFormatter28);
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime24.minus(readablePeriod37);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.withWeekyear(21);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.minuteOfHour();
        org.joda.time.DurationField durationField49 = gJChronology45.years();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.secondOfMinute();
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology55.getZone();
        java.lang.String str59 = dateTimeZone57.getName((long) 26155);
        org.joda.time.Chronology chronology60 = gJChronology51.withZone(dateTimeZone57);
        long long62 = dateTimeZone57.previousTransition((long) 26167);
        org.joda.time.Chronology chronology63 = gJChronology45.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime64 = dateTime41.toDateTime(chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.secondOfMinute();
        org.joda.time.DateTime dateTime66 = property65.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime64", (dateTime41.compareTo(dateTime64) == 0) == dateTime41.equals(dateTime64));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0776");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        long long20 = gJChronology14.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long24 = gJChronology14.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField25 = gJChronology14.days();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology30.years();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean37 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTime.Property property38 = dateTime10.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime36", (mutableDateTime1.compareTo(mutableDateTime36) == 0) == mutableDateTime1.equals(mutableDateTime36));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0777");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.withWeekyear(26153);
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(26147);
        int int23 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.era();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        int int30 = mutableDateTime29.getRoundingMode();
        org.joda.time.DateTime dateTime31 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime25.getFields();
        int int33 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.DateTime dateTime34 = property11.getDateTime();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 26275, dateTimeZone44);
        long long49 = dateTimeZone44.nextTransition(220924800100L);
        org.joda.time.DateTime dateTime50 = dateTime35.toDateTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.millisOfDay();
        org.joda.time.DurationField durationField59 = gJChronology54.halfdays();
        org.joda.time.DurationField durationField60 = gJChronology54.hours();
        org.joda.time.DurationField durationField61 = gJChronology54.days();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime67.getZone();
        int int72 = dateTimeZone70.getOffset((long) 26173);
        org.joda.time.Chronology chronology73 = gJChronology54.withZone(dateTimeZone70);
        long long75 = dateTimeZone44.getMillisKeepLocal(dateTimeZone70, (long) 705);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime67", (mutableDateTime1.compareTo(dateTime67) == 0) == mutableDateTime1.equals(dateTime67));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0778");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusSeconds(0);
        int int21 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime20.getEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(26390);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekyear(26408);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillisOfDay(0);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime38.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        long long52 = dateTimeZone49.convertLocalToUTC(32L, false);
        boolean boolean53 = property41.equals((java.lang.Object) false);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale54.getDisplayVariant();
        int int56 = property41.getMaximumTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType57.getField((org.joda.time.Chronology) gJChronology61);
        int int68 = dateTimeField66.getMaximumValue(0L);
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = locale69.getDisplayScript();
        java.lang.String str72 = locale69.toLanguageTag();
        int int73 = dateTimeField66.getMaximumTextLength(locale69);
        java.lang.String str74 = locale69.getDisplayName();
        java.lang.String str75 = locale54.getDisplayCountry(locale69);
        java.lang.String str76 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime34", (mutableDateTime1.compareTo(dateTime34) == 0) == mutableDateTime1.equals(dateTime34));
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0779");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 4537011236L, 26175);
        org.joda.time.DurationField durationField13 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField13", Math.signum(durationField7.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField7)));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0780");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DurationField durationField18 = gJChronology14.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0781");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        long long20 = gJChronology14.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long24 = gJChronology14.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField25 = gJChronology14.days();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology30.years();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean37 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.setMillisOfSecond(855);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime26", (dateTime10.compareTo(mutableDateTime26) == 0) == dateTime10.equals(mutableDateTime26));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        long long10 = dateTimeZone8.convertUTCToLocal((long) 26169);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.lang.String str13 = dateTimeZone8.getName((long) 16, locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone8);
        java.lang.String str15 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        java.lang.String str18 = dateTimeZone16.toString();
        long long20 = dateTimeZone8.getMillisKeepLocal(dateTimeZone16, (long) 81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime17", (dateTime5.compareTo(mutableDateTime17) == 0) == dateTime5.equals(mutableDateTime17));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.millisOfSecond();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTime dateTime34 = dateTime32.minusYears((-292275054));
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.plus(readablePeriod35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime32", (mutableDateTime10.compareTo(dateTime32) == 0) == mutableDateTime10.equals(dateTime32));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0784");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean3 = strSet1.remove((java.lang.Object) 2922790L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.era();
        boolean boolean17 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        int int18 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withPeriodAdded(readablePeriod24, 0);
        int int27 = dateTime22.getSecondOfDay();
        org.joda.time.DateTime.Property property28 = dateTime22.minuteOfHour();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = property28.getAsText(locale29);
        java.lang.String str32 = locale29.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime33 = property10.setCopy("26", locale29);
        boolean boolean34 = strSet1.remove((java.lang.Object) locale29);
        java.util.Set<java.lang.String> strSet35 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale29.getVariant();
        java.lang.String str37 = locale29.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.monthOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.yearOfCentury();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.Instant instant48 = gJChronology41.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        int int58 = localDateTime56.get(dateTimeFieldType57);
        boolean boolean59 = localDateTime54.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMillis(10);
        int int70 = localDateTime67.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.withCenturyOfEra(523);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        java.util.Locale.Category category75 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.lang.String str79 = dateTimeZone76.getShortName((long) 2022, locale78);
        java.lang.String str80 = locale78.getScript();
        java.util.Locale.setDefault(category75, locale78);
        java.lang.String str82 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime74, locale78);
        java.lang.String str83 = locale29.getDisplayCountry(locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and dateTime47", (mutableDateTime12.compareTo(dateTime47) == 0) == mutableDateTime12.equals(dateTime47));
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0785");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(0);
        boolean boolean11 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology12 = instant0.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime8", (mutableDateTime2.compareTo(dateTime8) == 0) == mutableDateTime2.equals(dateTime8));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = property18.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withPeriodAdded(readablePeriod22, 295);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(26175);
        org.joda.time.LocalDateTime localDateTime27 = dateTime24.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        long long36 = dateTimeField33.add((long) 2, (-1L));
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime37.dayOfYear();
        int int44 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str47 = dateTimeZone46.getID();
        boolean boolean48 = dateTimeZone46.isFixed();
        long long50 = dateTimeZone46.convertUTCToLocal((long) (byte) 0);
        int int52 = dateTimeZone46.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone46);
        int int54 = localDateTime53.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime53);
        int int56 = localDateTime55.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withPeriodAdded(readablePeriod57, 0);
        boolean boolean60 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime59);
        int int61 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime16", (dateTime5.compareTo(mutableDateTime16) == 0) == dateTime5.equals(mutableDateTime16));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0787");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.era();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfCeiling();
        java.util.Locale locale24 = new java.util.Locale("26", "halfdays");
        java.lang.String str25 = property20.getAsText(locale24);
        org.joda.time.MutableDateTime mutableDateTime27 = property20.addWrapField(26173);
        org.joda.time.MutableDateTime mutableDateTime29 = property20.addWrapField((int) (short) 1);
        int int30 = property17.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        java.lang.String str36 = gJChronology35.toString();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology35);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(24L, dateTimeZone40);
        int int43 = dateTimeZone40.getOffsetFromLocal((long) 26164);
        mutableDateTime29.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        java.lang.String str54 = dateTimeZone53.getID();
        long long57 = dateTimeZone53.convertLocalToUTC((long) 1, false);
        long long59 = dateTimeZone53.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone53);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65, (int) (short) 1);
        java.lang.String str68 = gJChronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology67.secondOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology67.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology67.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology67.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology67.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology67);
        int int77 = localDateTime76.getMillisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime63.withFields((org.joda.time.ReadablePartial) localDateTime76);
        int int79 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime0 and localDateTime76", (localDateTime0.compareTo(localDateTime76) == 0) == localDateTime0.equals(localDateTime76));
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = gJChronology22.days();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.year();
        org.joda.time.DurationField durationField34 = gJChronology22.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField27, and durationField32", !(durationField34.compareTo(durationField27) == 0) || (Math.signum(durationField34.compareTo(durationField32)) == Math.signum(durationField27.compareTo(durationField32))));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0789");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime26 = dateTime18.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(100);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        mutableDateTime45.addWeeks(4);
        org.joda.time.DateTime dateTime48 = localDateTime42.toDateTime((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTime dateTime50 = dateTime48.withCenturyOfEra(8);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str54 = dateTimeZone53.getID();
        boolean boolean55 = dateTimeZone53.isFixed();
        long long57 = dateTimeZone53.convertUTCToLocal((long) (byte) 0);
        int int59 = dateTimeZone53.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone53);
        int int61 = localDateTime60.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withField(dateTimeFieldType62, (int) (short) 0);
        org.joda.time.DateTime.Property property65 = dateTime50.property(dateTimeFieldType62);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType62.getDurationType();
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology67);
        org.joda.time.DurationField durationField69 = gJChronology67.minutes();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.minuteOfHour();
        org.joda.time.DurationField durationField71 = durationFieldType66.getField((org.joda.time.Chronology) gJChronology67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime68", (localDateTime30.compareTo(localDateTime68) == 0) == localDateTime30.equals(localDateTime68));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0790");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.monthOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        boolean boolean18 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime19 = property17.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withPeriodAdded(readablePeriod24, 0);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        boolean boolean29 = localDateTime19.equals((java.lang.Object) property27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = dateTime32.getYearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime32.minusYears(22);
        org.joda.time.DateTime dateTime36 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime.Property property37 = localDateTime19.weekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        long long48 = gJChronology42.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long52 = gJChronology42.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField53 = gJChronology42.days();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology42.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = locale55.getLanguage();
        int int58 = dateTimeField54.getMaximumTextLength(locale55);
        java.lang.String str59 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 0, locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime21", (dateTime9.compareTo(mutableDateTime21) == 0) == dateTime9.equals(mutableDateTime21));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0791");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMonths(23);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.era();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology14.getZone();
        java.lang.String str18 = dateTimeZone16.getName((long) 26155);
        org.joda.time.Chronology chronology19 = gJChronology10.withZone(dateTimeZone16);
        mutableDateTime9.setZone(dateTimeZone16);
        int int21 = dateTime2.compareTo((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime28.getZone();
        org.joda.time.DateTime dateTime33 = dateTime28.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property34 = dateTime28.centuryOfEra();
        org.joda.time.DateTime dateTime35 = property34.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        java.util.GregorianCalendar gregorianCalendar37 = dateTime35.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Chronology chronology45 = gJChronology42.withZone(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology42.minutes();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 2030, (org.joda.time.Chronology) gJChronology42);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(497);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.yearOfEra();
        org.joda.time.DurationField durationField56 = gJChronology53.halfdays();
        org.joda.time.DurationField durationField57 = gJChronology53.centuries();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology53.getZone();
        long long60 = dateTimeZone58.nextTransition((long) 611);
        org.joda.time.DateTime dateTime61 = localDateTime49.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime35.withZoneRetainFields(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = mutableDateTime9.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and mutableDateTime63", (dateTime28.compareTo(mutableDateTime63) == 0) == dateTime28.equals(mutableDateTime63));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0792");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime20.toGregorianCalendar();
        org.joda.time.DateTime dateTime31 = dateTime20.withYearOfEra(26154);
        org.joda.time.LocalDateTime localDateTime32 = dateTime20.toLocalDateTime();
        org.joda.time.DateTime dateTime34 = dateTime20.withYear(43);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(26163);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getDurationType();
        org.joda.time.DateTime.Property property45 = dateTime42.property(dateTimeFieldType43);
        boolean boolean46 = dateTime20.isSupported(dateTimeFieldType43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime40", (mutableDateTime19.compareTo(dateTime40) == 0) == mutableDateTime19.equals(dateTime40));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0793");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime23 = dateTime20.minusWeeks(26152);
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime();
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime24", (dateTime25.compareTo(dateTime24) == 0) == dateTime25.equals(dateTime24));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology3.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        long long23 = dateTimeZone19.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        java.lang.String str32 = dateTimeZone31.getID();
        long long35 = dateTimeZone31.convertLocalToUTC((long) 1, false);
        long long37 = dateTimeZone31.previousTransition((long) 5);
        long long39 = dateTimeZone19.getMillisKeepLocal(dateTimeZone31, (long) (byte) -1);
        org.joda.time.Chronology chronology40 = gJChronology3.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property45 = dateTime44.centuryOfEra();
        long long46 = property45.remainder();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = mutableDateTime48.toDateTimeISO();
        org.joda.time.DateTime.Property property50 = dateTime49.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime49.withPeriodAdded(readablePeriod51, 0);
        int int54 = dateTime49.getSecondOfDay();
        org.joda.time.DateTime.Property property55 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime49.withWeekyear(26153);
        long long58 = property45.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        java.lang.String str63 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.monthOfYear();
        org.joda.time.Instant instant66 = gJChronology62.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        long long70 = gJChronology62.add(readablePeriod67, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology71 = gJChronology62.withUTC();
        long long75 = gJChronology62.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology76 = gJChronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology62.millisOfSecond();
        org.joda.time.DateTime dateTime78 = dateTime49.withChronology((org.joda.time.Chronology) gJChronology62);
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime48 and dateTime78", (mutableDateTime48.compareTo(dateTime78) == 0) == mutableDateTime48.equals(dateTime78));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0795");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType3.getField((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology19 = gJChronology7.withZone(dateTimeZone18);
        mutableDateTime0.setZoneRetainFields(dateTimeZone18);
        mutableDateTime0.setDate((-17999992L));
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.monthOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime33.minusWeeks(26152);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusDays((int) (short) -1);
        java.lang.String str43 = localDateTime42.toString();
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        java.util.Date date45 = localDateTime42.toDate();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.withPeriodAdded(readablePeriod46, (int) (byte) -1);
        java.lang.Object obj49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(obj49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withField(dateTimeFieldType52, 523);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType52.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.halfdayOfDay();
        org.joda.time.DurationField durationField62 = gJChronology59.years();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType52.getField((org.joda.time.Chronology) gJChronology59);
        int int64 = dateTime33.get(dateTimeFieldType52);
        mutableDateTime0.set(dateTimeFieldType52, 28);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(dateTimeZone67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime70 = property69.getMutableDateTime();
        int int71 = mutableDateTime70.getMillisOfSecond();
        int int72 = mutableDateTime70.getRoundingMode();
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime70);
        mutableDateTime0.setWeekyear(26317);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime68", (dateTime16.compareTo(mutableDateTime68) == 0) == dateTime16.equals(mutableDateTime68));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime1.setMillisOfDay((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.year();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfDay(0);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withPeriodAdded(readablePeriod20, 26148);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        int int25 = mutableDateTime24.getYearOfCentury();
        boolean boolean26 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DurationField durationField33 = gJChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = gJChronology30.withZone(dateTimeZone35);
        org.joda.time.Chronology chronology37 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology30.secondOfDay();
        org.joda.time.DurationField durationField39 = gJChronology30.hours();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology30.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology30);
        int int42 = dateTime41.getMinuteOfHour();
        long long43 = dateTime41.getMillis();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime41.toYearMonthDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter47.withOffsetParsed();
        boolean boolean49 = dateTimeFormatter48.isPrinter();
        java.lang.Integer int50 = dateTimeFormatter48.getPivotYear();
        java.util.Locale locale51 = dateTimeFormatter48.getLocale();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.roundFloor();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime56.getZone();
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) 26204);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter48.withZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime41.toMutableDateTime(dateTimeZone58);
        int int63 = property8.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime17", (mutableDateTime1.compareTo(dateTime17) == 0) == mutableDateTime1.equals(dateTime17));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0797");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DurationField durationField23 = gJChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Chronology chronology26 = gJChronology20.withZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.secondOfDay();
        org.joda.time.DurationField durationField29 = gJChronology20.millis();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime16, (org.joda.time.Chronology) gJChronology20);
        org.joda.time.DurationField durationField31 = gJChronology20.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime30", (dateTime16.compareTo(dateTime30) == 0) == dateTime16.equals(dateTime30));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0798");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DurationField durationField8 = gJChronology3.months();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        int int24 = mutableDateTime17.get(dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.era();
        boolean boolean46 = mutableDateTime41.isEqual((org.joda.time.ReadableInstant) mutableDateTime44);
        int int47 = property39.getDifference((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = mutableDateTime50.toDateTimeISO();
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.withPeriodAdded(readablePeriod53, 0);
        int int56 = dateTime51.getSecondOfDay();
        org.joda.time.DateTime.Property property57 = dateTime51.minuteOfHour();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale58);
        java.lang.String str60 = property57.getAsText(locale58);
        java.lang.String str61 = locale58.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime62 = property39.setCopy("26", locale58);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.year();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusDays(26158);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.minusMinutes(26195);
        long long69 = gJChronology28.set((org.joda.time.ReadablePartial) localDateTime67, 3907552601159L);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology28.secondOfMinute();
        org.joda.time.DateTime dateTime71 = mutableDateTime17.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean72 = dateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime41 and dateTime71", (mutableDateTime41.compareTo(dateTime71) == 0) == mutableDateTime41.equals(dateTime71));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0799");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        int int8 = localDateTime5.getMinuteOfHour();
        int[] intArray9 = localDateTime5.getValues();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        int int19 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withMillisOfDay(26147);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, 13);
        int int30 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = mutableDateTime32.toDateTimeISO();
        org.joda.time.DateTime.Property property34 = dateTime33.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.withPeriodAdded(readablePeriod35, 0);
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.Chronology chronology39 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime37.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfMonth();
        org.joda.time.DateTime dateTime44 = dateTime41.minus((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.yearOfEra();
        org.joda.time.DurationField durationField52 = gJChronology49.halfdays();
        org.joda.time.DurationField durationField53 = gJChronology49.centuries();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.dayOfMonth();
        boolean boolean55 = dateTimeFieldType45.isSupported((org.joda.time.Chronology) gJChronology49);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType45.getDurationType();
        org.joda.time.DateTime.Property property57 = dateTime41.property(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType45.getDurationType();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime5.withFieldAdded(durationFieldType58, 26241);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology64.getZone();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology64.getZone();
        org.joda.time.DurationField durationField67 = gJChronology64.centuries();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.hourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology64.hourOfDay();
        boolean boolean70 = durationFieldType58.isSupported((org.joda.time.Chronology) gJChronology64);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology64.getZone();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology64);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology64.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and mutableDateTime73", (mutableDateTime32.compareTo(mutableDateTime73) == 0) == mutableDateTime32.equals(mutableDateTime73));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0800");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = gJChronology12.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        org.joda.time.Chronology chronology36 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        int int43 = localDateTime41.get(dateTimeFieldType42);
        boolean boolean44 = localDateTime39.isAfter((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths(100);
        int int51 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.minuteOfHour();
        int[] intArray58 = localDateTime54.getValues();
        gJChronology12.validate((org.joda.time.ReadablePartial) localDateTime50, intArray58);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology12.era();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime4, (org.joda.time.Chronology) gJChronology12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime26", (mutableDateTime1.compareTo(dateTime26) == 0) == mutableDateTime1.equals(dateTime26));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0801");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime12.getFieldType((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        boolean boolean29 = dateTimeFieldType16.isSupported(chronology28);
        int int30 = dateTime2.get(dateTimeFieldType16);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        java.lang.String str36 = gJChronology35.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.era();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.minuteOfDay();
        org.joda.time.DurationField durationField40 = durationFieldType31.getField((org.joda.time.Chronology) gJChronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology35);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.year();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType16.getField((org.joda.time.Chronology) gJChronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime41", (mutableDateTime1.compareTo(mutableDateTime41) == 0) == mutableDateTime1.equals(mutableDateTime41));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0802");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(26227);
        long long15 = dateTime14.getMillis();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.joda.time.LocalTime localTime17 = dateTime14.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 'x');
        org.joda.time.Chronology chronology37 = gJChronology21.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology21.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime14.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology21.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime39", (dateTime14.compareTo(dateTime39) == 0) == dateTime14.equals(dateTime39));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(611);
        org.joda.time.DateTime dateTime12 = dateTime8.minusDays(525);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DurationField durationField18 = durationFieldType13.getField((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8, (org.joda.time.Chronology) gJChronology17);
        int int21 = dateTime8.getYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime28 = property25.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, 295);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(26175);
        org.joda.time.DateTime.Property property34 = dateTime31.year();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((-38090));
        int int37 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime8.year();
        mutableDateTime5.setTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime41 = dateTime8.plusMonths(26462490);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime7", (mutableDateTime5.compareTo(mutableDateTime7) == 0) == mutableDateTime5.equals(mutableDateTime7));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0804");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField9", Math.signum(durationField7.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField7)));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0805");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfCentury(15);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property8.addToCopy(925);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readablePeriod11);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant13", (dateTime12.compareTo(instant13) == 0) == dateTime12.equals(instant13));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0806");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        int int11 = mutableDateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 0);
        int int19 = dateTime14.getSecondOfDay();
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime14);
        mutableDateTime9.addDays(26147);
        mutableDateTime9.setSecondOfMinute(11);
        mutableDateTime9.addDays(26162);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.hourOfDay();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(63);
        mutableDateTime3.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = mutableDateTime35.toDateTimeISO();
        boolean boolean37 = mutableDateTime33.isAfter((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.monthOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths((int) (byte) 100);
        boolean boolean49 = mutableDateTime35.isBefore((org.joda.time.ReadableInstant) dateTime46);
        mutableDateTime35.setDate(0L);
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime33 and dateTime46", (mutableDateTime33.compareTo(dateTime46) == 0) == mutableDateTime33.equals(dateTime46));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0807");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DurationField durationField8 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField11 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField11", Math.signum(durationField8.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField8)));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.era();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTime.Property property21 = dateTime10.year();
        org.joda.time.DateTime dateTime23 = dateTime10.plusYears(26185);
        org.joda.time.DateTime.Property property24 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime26 = dateTime10.plus(1645514393240L);
        boolean boolean27 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime20", (mutableDateTime1.compareTo(mutableDateTime20) == 0) == mutableDateTime1.equals(mutableDateTime20));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0809");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.hourOfHalfday();
        org.joda.time.DurationField durationField27 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = instant19.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime29.add(readablePeriod30, (int) (byte) 0);
        mutableDateTime29.addDays(26184);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime29.secondOfDay();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.Instant instant37 = mutableDateTime29.toInstant();
        org.joda.time.MutableDateTime mutableDateTime38 = instant37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime38.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime29 and instant37", (mutableDateTime29.compareTo(instant37) == 0) == mutableDateTime29.equals(instant37));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0810");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfWeek();
        org.joda.time.DurationField durationField10 = gJChronology3.weeks();
        org.joda.time.DurationField durationField11 = gJChronology3.years();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        boolean boolean13 = mutableDateTime12.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime12.add(readablePeriod14, 999);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        int int31 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime29.setSecondOfDay(59);
        mutableDateTime29.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = mutableDateTime39.toDateTimeISO();
        int int41 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        org.joda.time.DateTime.Property property45 = dateTime44.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.withPeriodAdded(readablePeriod46, 0);
        int int49 = dateTime44.getSecondOfDay();
        mutableDateTime39.setDate((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime52 = dateTime44.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMillis(100);
        mutableDateTime29.setDate((org.joda.time.ReadableInstant) dateTime54);
        long long56 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime29);
        int int57 = property24.getMaximumValue();
        org.joda.time.DateTime dateTime58 = property24.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = gJChronology62.withZone(dateTimeZone64);
        org.joda.time.DurationField durationField66 = gJChronology62.minutes();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.dayOfMonth();
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTime.Property property69 = dateTime58.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71, (int) (short) 1);
        java.lang.String str74 = gJChronology73.toString();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.era();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology73.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology73.era();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology73.halfdayOfDay();
        org.joda.time.DurationField durationField80 = gJChronology73.months();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology73.minuteOfDay();
        int int82 = dateTime58.get(dateTimeField81);
        mutableDateTime12.setRounding(dateTimeField81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime58 and dateTime68", (dateTime58.compareTo(dateTime68) == 0) == dateTime58.equals(dateTime68));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0811");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime3.copy();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        java.lang.String str47 = gJChronology46.toString();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology46);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.era();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime48.toMutableDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField59 = durationFieldType42.getField((org.joda.time.Chronology) gJChronology54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.year();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfDay(26159);
        long long69 = gJChronology54.set((org.joda.time.ReadablePartial) localDateTime67, (long) 26150);
        org.joda.time.DateTime dateTime70 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology54.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime48", (mutableDateTime1.compareTo(dateTime48) == 0) == mutableDateTime1.equals(dateTime48));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withField(dateTimeFieldType10, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks(26155);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plus(readableDuration25);
        boolean boolean27 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime8 and localDateTime21", (localDateTime8.compareTo(localDateTime21) == 0) == localDateTime8.equals(localDateTime21));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0813");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514159154L);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime((org.joda.time.Chronology) gJChronology2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime1.toLocalDateTime();
        org.joda.time.DateTime.Property property5 = dateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes(20);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        int int29 = mutableDateTime25.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        int int37 = dateTime32.getSecondOfDay();
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime40 = dateTime32.minusYears(2022);
        org.joda.time.DateTime dateTime41 = dateTime32.toDateTimeISO();
        long long42 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime44 = dateTime32.minusMinutes(26390);
        int int45 = property5.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0814");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMonths(26163);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plusSeconds(345);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withWeekyear(26168);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property66 = localDateTime60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(dateTimeZone67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.era();
        boolean boolean73 = mutableDateTime68.isEqual((org.joda.time.ReadableInstant) mutableDateTime71);
        int int74 = property66.getDifference((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.DurationField durationField75 = property66.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime76 = property66.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime77 = property66.roundCeilingCopy();
        org.joda.time.Instant instant79 = org.joda.time.Instant.parse("26168");
        org.joda.time.DateTime dateTime80 = localDateTime77.toDateTime((org.joda.time.ReadableInstant) instant79);
        boolean boolean81 = localDateTime57.isEqual((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.minusWeeks(26188);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime68", (dateTime18.compareTo(mutableDateTime68) == 0) == dateTime18.equals(mutableDateTime68));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime3.copy();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        java.lang.String str47 = gJChronology46.toString();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology46);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.era();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime48.toMutableDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField59 = durationFieldType42.getField((org.joda.time.Chronology) gJChronology54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.year();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfDay(26159);
        long long69 = gJChronology54.set((org.joda.time.ReadablePartial) localDateTime67, (long) 26150);
        org.joda.time.DateTime dateTime70 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField71 = gJChronology54.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime48", (mutableDateTime1.compareTo(dateTime48) == 0) == mutableDateTime1.equals(dateTime48));
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0816");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 0);
        int int19 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime14.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.era();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.minuteOfDay();
        org.joda.time.DurationField durationField30 = gJChronology25.seconds();
        boolean boolean31 = dateTimeZone10.equals((java.lang.Object) gJChronology25);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology25.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale34);
        java.lang.String str38 = nameProvider33.getName(locale34, "secondOfMinute", "Etc/UTC");
        java.lang.String str39 = locale34.getDisplayLanguage();
        int int40 = dateTimeField32.getMaximumShortTextLength(locale34);
        java.lang.String str41 = locale34.getScript();
        java.lang.String str42 = locale34.getVariant();
        boolean boolean43 = property2.equals((java.lang.Object) str42);
        org.joda.time.DateTime dateTime44 = property2.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withPeriodAdded(readablePeriod45, 26196);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology51.getZone();
        org.joda.time.DurationField durationField54 = gJChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.hourOfHalfday();
        org.joda.time.DurationField durationField56 = gJChronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.dayOfMonth();
        org.joda.time.DateTime dateTime58 = dateTime44.toDateTime((org.joda.time.Chronology) gJChronology51);
        org.joda.time.DateTime dateTime60 = dateTime44.plusDays(26236);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and dateTime58", (dateTime44.compareTo(dateTime58) == 0) == dateTime44.equals(dateTime58));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0817");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514159154L);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime((org.joda.time.Chronology) gJChronology2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime1.toLocalDateTime();
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0818");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        java.lang.String str11 = dateTime8.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField18 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.weekyearOfCentury();
        long long24 = gJChronology15.add(120L, (long) 70, 26149);
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTime((org.joda.time.Chronology) gJChronology15);
        int int26 = dateTime8.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime17", (mutableDateTime1.compareTo(dateTime17) == 0) == mutableDateTime1.equals(dateTime17));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DurationField durationField10 = gJChronology9.seconds();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setSecondOfDay(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean21 = mutableDateTime15.equals((java.lang.Object) dateTimeFieldType20);
        java.lang.Object obj22 = mutableDateTime15.clone();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime15.add(readablePeriod23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime15.minuteOfHour();
        int int26 = mutableDateTime15.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime15.weekyear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime15.dayOfWeek();
        boolean boolean29 = gJChronology9.equals((java.lang.Object) property28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField11", Math.signum(durationField10.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField10)));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0820");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getYearOfEra();
        int int4 = dateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1645514212073L);
        org.joda.time.DateTime dateTime7 = dateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime13.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property19 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.minus(readableDuration22);
        org.joda.time.DateTime dateTime24 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime13", (mutableDateTime1.compareTo(dateTime13) == 0) == mutableDateTime1.equals(dateTime13));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0821");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology3.centuries();
        org.joda.time.DurationField durationField13 = gJChronology3.years();
        org.joda.time.DurationField durationField14 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField6, and durationField7", !(durationField14.compareTo(durationField6) == 0) || (Math.signum(durationField14.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0822");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = gJChronology42.days();
        org.joda.time.DurationField durationField47 = gJChronology42.months();
        org.joda.time.DurationField durationField48 = gJChronology42.weekyears();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime21, (org.joda.time.Chronology) gJChronology42);
        mutableDateTime21.addMillis(479);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime53.toDateTimeISO();
        int int55 = dateTime54.getYearOfEra();
        org.joda.time.DateTime dateTime57 = dateTime54.minusYears(22);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfDay();
        org.joda.time.DurationField durationField63 = gJChronology61.hours();
        org.joda.time.DurationField durationField64 = gJChronology61.months();
        org.joda.time.DurationField durationField65 = gJChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology61.getZone();
        org.joda.time.DateTime dateTime67 = dateTime57.toDateTime(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime21.toMutableDateTime(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70, (int) (short) 1);
        java.lang.String str73 = gJChronology72.toString();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.monthOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property80 = dateTime79.year();
        org.joda.time.DateTime dateTime82 = property80.addToCopy(999);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType83.getRangeDurationType();
        org.joda.time.DateTime dateTime86 = dateTime82.withFieldAdded(durationFieldType84, 0);
        mutableDateTime68.add(durationFieldType84, 26525);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime77", (mutableDateTime1.compareTo(dateTime77) == 0) == mutableDateTime1.equals(dateTime77));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0823");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(26227);
        long long15 = dateTime14.getMillis();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.joda.time.LocalTime localTime17 = dateTime14.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 'x');
        org.joda.time.Chronology chronology37 = gJChronology21.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology21.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime14.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime14.minus(readablePeriod40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime39", (instant16.compareTo(dateTime39) == 0) == instant16.equals(dateTime39));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0824");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.minus(readableDuration17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.yearOfEra();
        org.joda.time.DurationField durationField26 = gJChronology23.halfdays();
        org.joda.time.DurationField durationField27 = gJChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.centuryOfEra();
        org.joda.time.DurationField durationField31 = durationFieldType19.getField((org.joda.time.Chronology) gJChronology23);
        org.joda.time.MutableDateTime mutableDateTime32 = instant18.toMutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.MutableDateTime mutableDateTime33 = instant18.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime32", (mutableDateTime1.compareTo(mutableDateTime32) == 0) == mutableDateTime1.equals(mutableDateTime32));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0825");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.yearOfEra();
        org.joda.time.DurationField durationField25 = gJChronology22.halfdays();
        boolean boolean26 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gJChronology22);
        int int27 = localDateTime17.get(dateTimeFieldType18);
        int int28 = localDateTime10.get(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.era();
        boolean boolean51 = mutableDateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime49);
        int int52 = property44.getDifference((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTimeISO();
        org.joda.time.DateTime.Property property57 = dateTime56.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.withPeriodAdded(readablePeriod58, 0);
        int int61 = dateTime56.getSecondOfDay();
        org.joda.time.DateTime.Property property62 = dateTime56.minuteOfHour();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale63);
        java.lang.String str65 = property62.getAsText(locale63);
        java.lang.String str66 = locale63.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime67 = property44.setCopy("26", locale63);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.year();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusDays(26158);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readablePeriod71);
        long long74 = gJChronology33.set((org.joda.time.ReadablePartial) localDateTime72, (long) 18000100);
        org.joda.time.DurationField durationField75 = durationFieldType29.getField((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DurationField durationField76 = gJChronology33.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField76, durationField25, and durationField75", !(durationField76.compareTo(durationField25) == 0) || (Math.signum(durationField76.compareTo(durationField75)) == Math.signum(durationField25.compareTo(durationField75))));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, (long) 26155, 9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTime dateTime16 = localDateTime13.toDateTime();
        java.util.Date date17 = localDateTime13.toDate();
        long long19 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime13, 4518963757L);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField24 = gJChronology3.minutes();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology3.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime13 and localDateTime25", (localDateTime13.compareTo(localDateTime25) == 0) == localDateTime13.equals(localDateTime25));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0827");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime18 = instant15.toMutableDateTime();
        int int19 = mutableDateTime18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.millisOfSecond();
        org.joda.time.DurationField durationField28 = gJChronology23.years();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology23.getZone();
        java.lang.String str31 = dateTimeZone30.getID();
        mutableDateTime18.setZone(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.era();
        boolean boolean47 = mutableDateTime42.isEqual((org.joda.time.ReadableInstant) mutableDateTime45);
        int int48 = property40.getDifference((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DurationField durationField49 = property40.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime50 = property40.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime51 = property40.roundCeilingCopy();
        java.util.Locale locale54 = new java.util.Locale("26", "halfdays");
        int int55 = property40.getMaximumShortTextLength(locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        boolean boolean57 = locale54.hasExtensions();
        java.lang.String str58 = dateTimeZone30.getShortName((long) 26401417, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime29", (mutableDateTime1.compareTo(mutableDateTime29) == 0) == mutableDateTime1.equals(mutableDateTime29));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0828");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long4 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(26150L);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 26150L);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.String str12 = dateTimeZone0.getName(1910267712000000L, locale11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology16.getZone();
        java.lang.String str23 = dateTimeZone21.getShortName(1645514265104L);
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime20", (dateTime5.compareTo(dateTime20) == 0) == dateTime5.equals(dateTime20));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0829");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property11.withMinimumValue();
        org.joda.time.DateTime dateTime14 = property11.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        int int20 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withPeriodAdded(readablePeriod25, 0);
        int int28 = dateTime23.getSecondOfDay();
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime23);
        mutableDateTime18.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime18.era();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        int int38 = mutableDateTime34.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime36.setMillisOfDay((int) 'a');
        boolean boolean50 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.setDayOfYear((int) (short) 10);
        mutableDateTime36.addSeconds(764);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        java.lang.String str59 = gJChronology58.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        int int66 = localDateTime64.get(dateTimeFieldType65);
        boolean boolean67 = localDateTime62.isAfter((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.minusSeconds(0);
        int int72 = dateTimeField60.getMaximumValue((org.joda.time.ReadablePartial) localDateTime71);
        java.util.Locale locale73 = java.util.Locale.PRC;
        int int74 = dateTimeField60.getMaximumTextLength(locale73);
        java.lang.String str75 = locale73.getVariant();
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.util.Calendar calendar77 = mutableDateTime36.toCalendar(locale73);
        int int78 = property11.getMaximumShortTextLength(locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime16", (dateTime5.compareTo(mutableDateTime16) == 0) == dateTime5.equals(mutableDateTime16));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0830");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTimeISO();
        int int14 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setSecondOfDay(59);
        mutableDateTime12.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        mutableDateTime22.setDate((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime35 = dateTime27.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMillis(100);
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) dateTime37);
        long long39 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime12);
        int int40 = property7.getMaximumValue();
        org.joda.time.DateTime dateTime41 = property7.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = gJChronology45.withZone(dateTimeZone47);
        org.joda.time.DurationField durationField49 = gJChronology45.minutes();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.dayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime41.toDateTime((org.joda.time.Chronology) gJChronology45);
        org.joda.time.DurationField durationField52 = gJChronology45.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and dateTime51", (dateTime41.compareTo(dateTime51) == 0) == dateTime41.equals(dateTime51));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withOffsetParsed();
        java.util.Locale locale42 = dateTimeFormatter41.getLocale();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology47);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        org.joda.time.Chronology chronology60 = gJChronology47.withZone(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter41.withZone(dateTimeZone59);
        boolean boolean66 = gJChronology33.equals((java.lang.Object) dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology33.millisOfDay();
        org.joda.time.DurationField durationField71 = gJChronology33.weekyears();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime29.toMutableDateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.LocalDate localDate73 = dateTime29.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and mutableDateTime72", (mutableDateTime10.compareTo(mutableDateTime72) == 0) == mutableDateTime10.equals(mutableDateTime72));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusMinutes(26163);
        java.util.Date date28 = localDateTime27.toDate();
        int int29 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType30.getField((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology34.clockhourOfDay();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology34);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology46 = gJChronology34.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology34.weekyear();
        org.joda.time.Instant instant48 = gJChronology34.getGregorianCutover();
        boolean boolean49 = localDateTime27.equals((java.lang.Object) instant48);
        org.joda.time.MutableDateTime mutableDateTime50 = instant48.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime50.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53, (int) (short) 1);
        java.lang.String str56 = gJChronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.era();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.era();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        long long64 = gJChronology55.add(readablePeriod61, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology55.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology55.getZone();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("26168");
        java.lang.String str72 = dateTimeZone68.getName(26165L, locale71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone68);
        mutableDateTime50.setZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime73", (dateTime43.compareTo(dateTime73) == 0) == dateTime43.equals(dateTime73));
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0833");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        java.lang.String str7 = mutableDateTime3.toString("15");
        mutableDateTime3.setSecondOfMinute(15);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.era();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology13.yearOfCentury();
        org.joda.time.Chronology chronology21 = gJChronology13.withUTC();
        mutableDateTime3.setChronology(chronology21);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime23", (mutableDateTime1.compareTo(dateTime23) == 0) == mutableDateTime1.equals(dateTime23));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0834");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        boolean boolean11 = dateTimeZone8.isStandardOffset(2L);
        java.lang.String str13 = dateTimeZone8.getName((long) 26213);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime19.getZone();
        org.joda.time.DateTime dateTime24 = dateTime19.withSecondOfMinute((int) '#');
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = dateTime24.isBefore(readableInstant25);
        boolean boolean27 = dateTime24.isAfterNow();
        org.joda.time.DateTime dateTime29 = dateTime24.minusSeconds(26159);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        java.lang.String str36 = gJChronology35.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology35.getZone();
        long long43 = dateTimeZone8.getMillisKeepLocal(dateTimeZone41, (long) 26168);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.era();
        boolean boolean58 = mutableDateTime53.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        int int59 = property51.getDifference((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = mutableDateTime62.toDateTimeISO();
        org.joda.time.DateTime.Property property64 = dateTime63.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.withPeriodAdded(readablePeriod65, 0);
        int int68 = dateTime63.getSecondOfDay();
        org.joda.time.DateTime.Property property69 = dateTime63.minuteOfHour();
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale70);
        java.lang.String str72 = property69.getAsText(locale70);
        java.lang.String str73 = locale70.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime74 = property51.setCopy("26", locale70);
        java.lang.String str75 = locale70.getLanguage();
        java.lang.String str76 = locale70.getCountry();
        java.lang.String str77 = dateTimeZone8.getShortName((long) 579, locale70);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 524, dateTimeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and mutableDateTime53", (dateTime19.compareTo(mutableDateTime53) == 0) == dateTime19.equals(mutableDateTime53));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0835");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMillis(10);
        int int47 = localDateTime44.getDayOfYear();
        int[] intArray49 = gJChronology22.get((org.joda.time.ReadablePartial) localDateTime44, (-1382399389L));
        int int50 = localDateTime44.getEra();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.minusDays(26190);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        mutableDateTime53.addWeeks(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType56.getField((org.joda.time.Chronology) gJChronology60);
        org.joda.time.DateTimeField dateTimeField66 = gJChronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology60.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology60.clockhourOfDay();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology60);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology72 = gJChronology60.withZone(dateTimeZone71);
        mutableDateTime53.setZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = localDateTime52.toDateTime(dateTimeZone71);
        boolean boolean76 = dateTimeZone71.isStandardOffset((long) 26292);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime69", (mutableDateTime10.compareTo(dateTime69) == 0) == mutableDateTime10.equals(dateTime69));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0836");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        int int12 = property11.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(26279);
        org.joda.time.DateTime dateTime15 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(26164);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        int int30 = localDateTime25.get(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        java.lang.String str40 = dateTimeZone39.getID();
        long long43 = dateTimeZone39.convertLocalToUTC((long) 1, false);
        long long45 = dateTimeZone39.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime49 = property48.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime50 = dateTime49.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withPeriodAdded(readablePeriod51, 18000100);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readableDuration54);
        int int56 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTime dateTime57 = dateTime15.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime47", (dateTime8.compareTo(dateTime47) == 0) == dateTime8.equals(dateTime47));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0837");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.plusMinutes(26179);
        org.joda.time.DateTime dateTime18 = dateTime11.minusMillis(26201);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(26245);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        mutableDateTime23.setDate((long) 26163);
        java.lang.String str26 = mutableDateTime23.toString();
        int int27 = mutableDateTime23.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.centuryOfEra();
        boolean boolean29 = dateTime21.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0838");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.DurationField durationField14 = gJChronology9.millis();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology9);
        java.lang.Object obj18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType20.getField((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationField durationField30 = gJChronology24.hours();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMinutes(26153);
        int int34 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        int int36 = localDateTime31.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DurationField durationField43 = gJChronology41.hours();
        org.joda.time.DurationField durationField44 = gJChronology41.months();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology49);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, 4);
        int[] intArray58 = gJChronology41.get((org.joda.time.ReadablePartial) localDateTime53, (long) 26238);
        gJChronology9.validate((org.joda.time.ReadablePartial) localDateTime31, intArray58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime31.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime19 and localDateTime31", (localDateTime19.compareTo(localDateTime31) == 0) == localDateTime19.equals(localDateTime31));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0839");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("UTC");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        boolean boolean6 = strSet5.isEmpty();
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-22T00:00:00.101Z", "DateTimeField[hourOfHalfday]", "+00:00", "2022-02-22T00:00:00.101Z", "de-DE", "UTC", "Deutsch", "2022-02-21T07:15:52.625" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        boolean boolean18 = strSet5.containsAll((java.util.Collection<java.lang.String>) strList16);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        boolean boolean22 = strSet21.isEmpty();
        boolean boolean23 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean24 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        int int30 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.setSecondOfDay(59);
        mutableDateTime28.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        int int40 = mutableDateTime36.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.withPeriodAdded(readablePeriod45, 0);
        int int48 = dateTime43.getSecondOfDay();
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime51 = dateTime43.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMillis(100);
        mutableDateTime28.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.withWeekyear(26154);
        org.joda.time.Chronology chronology57 = dateTime53.getChronology();
        int int58 = dateTime53.getMillisOfDay();
        org.joda.time.YearMonthDay yearMonthDay59 = dateTime53.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61, (int) (short) 1);
        java.lang.String str64 = gJChronology63.toString();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology63);
        org.joda.time.DateTime dateTime67 = dateTime65.withMillisOfDay(0);
        org.joda.time.DateTime dateTime69 = dateTime67.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.withPeriodAdded(readablePeriod70, 26148);
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        int int75 = mutableDateTime74.getYearOfCentury();
        boolean boolean76 = dateTime72.isEqual((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78, (int) (short) 1);
        java.lang.String str81 = gJChronology80.toString();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology80.hourOfHalfday();
        org.joda.time.DurationField durationField83 = gJChronology80.centuries();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology80.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.Chronology chronology86 = gJChronology80.withZone(dateTimeZone85);
        org.joda.time.Chronology chronology87 = gJChronology80.withUTC();
        org.joda.time.DateTimeField dateTimeField88 = gJChronology80.secondOfDay();
        org.joda.time.DurationField durationField89 = gJChronology80.hours();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology80.dayOfMonth();
        org.joda.time.DateTime dateTime91 = dateTime72.toDateTime((org.joda.time.Chronology) gJChronology80);
        int int92 = dateTime91.getMinuteOfHour();
        long long93 = dateTime91.getMillis();
        org.joda.time.YearMonthDay yearMonthDay94 = dateTime91.toYearMonthDay();
        org.joda.time.base.BasePartial[] basePartialArray95 = new org.joda.time.base.BasePartial[] { yearMonthDay59, yearMonthDay94 };
        org.joda.time.base.BasePartial[] basePartialArray96 = strSet2.toArray(basePartialArray95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and dateTime65", (mutableDateTime26.compareTo(dateTime65) == 0) == mutableDateTime26.equals(dateTime65));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology3.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        java.util.Locale locale27 = new java.util.Locale("2022-02-21T07:18:08.084");
        java.lang.String str28 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusHours(26458666);
        java.lang.String[] strArray45 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        int int48 = strSet46.size();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        int int54 = localDateTime52.get(dateTimeFieldType53);
        boolean boolean55 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        boolean boolean56 = strSet46.equals((java.lang.Object) localDateTime50);
        org.joda.time.LocalDateTime.Property property57 = localDateTime50.hourOfDay();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = property57.getAsText(locale58);
        org.joda.time.LocalDateTime localDateTime60 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks(26259);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusDays(26203);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = mutableDateTime66.toDateTimeISO();
        org.joda.time.DateTime.Property property68 = dateTime67.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.DateTime dateTime71 = dateTime67.withPeriodAdded(readablePeriod69, 0);
        org.joda.time.DateTime.Property property72 = dateTime71.hourOfDay();
        java.lang.String str73 = property72.getAsShortText();
        org.joda.time.DateTime dateTime74 = property72.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property75.getFieldType();
        int int77 = localDateTime60.indexOf(dateTimeFieldType76);
        boolean boolean78 = localDateTime24.isSupported(dateTimeFieldType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and mutableDateTime66", (dateTime17.compareTo(mutableDateTime66) == 0) == dateTime17.equals(mutableDateTime66));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0841");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime((org.joda.time.Chronology) gJChronology9);
        int int15 = dateTime4.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0842");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        int int13 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        int int21 = dateTime16.getSecondOfDay();
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime16);
        mutableDateTime11.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.era();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        int int31 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.withPeriodAdded(readablePeriod36, 0);
        int int39 = dateTime34.getSecondOfDay();
        mutableDateTime29.setDate((org.joda.time.ReadableInstant) dateTime34);
        mutableDateTime29.setMillisOfDay((int) 'a');
        boolean boolean43 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime44 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime5.plusSeconds(26183);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusDays(26154);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusDays((int) (short) -1);
        int int56 = localDateTime50.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.minusSeconds(88);
        org.joda.time.LocalDateTime.Property property59 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property59.addWrapFieldToCopy(26279);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfDay(0);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear((int) '#');
        org.joda.time.DateTime dateTime73 = dateTime71.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean75 = dateTime73.isSupported(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76, readableInstant77, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology79.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.yearOfEra();
        org.joda.time.DurationField durationField82 = gJChronology79.halfdays();
        org.joda.time.DurationField durationField83 = gJChronology79.centuries();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology79.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology79.secondOfMinute();
        org.joda.time.DurationField durationField86 = gJChronology79.hours();
        org.joda.time.DurationField durationField87 = gJChronology79.halfdays();
        boolean boolean88 = dateTimeFieldType74.isSupported((org.joda.time.Chronology) gJChronology79);
        int int89 = localDateTime61.get(dateTimeFieldType74);
        int int90 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and dateTime67", (mutableDateTime15.compareTo(dateTime67) == 0) == mutableDateTime15.equals(dateTime67));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.Instant instant13 = instant11.plus(3903232906315L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant11", (dateTime9.compareTo(instant11) == 0) == dateTime9.equals(instant11));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology3.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        long long23 = dateTimeZone19.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        java.lang.String str32 = dateTimeZone31.getID();
        long long35 = dateTimeZone31.convertLocalToUTC((long) 1, false);
        long long37 = dateTimeZone31.previousTransition((long) 5);
        long long39 = dateTimeZone19.getMillisKeepLocal(dateTimeZone31, (long) (byte) -1);
        org.joda.time.Chronology chronology40 = gJChronology3.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField41 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField41, durationField6, and durationField7", !(durationField41.compareTo(durationField6) == 0) || (Math.signum(durationField41.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0845");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withEra(0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        long long15 = gJChronology9.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long19 = gJChronology9.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfSecond(739);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(26500);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime20", (dateTime5.compareTo(dateTime20) == 0) == dateTime5.equals(dateTime20));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        mutableDateTime9.addMinutes(9);
        mutableDateTime9.addMonths(26181);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(27);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime16.add(readableDuration18, 26475295);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime17", (mutableDateTime16.compareTo(mutableDateTime17) == 0) == mutableDateTime16.equals(mutableDateTime17));
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.months();
        org.joda.time.Chronology chronology7 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField5, and durationField6", !(durationField9.compareTo(durationField5) == 0) || (Math.signum(durationField9.compareTo(durationField6)) == Math.signum(durationField5.compareTo(durationField6))));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfMinute();
        long long14 = dateTimeField12.roundHalfEven(3903232621682L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.era();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology18.add(readablePeriod24, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        boolean boolean37 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        int[] intArray53 = localDateTime50.getValues();
        int int54 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime57 = property55.setCopy(26176);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime31", (localDateTime30.compareTo(localDateTime31) == 0) == localDateTime30.equals(localDateTime31));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0849");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfEra();
        int int20 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(0);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, 26148);
        org.joda.time.DateTime.Property property34 = dateTime30.era();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.DateTime dateTime38 = dateTime30.withFieldAdded(durationFieldType35, 26181);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = gJChronology42.minutes();
        org.joda.time.DurationField durationField47 = gJChronology42.millis();
        org.joda.time.DurationField durationField48 = gJChronology42.millis();
        boolean boolean49 = durationFieldType35.isSupported((org.joda.time.Chronology) gJChronology42);
        java.lang.String str50 = durationFieldType35.getName();
        mutableDateTime18.add(durationFieldType35, 329);
        org.joda.time.DateTime dateTime54 = dateTime16.withFieldAdded(durationFieldType35, 32);
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime26", (mutableDateTime14.compareTo(dateTime26) == 0) == mutableDateTime14.equals(dateTime26));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0850");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTime dateTime8 = dateTime2.withWeekyear(26297);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.lang.String str12 = timeZone10.getID();
        timeZone10.setRawOffset((int) (short) 10);
        java.time.ZoneId zoneId15 = timeZone10.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId15);
        java.time.ZoneId zoneId18 = timeZone17.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.DateTime dateTime30 = dateTime25.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property31 = dateTime25.centuryOfEra();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths(44264689);
        int int37 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime38 = dateTime8.toDateTime(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime25", (mutableDateTime1.compareTo(dateTime25) == 0) == mutableDateTime1.equals(dateTime25));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0851");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        int int11 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property13 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        boolean boolean20 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        java.lang.String str29 = dateTimeZone28.getID();
        mutableDateTime18.setZoneRetainFields(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime18.setChronology((org.joda.time.Chronology) gJChronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableDateTime18.add(readablePeriod33);
        org.joda.time.DateTime dateTime35 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        java.lang.String str40 = gJChronology39.toString();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology39);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillisOfDay(0);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear((int) '#');
        org.joda.time.DateTime dateTime47 = dateTime45.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.add(1L);
        boolean boolean53 = dateTime47.isBefore((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime47.minus(readablePeriod54);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str59 = dateTimeZone58.getID();
        boolean boolean60 = dateTimeZone58.isFixed();
        long long62 = dateTimeZone58.convertUTCToLocal((long) (byte) 0);
        int int64 = dateTimeZone58.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone58);
        int int66 = localDateTime65.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withField(dateTimeFieldType67, (int) (short) 0);
        org.joda.time.DateTime.Property property70 = dateTime55.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime72 = dateTime55.minusMinutes(26172);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        boolean boolean75 = mutableDateTime18.equals((java.lang.Object) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and dateTime35", (mutableDateTime16.compareTo(dateTime35) == 0) == mutableDateTime16.equals(dateTime35));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField10 = gJChronology3.hours();
        org.joda.time.DurationField durationField11 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Chronology chronology31 = gJChronology18.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Chronology chronology42 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        int int49 = localDateTime47.get(dateTimeFieldType48);
        boolean boolean50 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(100);
        int int57 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        int[] intArray64 = localDateTime60.getValues();
        gJChronology18.validate((org.joda.time.ReadablePartial) localDateTime56, intArray64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime56.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths(26163);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        org.joda.time.DateTime dateTime74 = property73.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime76 = property73.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.withPeriodAdded(readablePeriod77, 295);
        org.joda.time.DateTime.Property property80 = dateTime76.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, readableInstant82, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone85 = gJChronology84.getZone();
        long long87 = dateTimeZone85.nextTransition((long) 26149);
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale89.getDisplayScript(locale90);
        java.lang.String str92 = dateTimeZone85.getName((long) (byte) 10, locale90);
        java.lang.String str93 = property80.getAsShortText(locale90);
        java.lang.String str94 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime69, locale90);
        long long96 = dateTimeField13.remainder((-2039819880L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime71", (dateTime32.compareTo(mutableDateTime71) == 0) == dateTime32.equals(mutableDateTime71));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0853");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        int int8 = gJChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField10", Math.signum(durationField7.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField7)));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DurationField durationField10 = gJChronology3.weekyears();
        int int11 = gJChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology3.years();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField13", (durationField10.compareTo(durationField13) == 0) == durationField10.equals(durationField13));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.Instant instant13 = gJChronology9.getGregorianCutover();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        int int18 = mutableDateTime5.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(391);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.String str25 = property19.getAsShortText(locale22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.DateTime dateTime29 = dateTime26.plusMonths(292278993);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(26189);
        org.joda.time.DateTime.Property property32 = dateTime29.weekOfWeekyear();
        boolean boolean33 = locale22.equals((java.lang.Object) property32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime26", (dateTime14.compareTo(dateTime26) == 0) == dateTime14.equals(dateTime26));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0856");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.yearOfEra();
        java.lang.String str4 = dateTimeField2.getAsText((long) 26498);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        int int8 = localDateTime5.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.era();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology15.add(readablePeriod21, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology15.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime33.getZone();
        org.joda.time.DateTime dateTime38 = dateTime33.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property39 = dateTime33.centuryOfEra();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime41 = property39.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter46.withOffsetParsed();
        java.util.Locale locale48 = dateTimeFormatter47.getLocale();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology61.getZone();
        org.joda.time.Chronology chronology66 = gJChronology53.withZone(dateTimeZone65);
        long long70 = dateTimeZone65.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter47.withZone(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((-1199900L), dateTimeZone65);
        java.util.Locale.Category category74 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = dateTimeZone75.getShortName((long) 2022, locale77);
        java.lang.String str79 = locale77.getScript();
        java.util.Locale.setDefault(category74, locale77);
        java.lang.String str81 = dateTimeZone65.getShortName((-8L), locale77);
        int int82 = property39.getMaximumTextLength(locale77);
        java.lang.String str83 = locale77.getScript();
        java.util.Locale locale84 = locale77.stripExtensions();
        java.lang.String str85 = locale84.getISO3Country();
        int int86 = dateTimeField27.getMaximumShortTextLength(locale84);
        java.lang.String str87 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime5, 44341993, locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime33", (mutableDateTime1.compareTo(dateTime33) == 0) == mutableDateTime1.equals(dateTime33));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0857");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DurationField durationField29 = gJChronology25.seconds();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology25.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime9.toMutableDateTime((org.joda.time.Chronology) gJChronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime21", (dateTime9.compareTo(dateTime21) == 0) == dateTime9.equals(dateTime21));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0858");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMonths(26163);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plusSeconds(345);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withWeekyear(26168);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property66 = localDateTime60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(dateTimeZone67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.era();
        boolean boolean73 = mutableDateTime68.isEqual((org.joda.time.ReadableInstant) mutableDateTime71);
        int int74 = property66.getDifference((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.DurationField durationField75 = property66.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime76 = property66.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime77 = property66.roundCeilingCopy();
        org.joda.time.Instant instant79 = org.joda.time.Instant.parse("26168");
        org.joda.time.DateTime dateTime80 = localDateTime77.toDateTime((org.joda.time.ReadableInstant) instant79);
        boolean boolean81 = localDateTime57.isEqual((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = localDateTime57.toDateTime(readableInstant82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime68", (dateTime18.compareTo(mutableDateTime68) == 0) == dateTime18.equals(mutableDateTime68));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0859");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(26165);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds(26147);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime28", (dateTime6.compareTo(dateTime28) == 0) == dateTime6.equals(dateTime28));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType14.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology18);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime13.toMutableDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = null;
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withOffsetParsed();
        java.util.Locale locale33 = dateTimeFormatter31.getLocale();
        boolean boolean34 = dateTimeFormatter31.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter31.withDefaultYear((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        org.joda.time.Chronology chronology54 = gJChronology41.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter36.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = dateTime13.toDateTime(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime55", (dateTime8.compareTo(dateTime55) == 0) == dateTime8.equals(dateTime55));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DurationField durationField10 = gJChronology9.seconds();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        org.joda.time.DurationField durationField12 = gJChronology9.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField11", Math.signum(durationField12.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField12)));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0862");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        boolean boolean13 = dateTime10.isBefore((long) 26167);
        org.joda.time.TimeOfDay timeOfDay14 = dateTime10.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime10.plusHours(26343);
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 'x');
        org.joda.time.Chronology chronology37 = gJChronology21.withZone(dateTimeZone34);
        java.util.TimeZone timeZone38 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone34);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str44 = dateTimeZone34.getShortName((long) 269, locale42);
        boolean boolean45 = dateTime17.equals((java.lang.Object) dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime39", (dateTime8.compareTo(dateTime39) == 0) == dateTime8.equals(dateTime39));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0863");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 948);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(3600001L);
        mutableDateTime14.setDate(220924800100L);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfMonth();
        boolean boolean30 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType20.getDurationType();
        boolean boolean32 = instant19.isSupported(dateTimeFieldType20);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) instant19);
        long long34 = instant19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime35 = instant19.toMutableDateTimeISO();
        java.lang.Object obj36 = mutableDateTime35.clone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime();
        mutableDateTime41.setHourOfDay(2);
        mutableDateTime41.setYear(26148);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.weekOfWeekyear();
        mutableDateTime41.addDays(436);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime41.yearOfCentury();
        boolean boolean50 = mutableDateTime35.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        java.lang.String str63 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.era();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime56.toMutableDateTime((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology62.getZone();
        java.lang.String str70 = dateTimeZone68.getName((long) 167);
        long long72 = dateTimeZone68.nextTransition((long) (-3));
        mutableDateTime41.setZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime38 and dateTime56", (mutableDateTime38.compareTo(dateTime56) == 0) == mutableDateTime38.equals(dateTime56));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0864");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.era();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.minuteOfDay();
        org.joda.time.DurationField durationField19 = gJChronology14.seconds();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.dayOfWeek();
        org.joda.time.DurationField durationField21 = gJChronology14.weeks();
        org.joda.time.DurationField durationField22 = gJChronology14.years();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology14);
        boolean boolean24 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime10.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime23", (mutableDateTime1.compareTo(mutableDateTime23) == 0) == mutableDateTime1.equals(mutableDateTime23));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime24.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.era();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        int int44 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = mutableDateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime47.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.withPeriodAdded(readablePeriod49, 0);
        int int52 = dateTime47.getSecondOfDay();
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime47);
        mutableDateTime42.setMillisOfDay((int) 'a');
        boolean boolean56 = mutableDateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime42.setDayOfYear((int) (short) 10);
        int int59 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.Instant instant60 = mutableDateTime42.toInstant();
        org.joda.time.Instant instant62 = instant60.withMillis((long) 18000100);
        org.joda.time.Instant instant64 = instant60.minus((long) 26175);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) instant60);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology71.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology71.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology71.getZone();
        java.lang.String str76 = dateTimeZone75.getID();
        long long79 = dateTimeZone75.convertLocalToUTC((long) 1, false);
        long long81 = dateTimeZone75.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone75);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone75);
        java.util.Date date84 = dateTime83.toDate();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime83.getZone();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.chrono.GJChronology gJChronology89 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone86, readableInstant87, (int) (short) 1);
        java.lang.String str90 = gJChronology89.toString();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology89.hourOfHalfday();
        org.joda.time.DateTime dateTime92 = dateTime83.withChronology((org.joda.time.Chronology) gJChronology89);
        long long93 = property66.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime83);
        int int94 = dateTime83.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime92", (mutableDateTime3.compareTo(dateTime92) == 0) == mutableDateTime3.equals(dateTime92));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0866");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusHours(10);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DurationField durationField16 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = gJChronology13.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology20 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.secondOfDay();
        org.joda.time.DurationField durationField22 = gJChronology13.millis();
        org.joda.time.DurationField durationField23 = gJChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology13.era();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology13.getZone();
        org.joda.time.DurationField durationField26 = gJChronology13.years();
        org.joda.time.DurationFieldType durationFieldType27 = durationField26.getType();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime9.withFieldAdded(durationFieldType27, 26546);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField26", (durationField23.compareTo(durationField26) == 0) == durationField23.equals(durationField26));
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(611);
        org.joda.time.DateTime dateTime12 = dateTime8.minusDays(525);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DurationField durationField18 = durationFieldType13.getField((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8, (org.joda.time.Chronology) gJChronology17);
        int int21 = dateTime8.getYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime28 = property25.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded(readablePeriod29, 295);
        org.joda.time.DateTime dateTime33 = dateTime31.plusHours(26175);
        org.joda.time.DateTime.Property property34 = dateTime31.year();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((-38090));
        int int37 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime8.year();
        mutableDateTime5.setTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime41 = dateTime8.withCenturyOfEra(2614722);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime7", (mutableDateTime5.compareTo(mutableDateTime7) == 0) == mutableDateTime5.equals(mutableDateTime7));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0868");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        int int12 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.withPeriodAdded(readablePeriod17, 0);
        int int20 = dateTime15.getSecondOfDay();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime10.addDays(26147);
        int int24 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime10);
        java.lang.String str25 = mutableDateTime10.toString();
        mutableDateTime10.addSeconds(26175);
        mutableDateTime10.addMinutes(26169);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime36.withMinuteOfHour(0);
        boolean boolean41 = dateTime40.isEqualNow();
        org.joda.time.DateTime dateTime44 = dateTime40.withDurationAdded((long) 2000, 26148);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = mutableDateTime48.toDateTimeISO();
        int int50 = mutableDateTime46.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = mutableDateTime52.toDateTimeISO();
        org.joda.time.DateTime.Property property54 = dateTime53.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.withPeriodAdded(readablePeriod55, 0);
        int int58 = dateTime53.getSecondOfDay();
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime61 = dateTime53.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMillis(100);
        boolean boolean64 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime61);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology70.weekyear();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology70.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        long long79 = gJChronology70.add(readablePeriod76, 16993L, (int) (byte) 10);
        org.joda.time.DateTime dateTime80 = mutableDateTime10.toDateTime((org.joda.time.Chronology) gJChronology70);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology70.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime80", (mutableDateTime10.compareTo(dateTime80) == 0) == mutableDateTime10.equals(dateTime80));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0869");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        long long12 = dateTimeZone8.convertLocalToUTC((long) 1, false);
        long long14 = dateTimeZone8.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone8);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime16.withChronology((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, 4);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfEra(382);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMinutes(26189);
        long long43 = gJChronology22.set((org.joda.time.ReadablePartial) localDateTime37, 436L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0870");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        int int11 = mutableDateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 0);
        int int19 = dateTime14.getSecondOfDay();
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime14);
        mutableDateTime9.addDays(26147);
        mutableDateTime9.setSecondOfMinute(11);
        mutableDateTime9.addDays(26162);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.hourOfDay();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(63);
        mutableDateTime3.setZoneRetainFields(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        long long34 = dateTimeZone30.previousTransition(21711110462439L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime7 and mutableDateTime32", (mutableDateTime7.compareTo(mutableDateTime32) == 0) == mutableDateTime7.equals(mutableDateTime32));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        java.util.Locale locale18 = java.util.Locale.PRC;
        int int19 = dateTimeField5.getMaximumTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds(26147);
        int int31 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDateTime localDateTime34 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        boolean boolean41 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology53.getZone();
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = mutableDateTime60.toDateTimeISO();
        org.joda.time.DateTime.Property property62 = dateTime61.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime65 = dateTime61.withPeriodAdded(readablePeriod63, 0);
        int int66 = dateTime61.getSecondOfDay();
        org.joda.time.DateTime.Property property67 = dateTime61.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70, (int) (short) 1);
        java.lang.String str73 = gJChronology72.toString();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.era();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology72.minuteOfDay();
        org.joda.time.DurationField durationField77 = gJChronology72.seconds();
        boolean boolean78 = dateTimeZone57.equals((java.lang.Object) gJChronology72);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology72.yearOfEra();
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = dateTimeField79.getAsText((int) 'x', locale81);
        java.lang.String str85 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, 26168, locale81);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime47.withMillisOfDay(26242);
        int int88 = localDateTime87.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime47 and localDateTime48", (localDateTime47.compareTo(localDateTime48) == 0) == localDateTime47.equals(localDateTime48));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField10 = gJChronology3.hours();
        org.joda.time.DurationField durationField11 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Chronology chronology31 = gJChronology18.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Chronology chronology42 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        int int49 = localDateTime47.get(dateTimeFieldType48);
        boolean boolean50 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(100);
        int int57 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        int[] intArray64 = localDateTime60.getValues();
        gJChronology18.validate((org.joda.time.ReadablePartial) localDateTime56, intArray64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime56.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths(26163);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        org.joda.time.DateTime dateTime74 = property73.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime76 = property73.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.withPeriodAdded(readablePeriod77, 295);
        org.joda.time.DateTime.Property property80 = dateTime76.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, readableInstant82, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone85 = gJChronology84.getZone();
        long long87 = dateTimeZone85.nextTransition((long) 26149);
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale89.getDisplayScript(locale90);
        java.lang.String str92 = dateTimeZone85.getName((long) (byte) 10, locale90);
        java.lang.String str93 = property80.getAsShortText(locale90);
        java.lang.String str94 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime69, locale90);
        org.joda.time.DurationField durationField95 = dateTimeField13.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime71", (dateTime32.compareTo(mutableDateTime71) == 0) == dateTime32.equals(mutableDateTime71));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0873");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.millisOfSecond();
        java.lang.String str19 = property18.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0874");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 4537069195L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        java.lang.String str6 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.millisOfSecond();
        org.joda.time.DurationField durationField10 = gJChronology5.years();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.property(dateTimeFieldType12);
        boolean boolean14 = dateTime1.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        int int21 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.setSecondOfDay(59);
        mutableDateTime19.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime19.getZone();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime.Property property29 = dateTime28.secondOfMinute();
        int int30 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime17", (mutableDateTime11.compareTo(mutableDateTime17) == 0) == mutableDateTime11.equals(mutableDateTime17));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.Instant instant13 = instant10.withDurationAdded((long) '4', 15);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.era();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long28 = dateTimeZone26.nextTransition((long) '#');
        org.joda.time.Chronology chronology29 = gJChronology17.withZone(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = instant10.toMutableDateTime(chronology29);
        int int31 = mutableDateTime30.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.withPeriodAdded(readablePeriod36, 0);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.DateTime dateTime42 = dateTime38.withMinuteOfHour(0);
        boolean boolean43 = dateTime42.isEqualNow();
        org.joda.time.DateTime dateTime46 = dateTime42.withDurationAdded((long) 2000, 26148);
        org.joda.time.DateTime dateTime48 = dateTime42.plusMinutes(26195);
        boolean boolean50 = dateTime42.isBefore(4519122903L);
        org.joda.time.DateTime dateTime52 = dateTime42.withMillisOfDay(26353);
        boolean boolean53 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime33", (dateTime9.compareTo(mutableDateTime33) == 0) == dateTime9.equals(mutableDateTime33));
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.yearOfCentury();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology27);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, 26234);
        org.joda.time.DateTime.Property property37 = dateTime33.centuryOfEra();
        java.util.Locale locale40 = new java.util.Locale("2093-09-24T07:17:56.012Z", "2022-02-21T12:17:25.911");
        java.lang.String str41 = property37.getAsText(locale40);
        java.lang.String str42 = dateTimeZone7.getShortName(1645514400640L, locale40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime33", (dateTime22.compareTo(dateTime33) == 0) == dateTime22.equals(dateTime33));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0877");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DurationField durationField7 = durationFieldType1.getField((org.joda.time.Chronology) gJChronology5);
        org.joda.time.DurationField durationField8 = gJChronology5.eras();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(3646797502027L, (org.joda.time.Chronology) gJChronology5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField8", Math.signum(durationField7.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField7)));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0878");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514159154L);
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime((org.joda.time.Chronology) gJChronology2);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0879");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        mutableDateTime4.setYear(26148);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.yearOfEra();
        org.joda.time.DurationField durationField15 = gJChronology12.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.secondOfMinute();
        org.joda.time.DurationField durationField19 = gJChronology12.hours();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withPeriodAdded(readablePeriod33, 0);
        int int36 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.era();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = gJChronology42.seconds();
        boolean boolean48 = dateTimeZone27.equals((java.lang.Object) gJChronology42);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.era();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology51 = gJChronology42.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = dateTimeZone53.getShortName((long) 2022, locale55);
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = dateTimeZone50.getShortName(0L, locale55);
        org.joda.time.Chronology chronology59 = gJChronology12.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime4.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology12.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime4 and mutableDateTime61", (mutableDateTime4.compareTo(mutableDateTime61) == 0) == mutableDateTime4.equals(mutableDateTime61));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0880");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.minuteOfHour();
        org.joda.time.DurationField durationField15 = gJChronology11.years();
        org.joda.time.DurationField durationField16 = gJChronology11.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime6.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.era();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime26.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DurationField durationField37 = durationFieldType20.getField((org.joda.time.Chronology) gJChronology32);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 2L, (org.joda.time.Chronology) gJChronology32);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.yearOfCentury();
        org.joda.time.Chronology chronology40 = gJChronology32.withUTC();
        java.lang.String str41 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale45 = java.util.Locale.PRC;
        java.lang.String str46 = dateTimeZone43.getShortName((long) 2022, locale45);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        long long49 = dateTimeZone43.nextTransition(0L);
        long long52 = dateTimeZone43.adjustOffset(1645427818558L, false);
        org.joda.time.Chronology chronology53 = gJChronology32.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology54 = gJChronology11.withZone(dateTimeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime26", (mutableDateTime1.compareTo(dateTime26) == 0) == mutableDateTime1.equals(dateTime26));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0881");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        long long12 = dateTimeZone8.convertLocalToUTC((long) 1, false);
        long long14 = dateTimeZone8.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone8);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime16.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime16.withChronology((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DurationField durationField26 = gJChronology22.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime25", (dateTime16.compareTo(dateTime25) == 0) == dateTime16.equals(dateTime25));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DurationField durationField8 = gJChronology3.months();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology14);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(436);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.era();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("26162694");
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.yearOfCentury();
        org.joda.time.Chronology chronology44 = gJChronology40.withUTC();
        long long48 = gJChronology40.add(1645514192398L, 18026169L, 0);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        int int54 = localDateTime52.get(dateTimeFieldType53);
        boolean boolean55 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withDayOfWeek(5);
        int int58 = localDateTime52.getYear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withDurationAdded(readableDuration61, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.withMillisOfDay(26147);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withPeriodAdded(readablePeriod66, 13);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusMonths(26268);
        int[] intArray72 = gJChronology40.get((org.joda.time.ReadablePartial) localDateTime68, 192L);
        int int73 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36, intArray72);
        int int74 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime22, intArray72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime20 and localDateTime49", (localDateTime20.compareTo(localDateTime49) == 0) == localDateTime20.equals(localDateTime49));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0883");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(4);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(0);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime8.toYearMonthDay();
        boolean boolean12 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfHour();
        java.lang.String str15 = property14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.yearOfCentury();
        org.joda.time.DurationField durationField18 = gJChronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.centuryOfEra();
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology14.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime21", (mutableDateTime1.compareTo(dateTime21) == 0) == mutableDateTime1.equals(dateTime21));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0885");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField8 = gJChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.centuryOfEra();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.year();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField7, and durationField8", !(durationField15.compareTo(durationField7) == 0) || (Math.signum(durationField15.compareTo(durationField8)) == Math.signum(durationField7.compareTo(durationField8))));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime10.plusWeeks(26252);
        org.joda.time.DateTime dateTime18 = dateTime16.plus(242L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime14", (dateTime10.compareTo(dateTime14) == 0) == dateTime10.equals(dateTime14));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0887");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = gJChronology17.add(readablePeriod22, 1645514151595L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime34 = property32.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology39.getZone();
        org.joda.time.Chronology chronology44 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType46.getField((org.joda.time.Chronology) gJChronology50);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.lang.String str60 = dateTimeZone57.getShortName((long) 2022, locale59);
        java.lang.String str61 = locale59.getScript();
        java.lang.String str62 = dateTimeField55.getAsText((int) '4', locale59);
        java.lang.String str63 = locale59.getISO3Language();
        int int64 = dateTimeField45.getMaximumShortTextLength(locale59);
        java.lang.String str65 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime34, 26222, locale59);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.centuryOfEra();
        java.lang.String str68 = property67.getAsText();
        org.joda.time.LocalDateTime localDateTime70 = property67.setCopy(26164);
        java.util.Date date71 = localDateTime70.toDate();
        int[] intArray72 = localDateTime70.getValues();
        gJChronology3.validate((org.joda.time.ReadablePartial) localDateTime34, intArray72);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str77 = dateTimeZone76.getID();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = mutableDateTime82.toDateTimeISO();
        int int84 = mutableDateTime80.compareTo((org.joda.time.ReadableInstant) mutableDateTime82);
        mutableDateTime82.setSecondOfDay(59);
        mutableDateTime82.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone89 = mutableDateTime82.getZone();
        java.lang.String str91 = dateTimeZone89.getShortName((long) 51);
        mutableDateTime78.setZoneRetainFields(dateTimeZone89);
        boolean boolean93 = dateTimeZone89.isFixed();
        org.joda.time.Chronology chronology94 = gJChronology3.withZone(dateTimeZone89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime80", (dateTime9.compareTo(mutableDateTime80) == 0) == dateTime9.equals(mutableDateTime80));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0888");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.addWeekyears(26164);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        long long17 = gJChronology11.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        java.util.Locale locale21 = dateTimeFormatter20.getLocale();
        boolean boolean22 = gJChronology11.equals((java.lang.Object) dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.getID();
        boolean boolean25 = dateTimeZone23.isFixed();
        long long27 = dateTimeZone23.convertUTCToLocal((long) (byte) 0);
        int int29 = dateTimeZone23.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = property33.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.minusHours(10);
        boolean boolean40 = dateTimeZone23.equals((java.lang.Object) localDateTime39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime3.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        boolean boolean44 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54, (int) (short) 1);
        java.lang.String str57 = gJChronology56.toString();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.era();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime50.toMutableDateTime((org.joda.time.Chronology) gJChronology56);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime50.plus(readablePeriod61);
        org.joda.time.DateTime.Property property63 = dateTime62.weekyear();
        int int64 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime62", (mutableDateTime1.compareTo(dateTime62) == 0) == mutableDateTime1.equals(dateTime62));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0889");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType21.getField((org.joda.time.Chronology) gJChronology25);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType21.getDurationType();
        mutableDateTime20.add(durationFieldType32, 26159);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        java.lang.String str50 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.era();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime43.toMutableDateTime((org.joda.time.Chronology) gJChronology49);
        org.joda.time.DurationField durationField54 = durationFieldType37.getField((org.joda.time.Chronology) gJChronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 2L, (org.joda.time.Chronology) gJChronology49);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology49);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology49.era();
        java.lang.String str58 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology49.secondOfDay();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 26399, (org.joda.time.Chronology) gJChronology49);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime60.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime43", (mutableDateTime1.compareTo(dateTime43) == 0) == mutableDateTime1.equals(dateTime43));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0890");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField12 = gJChronology4.years();
        org.joda.time.DurationField durationField13 = gJChronology4.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology4.add(readablePeriod14, (long) 26238, 627);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.era();
        org.joda.time.DurationField durationField20 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField21 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField12, and durationField20", !(durationField21.compareTo(durationField12) == 0) || (Math.signum(durationField21.compareTo(durationField20)) == Math.signum(durationField12.compareTo(durationField20))));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 4537011236L, 26175);
        org.joda.time.DurationField durationField13 = gJChronology3.eras();
        org.joda.time.DurationField durationField14 = gJChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField13", Math.signum(durationField7.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField7)));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0892");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfMinute();
        long long14 = dateTimeField12.roundHalfEven(3903232621682L);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.era();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = gJChronology18.add(readablePeriod24, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        boolean boolean37 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfSecond();
        int[] intArray53 = localDateTime50.getValues();
        int int54 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = mutableDateTime58.toDateTimeISO();
        int int60 = mutableDateTime56.compareTo((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = mutableDateTime62.toDateTimeISO();
        org.joda.time.DateTime.Property property64 = dateTime63.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime67 = dateTime63.withPeriodAdded(readablePeriod65, 0);
        int int68 = dateTime63.getSecondOfDay();
        mutableDateTime58.setDate((org.joda.time.ReadableInstant) dateTime63);
        mutableDateTime58.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime58.era();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        int int78 = mutableDateTime74.compareTo((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = mutableDateTime80.toDateTimeISO();
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withPeriodAdded(readablePeriod83, 0);
        int int86 = dateTime81.getSecondOfDay();
        mutableDateTime76.setDate((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime76.setMillisOfDay((int) 'a');
        boolean boolean90 = mutableDateTime58.isAfter((org.joda.time.ReadableInstant) mutableDateTime76);
        mutableDateTime76.setDayOfYear((int) (short) 10);
        int int93 = mutableDateTime76.getWeekOfWeekyear();
        org.joda.time.Instant instant94 = mutableDateTime76.toInstant();
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime76.yearOfEra();
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime76.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime97 = property96.roundHalfEven();
        org.joda.time.DateTime dateTime98 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) mutableDateTime97);
        org.joda.time.DateTime.Property property99 = dateTime98.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime30 and localDateTime31", (localDateTime30.compareTo(localDateTime31) == 0) == localDateTime30.equals(localDateTime31));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField10 = gJChronology3.hours();
        org.joda.time.DurationField durationField11 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Chronology chronology31 = gJChronology18.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Chronology chronology42 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        int int49 = localDateTime47.get(dateTimeFieldType48);
        boolean boolean50 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(100);
        int int57 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.minuteOfHour();
        int[] intArray64 = localDateTime60.getValues();
        gJChronology18.validate((org.joda.time.ReadablePartial) localDateTime56, intArray64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime56.plusMillis(627);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths(26163);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.millisOfDay();
        org.joda.time.DateTime dateTime74 = property73.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime76 = property73.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.withPeriodAdded(readablePeriod77, 295);
        org.joda.time.DateTime.Property property80 = dateTime76.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, readableInstant82, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone85 = gJChronology84.getZone();
        long long87 = dateTimeZone85.nextTransition((long) 26149);
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale89.getDisplayScript(locale90);
        java.lang.String str92 = dateTimeZone85.getName((long) (byte) 10, locale90);
        java.lang.String str93 = property80.getAsShortText(locale90);
        java.lang.String str94 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime69, locale90);
        int int95 = localDateTime69.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime71", (dateTime32.compareTo(mutableDateTime71) == 0) == dateTime32.equals(mutableDateTime71));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0894");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology6.getZone();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMinutes(26189733);
        org.joda.time.DateTime dateTime18 = dateTime13.withMillisOfSecond(138);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.monthOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = gJChronology22.add(readablePeriod27, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology31 = gJChronology22.withUTC();
        org.joda.time.DurationField durationField32 = gJChronology22.months();
        org.joda.time.Instant instant33 = gJChronology22.getGregorianCutover();
        org.joda.time.DurationField durationField34 = gJChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology22.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime13.toMutableDateTime((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTime dateTime38 = dateTime13.plusYears(256);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime36", (mutableDateTime1.compareTo(mutableDateTime36) == 0) == mutableDateTime1.equals(mutableDateTime36));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0895");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField9 = localDateTime5.getField(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMinutes(26193);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withPeriodAdded(readablePeriod37, 523);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withWeekyear(26287317);
        int int42 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        int int49 = localDateTime47.get(dateTimeFieldType48);
        boolean boolean50 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis(10);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        int int64 = localDateTime61.getCenturyOfEra();
        int int65 = localDateTime60.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology70.millisOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology70.getZone();
        java.lang.String str75 = dateTimeZone74.getID();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime78 = mutableDateTime77.toDateTimeISO();
        org.joda.time.DateTime.Property property79 = dateTime78.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.DateTime dateTime82 = dateTime78.withPeriodAdded(readablePeriod80, 0);
        int int83 = dateTime78.getSecondOfDay();
        org.joda.time.DateTime.Property property84 = dateTime78.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, (org.joda.time.ReadableInstant) dateTime78);
        boolean boolean86 = durationFieldType66.isSupported((org.joda.time.Chronology) gJChronology85);
        boolean boolean87 = localDateTime60.isSupported(durationFieldType66);
        boolean boolean88 = localDateTime39.isSupported(durationFieldType66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime39 and localDateTime43", (localDateTime39.compareTo(localDateTime43) == 0) == localDateTime39.equals(localDateTime43));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0896");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.addWeeks(4);
        org.joda.time.DateTime dateTime18 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        long long19 = mutableDateTime15.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = localDateTime23.get(dateTimeFieldType24);
        boolean boolean26 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        mutableDateTime35.addWeeks(4);
        org.joda.time.DateTime dateTime38 = localDateTime32.toDateTime((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology42.year();
        org.joda.time.DurationField durationField48 = gJChronology42.halfdays();
        mutableDateTime35.setChronology((org.joda.time.Chronology) gJChronology42);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        int int52 = mutableDateTime51.getEra();
        int int53 = mutableDateTime51.getRoundingMode();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableDateTime51.add(readablePeriod54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime51.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59, (int) (short) 1);
        java.lang.String str62 = gJChronology61.toString();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology61.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale69 = java.util.Locale.PRC;
        java.lang.String str70 = dateTimeZone67.getShortName((long) 2022, locale69);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        int[] intArray73 = gJChronology61.get((org.joda.time.ReadablePartial) localDateTime71, 7L);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology61.hourOfHalfday();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology61.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology61.getZone();
        mutableDateTime57.setZoneRetainFields(dateTimeZone78);
        org.joda.time.Chronology chronology80 = gJChronology42.withZone(dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) long19, chronology80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime35", (mutableDateTime15.compareTo(mutableDateTime35) == 0) == mutableDateTime15.equals(mutableDateTime35));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.monthOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.DateTime dateTime41 = dateTime38.minus((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean43 = dateTime38.isSupported(dateTimeFieldType42);
        int int44 = mutableDateTime3.get(dateTimeFieldType42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime36", (dateTime4.compareTo(dateTime36) == 0) == dateTime4.equals(dateTime36));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = gJChronology3.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 4537011236L, 26175);
        org.joda.time.DurationField durationField13 = gJChronology3.eras();
        org.joda.time.DurationField durationField14 = gJChronology3.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField13", Math.signum(durationField7.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField7)));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0899");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology4.getZone();
        java.lang.String str8 = dateTimeZone6.getName((long) 26155);
        org.joda.time.Chronology chronology9 = gJChronology0.withZone(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology0.getZone();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.monthOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfWeek();
        org.joda.time.DurationField durationField22 = gJChronology16.halfdays();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        int int28 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        java.lang.String str40 = dateTimeZone39.getID();
        boolean boolean42 = dateTimeZone39.isStandardOffset(2L);
        mutableDateTime26.setZone(dateTimeZone39);
        org.joda.time.Chronology chronology44 = gJChronology16.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology16.dayOfWeek();
        org.joda.time.DurationField durationField46 = gJChronology16.seconds();
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime12.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology16.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime47", (mutableDateTime12.compareTo(mutableDateTime47) == 0) == mutableDateTime12.equals(mutableDateTime47));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0900");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        long long22 = gJChronology18.set((org.joda.time.ReadablePartial) localDateTime19, (long) (-1));
        org.joda.time.DurationField durationField23 = gJChronology18.months();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        boolean boolean31 = property30.isLeap();
        org.joda.time.LocalDateTime localDateTime32 = property30.getLocalDateTime();
        java.lang.String str34 = localDateTime32.toString("26161757");
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusWeeks(948);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        java.lang.String str41 = gJChronology40.toString();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology40);
        org.joda.time.DateTime dateTime44 = dateTime42.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.era();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime42.toMutableDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DurationField durationField53 = gJChronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.year();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyear();
        int int61 = localDateTime59.get(dateTimeFieldType60);
        boolean boolean62 = localDateTime57.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        boolean boolean65 = localDateTime63.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusDays((int) (short) -1);
        boolean boolean69 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        boolean boolean72 = localDateTime70.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime74 = property73.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.hourOfDay();
        org.joda.time.LocalDateTime localDateTime76 = property75.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, 948);
        boolean boolean80 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime76.withDurationAdded(readableDuration81, 26244);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime76.withCenturyOfEra(26344);
        int[] intArray87 = gJChronology48.get((org.joda.time.ReadablePartial) localDateTime85, (long) 26304);
        gJChronology18.validate((org.joda.time.ReadablePartial) localDateTime36, intArray87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime42", (mutableDateTime10.compareTo(dateTime42) == 0) == mutableDateTime10.equals(dateTime42));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime4.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.era();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DurationField durationField17 = gJChronology16.seconds();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime6.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime20", (mutableDateTime1.compareTo(mutableDateTime20) == 0) == mutableDateTime1.equals(mutableDateTime20));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0902");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        mutableDateTime4.addMonths(2922790);
        mutableDateTime4.setTime((long) 26152);
        mutableDateTime4.setSecondOfDay(26199);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 948);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(3600001L);
        mutableDateTime27.setDate(220924800100L);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfEra();
        org.joda.time.DurationField durationField40 = gJChronology37.halfdays();
        org.joda.time.DurationField durationField41 = gJChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.dayOfMonth();
        boolean boolean43 = dateTimeFieldType33.isSupported((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType33.getDurationType();
        boolean boolean45 = instant32.isSupported(dateTimeFieldType33);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) instant32);
        boolean boolean47 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant48 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.centuryOfEra();
        org.joda.time.DurationField durationField58 = gJChronology52.weeks();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        java.lang.String str67 = dateTimeZone66.getID();
        long long70 = dateTimeZone66.convertLocalToUTC((long) 1, false);
        org.joda.time.Chronology chronology71 = gJChronology52.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology52.clockhourOfHalfday();
        org.joda.time.DateTime dateTime73 = instant32.toDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeField dateTimeField74 = gJChronology52.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime73", (instant32.compareTo(dateTime73) == 0) == instant32.equals(dateTime73));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0903");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        java.lang.String str9 = dateTimeField7.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone24.getShortName((long) 2022, locale26);
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 295, locale26);
        java.util.Locale.setDefault(category0, locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        boolean boolean58 = dateTimeZone37.equals((java.lang.Object) gJChronology52);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale62);
        java.lang.String str66 = nameProvider61.getName(locale62, "secondOfMinute", "Etc/UTC");
        java.lang.String str67 = locale62.getDisplayLanguage();
        java.lang.String str68 = dateTimeField59.getAsText(4528800000L, locale62);
        boolean boolean69 = locale62.hasExtensions();
        java.lang.String str70 = locale62.getScript();
        java.util.Locale.setDefault(category0, locale62);
        java.util.Locale locale72 = java.util.Locale.getDefault(category0);
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = locale73.toLanguageTag();
        java.lang.String str75 = locale72.getDisplayScript(locale73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76, readableInstant77, (int) (short) 1);
        java.lang.String str80 = gJChronology79.toString();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology79);
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.secondOfMinute();
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale84);
        java.lang.String str86 = locale84.getDisplayScript();
        java.lang.String str87 = locale84.toLanguageTag();
        java.lang.String str88 = locale84.getLanguage();
        java.lang.String str89 = dateTimeField82.getAsText(53L, locale84);
        java.lang.String str90 = locale73.getDisplayScript(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime40 and mutableDateTime81", (mutableDateTime40.compareTo(mutableDateTime81) == 0) == mutableDateTime40.equals(mutableDateTime81));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withSecondOfMinute(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withMonthOfYear(4);
        long long16 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime9, (long) '#');
        org.joda.time.DateTimeField dateTimeField17 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField20 = gJChronology3.minutes();
        org.joda.time.DurationField durationField21 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField6, and durationField20", !(durationField21.compareTo(durationField6) == 0) || (Math.signum(durationField21.compareTo(durationField20)) == Math.signum(durationField6.compareTo(durationField20))));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0905");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusSeconds(10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology14.getZone();
        org.joda.time.DurationField durationField17 = gJChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withPeriodAdded(readablePeriod25, 0);
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime27.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime33 = dateTime27.plusMinutes(26182);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.secondOfDay();
        boolean boolean36 = gJChronology14.equals((java.lang.Object) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime2.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DurationField durationField38 = gJChronology14.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime37", (mutableDateTime1.compareTo(dateTime37) == 0) == mutableDateTime1.equals(dateTime37));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0906");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.DateTime dateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        java.util.Locale locale19 = new java.util.Locale("26", "halfdays");
        java.lang.String str20 = property15.getAsText(locale19);
        org.joda.time.MutableDateTime mutableDateTime22 = property15.addWrapField(26173);
        org.joda.time.MutableDateTime mutableDateTime24 = property15.addWrapField((int) (short) 1);
        int int25 = mutableDateTime24.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(0);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear((int) '#');
        org.joda.time.DateTime dateTime37 = dateTime35.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.add(1L);
        boolean boolean43 = dateTime37.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime37.minus(readablePeriod44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str49 = dateTimeZone48.getID();
        boolean boolean50 = dateTimeZone48.isFixed();
        long long52 = dateTimeZone48.convertUTCToLocal((long) (byte) 0);
        int int54 = dateTimeZone48.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone48);
        int int56 = localDateTime55.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withField(dateTimeFieldType57, (int) (short) 0);
        org.joda.time.DateTime.Property property60 = dateTime45.property(dateTimeFieldType57);
        int int61 = mutableDateTime24.get(dateTimeFieldType57);
        java.lang.String str62 = mutableDateTime24.toString();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableDateTime24.add(readablePeriod63, 26287);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime24.minuteOfHour();
        int int68 = property10.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime33", (dateTime11.compareTo(dateTime33) == 0) == dateTime11.equals(dateTime33));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0907");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.era();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setVariant("Deutsch");
        java.util.Locale.Builder builder14 = builder10.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale15 = builder14.build();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DurationField durationField21 = gJChronology19.hours();
        java.lang.String str22 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear((int) (byte) 10);
        int int33 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = property43.getAsText(locale44);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale47.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale51);
        java.lang.String str55 = nameProvider50.getName(locale51, "secondOfMinute", "Etc/UTC");
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.lang.String str57 = locale47.getDisplayVariant(locale51);
        java.lang.String str58 = locale44.getDisplayScript(locale47);
        java.lang.String str59 = localDateTime30.toString("192", locale44);
        java.lang.String str60 = locale44.getCountry();
        int int61 = dateTimeField24.getMaximumShortTextLength(locale44);
        java.lang.String str62 = locale44.getISO3Country();
        java.util.Locale.Builder builder63 = builder14.setLocale(locale44);
        java.util.Set<java.lang.String> strSet64 = locale44.getUnicodeLocaleAttributes();
        int int65 = property8.getMaximumShortTextLength(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant7", (mutableDateTime6.compareTo(instant7) == 0) == mutableDateTime6.equals(instant7));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0908");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfMonth();
        org.joda.time.DurationField durationField8 = gJChronology3.seconds();
        org.joda.time.DurationField durationField9 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField10 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField6, and durationField8", !(durationField10.compareTo(durationField6) == 0) || (Math.signum(durationField10.compareTo(durationField8)) == Math.signum(durationField6.compareTo(durationField8))));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0909");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(26163);
        java.lang.String str8 = dateTime5.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime5.withDurationAdded(readableDuration9, 26270);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str19 = dateTimeZone12.getShortName(874L);
        org.joda.time.DateTime dateTime20 = dateTime5.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.property(dateTimeFieldType26);
        org.joda.time.MutableDateTime mutableDateTime28 = property27.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.addWrapField(26232);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone32);
        org.joda.time.Chronology chronology35 = mutableDateTime34.getChronology();
        mutableDateTime30.setTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime30.getZone();
        org.joda.time.DateTime dateTime38 = dateTime5.withZone(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime17", (dateTime38.compareTo(dateTime17) == 0) == dateTime38.equals(dateTime17));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0910");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.year();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusSeconds(0);
        int int21 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime20.getEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfDay(10);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFieldAdded(durationFieldType25, 833);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        long long30 = gJChronology0.set((org.joda.time.ReadablePartial) localDateTime27, 31190400000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime1 and localDateTime10", (localDateTime1.compareTo(localDateTime10) == 0) == localDateTime1.equals(localDateTime10));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0911");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology4.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 26185, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology4.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology4.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology4.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField22", Math.signum(durationField9.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField9)));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0912");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.minuteOfHour();
        org.joda.time.DurationField durationField14 = gJChronology4.eras();
        org.joda.time.DurationField durationField15 = gJChronology4.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField14", Math.signum(durationField10.compareTo(durationField14)) == -Math.signum(durationField14.compareTo(durationField10)));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0913");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = gJChronology4.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology4.minutes();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 2030, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.months();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField8, and durationField10", !(durationField12.compareTo(durationField8) == 0) || (Math.signum(durationField12.compareTo(durationField10)) == Math.signum(durationField8.compareTo(durationField10))));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        long long12 = instant11.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant11", (dateTime9.compareTo(instant11) == 0) == dateTime9.equals(instant11));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0915");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        java.lang.Integer int5 = dateTimeFormatter3.getPivotYear();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale7 = dateTimeFormatter3.getLocale();
        java.util.Locale locale9 = new java.util.Locale("2022-02-21T07:18:13.154");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withLocale(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType11.getField((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField21 = gJChronology15.hours();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime31.getFieldType((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withPeriodAdded(readablePeriod40, 0);
        int int43 = dateTime38.getSecondOfDay();
        org.joda.time.DateTime.Property property44 = dateTime38.minuteOfHour();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale45);
        java.lang.String str47 = property44.getAsText(locale45);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.lang.String str50 = locale48.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale52);
        java.lang.String str56 = nameProvider51.getName(locale52, "secondOfMinute", "Etc/UTC");
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale48.getDisplayVariant(locale52);
        java.lang.String str59 = locale45.getDisplayScript(locale48);
        java.lang.String str60 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime31, locale48);
        java.lang.String str61 = locale48.getDisplayLanguage();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime67.getZone();
        org.joda.time.DateTime dateTime72 = dateTime67.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property73 = dateTime67.centuryOfEra();
        org.joda.time.DateTime dateTime74 = property73.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        boolean boolean77 = localDateTime75.isBefore((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime79 = property78.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.hourOfDay();
        boolean boolean81 = property80.isLeap();
        org.joda.time.LocalDateTime localDateTime82 = property80.getLocalDateTime();
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale83);
        java.lang.String str85 = locale83.getDisplayScript();
        java.lang.String str86 = property80.getAsShortText(locale83);
        java.lang.String str87 = property73.getAsText(locale83);
        java.lang.String str88 = locale83.getISO3Country();
        java.lang.String str89 = locale83.getDisplayVariant();
        java.lang.String str90 = locale48.getDisplayName(locale83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter3.withLocale(locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime37 and dateTime67", (mutableDateTime37.compareTo(dateTime67) == 0) == mutableDateTime37.equals(dateTime67));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0916");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(26227);
        long long15 = dateTime14.getMillis();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.joda.time.LocalTime localTime17 = dateTime14.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 'x');
        org.joda.time.Chronology chronology37 = gJChronology21.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology21.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime14.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField40 = gJChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime39", (dateTime14.compareTo(dateTime39) == 0) == dateTime14.equals(dateTime39));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Chronology chronology8 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField11 = gJChronology3.hours();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField13 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField13", (durationField9.compareTo(durationField13) == 0) == durationField9.equals(durationField13));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean19 = dateTimeZone16.isStandardOffset(2L);
        mutableDateTime3.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime24.setMillisOfDay((int) 'a');
        mutableDateTime24.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime24.add(readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        int int45 = dateTime44.getYearOfEra();
        boolean boolean46 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime44);
        java.util.GregorianCalendar gregorianCalendar47 = mutableDateTime24.toGregorianCalendar();
        long long48 = mutableDateTime24.getMillis();
        java.lang.String str49 = mutableDateTime24.toString();
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        long long60 = gJChronology54.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField62 = gJChronology54.minutes();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology54.dayOfWeek();
        mutableDateTime24.setRounding(dateTimeField63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime61", (mutableDateTime1.compareTo(mutableDateTime61) == 0) == mutableDateTime1.equals(mutableDateTime61));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0919");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay(9);
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType8.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField18 = gJChronology12.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(26153);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.withPeriodAdded(readablePeriod26, 0);
        org.joda.time.DateTime.Property property29 = dateTime28.hourOfDay();
        org.joda.time.Chronology chronology30 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime28.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime34 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.withMillisOfSecond(516);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime19.withYearOfEra(26397);
        boolean boolean39 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localDateTime6.getFields();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime0 and localDateTime19", (localDateTime0.compareTo(localDateTime19) == 0) == localDateTime0.equals(localDateTime19));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(26502014);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(26325);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(26193);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        boolean boolean40 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) mutableDateTime38);
        boolean boolean42 = mutableDateTime36.isEqual((long) 7);
        mutableDateTime36.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DurationField durationField51 = durationFieldType45.getField((org.joda.time.Chronology) gJChronology49);
        mutableDateTime36.setChronology((org.joda.time.Chronology) gJChronology49);
        mutableDateTime36.addMonths((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime36.property(dateTimeFieldType55);
        boolean boolean57 = localDateTime32.isSupported(dateTimeFieldType55);
        int int58 = dateTime15.get(dateTimeFieldType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime38", (dateTime5.compareTo(mutableDateTime38) == 0) == dateTime5.equals(mutableDateTime38));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0921");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.hours();
        org.joda.time.Instant instant14 = gJChronology4.getGregorianCutover();
        org.joda.time.DurationField durationField15 = gJChronology4.months();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology4.millisOfSecond();
        org.joda.time.DurationField durationField17 = gJChronology4.millis();
        org.joda.time.DurationField durationField18 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField12, and durationField13", !(durationField18.compareTo(durationField12) == 0) || (Math.signum(durationField18.compareTo(durationField13)) == Math.signum(durationField12.compareTo(durationField13))));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0922");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant10 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.year();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField15 = gJChronology4.weeks();
        org.joda.time.DurationField durationField16 = gJChronology4.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField9, and durationField15", !(durationField16.compareTo(durationField9) == 0) || (Math.signum(durationField16.compareTo(durationField15)) == Math.signum(durationField9.compareTo(durationField15))));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0923");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillisOfDay(10);
        org.joda.time.DateTime dateTime11 = dateTime5.minusDays((int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime14.withPeriodAdded(readablePeriod16, 0);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        boolean boolean21 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        int int27 = mutableDateTime23.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withPeriodAdded(readablePeriod32, 0);
        int int35 = dateTime30.getSecondOfDay();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant37 = dateTime30.toInstant();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.plus(readableDuration38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant37.toMutableDateTime();
        int int41 = mutableDateTime40.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        java.lang.String str46 = gJChronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.era();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.millisOfSecond();
        org.joda.time.DurationField durationField50 = gJChronology45.years();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology45);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology45.getZone();
        java.lang.String str53 = dateTimeZone52.getID();
        mutableDateTime40.setZone(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime20.toDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime51", (mutableDateTime1.compareTo(mutableDateTime51) == 0) == mutableDateTime1.equals(mutableDateTime51));
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = property18.getAsShortText(locale21);
        java.lang.String str25 = property11.getAsText(locale21);
        org.joda.time.DateTime dateTime27 = property11.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        mutableDateTime28.addSeconds(26176);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.yearOfCentury();
        org.joda.time.DurationField durationField38 = gJChronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.centuryOfEra();
        mutableDateTime28.setRounding(dateTimeField40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        java.lang.String str51 = dateTimeZone50.getID();
        long long54 = dateTimeZone50.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        java.lang.String str59 = gJChronology58.toString();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.monthOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        int int63 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) instant62);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField65 = gJChronology64.millisOfSecond();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 26274, (org.joda.time.Chronology) gJChronology64);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime28.toMutableDateTime((org.joda.time.Chronology) gJChronology64);
        org.joda.time.DurationField durationField68 = gJChronology64.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and mutableDateTime67", (mutableDateTime28.compareTo(mutableDateTime67) == 0) == mutableDateTime28.equals(mutableDateTime67));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        org.joda.time.DurationField durationField8 = gJChronology7.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime3.toMutableDateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.Chronology chronology13 = gJChronology7.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime12", (mutableDateTime1.compareTo(mutableDateTime12) == 0) == mutableDateTime1.equals(mutableDateTime12));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.hourOfHalfday();
        org.joda.time.DurationField durationField27 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = instant19.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        java.lang.String str35 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.dayOfMonth();
        org.joda.time.DurationField durationField40 = gJChronology34.eras();
        boolean boolean41 = mutableDateTime29.equals((java.lang.Object) gJChronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField27 and durationField40", Math.signum(durationField27.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField27)));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.plusMinutes(26179);
        org.joda.time.DateTime dateTime18 = dateTime11.minusMillis(26201);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(26245);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and instant19", (dateTime18.compareTo(instant19) == 0) == dateTime18.equals(instant19));
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0928");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField16 = gJChronology11.minutes();
        org.joda.time.DurationField durationField17 = gJChronology11.weekyears();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = localDateTime21.get(dateTimeFieldType22);
        boolean boolean24 = localDateTime19.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        mutableDateTime33.addWeeks(4);
        org.joda.time.DateTime dateTime36 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.minus(readableDuration37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime30.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy(26208);
        int int42 = localDateTime41.getCenturyOfEra();
        long long44 = gJChronology11.set((org.joda.time.ReadablePartial) localDateTime41, (long) 9);
        org.joda.time.DurationField durationField45 = gJChronology11.years();
        org.joda.time.DurationField durationField46 = gJChronology11.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField45", (durationField17.compareTo(durationField45) == 0) == durationField17.equals(durationField45));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0929");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.weekyears();
        org.joda.time.Instant instant3 = gJChronology0.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = localDateTime8.get(dateTimeFieldType9);
        boolean boolean11 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.yearOfEra();
        org.joda.time.DurationField durationField26 = gJChronology23.halfdays();
        boolean boolean27 = dateTimeFieldType19.isSupported((org.joda.time.Chronology) gJChronology23);
        int int28 = localDateTime18.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withYearOfEra(2000);
        boolean boolean31 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.centuryOfEra();
        java.util.Locale locale36 = new java.util.Locale("DurationField[centuries]", "2022-02-21T07:17:58.239", "2022-02-22T00:00:00.097Z");
        int int37 = property32.getMaximumShortTextLength(locale36);
        int int38 = dateTimeField4.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime1 and localDateTime5", (localDateTime1.compareTo(localDateTime5) == 0) == localDateTime1.equals(localDateTime5));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0930");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant39 = mutableDateTime21.toInstant();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime21.yearOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime21.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        java.lang.String str47 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.era();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.minuteOfDay();
        org.joda.time.DurationField durationField51 = gJChronology46.seconds();
        long long55 = gJChronology46.add(20000L, (long) 1, 192);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology46.centuryOfEra();
        org.joda.time.DurationField durationField59 = gJChronology46.hours();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime42, (org.joda.time.Chronology) gJChronology46);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology46.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and dateTime60", (mutableDateTime21.compareTo(dateTime60) == 0) == mutableDateTime21.equals(dateTime60));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0931");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfEra();
        int int20 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        java.lang.String str25 = gJChronology24.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay(0);
        org.joda.time.DateTime dateTime30 = dateTime28.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, 26148);
        org.joda.time.DateTime.Property property34 = dateTime30.era();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.DateTime dateTime38 = dateTime30.withFieldAdded(durationFieldType35, 26181);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = gJChronology42.minutes();
        org.joda.time.DurationField durationField47 = gJChronology42.millis();
        org.joda.time.DurationField durationField48 = gJChronology42.millis();
        boolean boolean49 = durationFieldType35.isSupported((org.joda.time.Chronology) gJChronology42);
        java.lang.String str50 = durationFieldType35.getName();
        mutableDateTime18.add(durationFieldType35, 329);
        org.joda.time.DateTime dateTime54 = dateTime16.withFieldAdded(durationFieldType35, 32);
        org.joda.time.DateTime dateTime56 = dateTime16.plusDays(56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and dateTime26", (mutableDateTime14.compareTo(dateTime26) == 0) == mutableDateTime14.equals(dateTime26));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay(0);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withPeriodAdded(readablePeriod16, 26148);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime15.withDurationAdded(readableDuration19, 192);
        org.joda.time.DateTime dateTime23 = dateTime15.plusHours(100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DurationField durationField30 = gJChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology27.getZone();
        org.joda.time.DateTime dateTime34 = dateTime15.toDateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DurationField durationField35 = gJChronology27.months();
        org.joda.time.DurationField durationField36 = gJChronology27.weeks();
        org.joda.time.DurationField durationField37 = gJChronology27.seconds();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DurationField durationField39 = gJChronology27.weekyears();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology27.getZone();
        boolean boolean42 = dateTimeZone40.isStandardOffset(126396000000L);
        mutableDateTime3.setZoneRetainFields(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime11", (mutableDateTime1.compareTo(dateTime11) == 0) == mutableDateTime1.equals(dateTime11));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        long long20 = gJChronology14.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long24 = gJChronology14.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField25 = gJChronology14.days();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology30.years();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean37 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime36.add(readablePeriod38, 26530217);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime26", (dateTime10.compareTo(mutableDateTime26) == 0) == dateTime10.equals(mutableDateTime26));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0934");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        boolean boolean22 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        java.lang.String str24 = mutableDateTime20.toString("15");
        mutableDateTime20.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.minuteOfHour();
        int int28 = property27.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        java.lang.String str34 = gJChronology33.toString();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology33);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        boolean boolean42 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDayOfWeek(5);
        int int45 = localDateTime39.getYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = dateTime35.withFields((org.joda.time.ReadablePartial) localDateTime47);
        int int49 = dateTime35.getEra();
        int int50 = property27.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime52 = dateTime35.minusMillis(999);
        int int53 = mutableDateTime16.compareTo((org.joda.time.ReadableInstant) dateTime35);
        int int54 = mutableDateTime16.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime35", (mutableDateTime1.compareTo(dateTime35) == 0) == mutableDateTime1.equals(dateTime35));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0935");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime10 = property7.addToCopy((-86399998L));
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.withField(dateTimeFieldType11, 44249370);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        int int19 = mutableDateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withPeriodAdded(readablePeriod24, 0);
        int int27 = dateTime22.getSecondOfDay();
        mutableDateTime17.setDate((org.joda.time.ReadableInstant) dateTime22);
        mutableDateTime17.setMillisOfDay((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str32 = dateTimeZone31.getID();
        boolean boolean33 = dateTimeZone31.isFixed();
        long long35 = dateTimeZone31.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime17, dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime10.toMutableDateTime(dateTimeZone38);
        int int42 = dateTimeZone38.getOffset(1645488070163L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        java.lang.String str52 = dateTimeZone51.getID();
        long long55 = dateTimeZone51.convertLocalToUTC((long) 1, false);
        long long57 = dateTimeZone51.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone51);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone51);
        boolean boolean61 = dateTime59.isBefore(4519134870L);
        org.joda.time.DateTime dateTime63 = dateTime59.withYearOfEra(512);
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime59", (mutableDateTime1.compareTo(dateTime59) == 0) == mutableDateTime1.equals(dateTime59));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0936");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = locale27.getDisplayCountry();
        int int31 = property3.getMaximumShortTextLength(locale27);
        boolean boolean32 = property3.isLeap();
        org.joda.time.DateTime dateTime33 = property3.withMaximumValue();
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        java.lang.String str41 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.monthOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology40);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime47.minusWeeks(26152);
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime47.minusWeeks(26289);
        int int54 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime45", (mutableDateTime1.compareTo(dateTime45) == 0) == mutableDateTime1.equals(dateTime45));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0937");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear(70);
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear(26158);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withDefaultYear(26258);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean20 = dateTimeZone18.isFixed();
        long long22 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        int int24 = dateTimeZone18.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.minusHours(10);
        boolean boolean35 = dateTimeZone18.equals((java.lang.Object) localDateTime34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter17.withZone(dateTimeZone18);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime53.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime54.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.withPeriodAdded(readablePeriod56, 0);
        int int59 = dateTime54.getSecondOfDay();
        org.joda.time.DateTime.Property property60 = dateTime54.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.era();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology65.minuteOfDay();
        org.joda.time.DurationField durationField70 = gJChronology65.seconds();
        boolean boolean71 = dateTimeZone50.equals((java.lang.Object) gJChronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter40.withChronology((org.joda.time.Chronology) gJChronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter72.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, readableInstant75, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology77.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.Chronology chronology80 = gJChronology77.withZone(dateTimeZone79);
        org.joda.time.DurationField durationField81 = gJChronology77.minutes();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology77.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter73.withChronology((org.joda.time.Chronology) gJChronology77);
        org.joda.time.DateTimeField dateTimeField84 = gJChronology77.era();
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology77);
        org.joda.time.DurationField durationField86 = gJChronology77.years();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology77.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter17.withChronology((org.joda.time.Chronology) gJChronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime25 and localDateTime85", (localDateTime25.compareTo(localDateTime85) == 0) == localDateTime25.equals(localDateTime85));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0938");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusDays((int) (short) -1);
        boolean boolean13 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, 948);
        boolean boolean24 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.dayOfMonth();
        boolean boolean27 = property25.equals((java.lang.Object) 763106140800035L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        java.lang.String str36 = dateTimeZone35.getID();
        long long39 = dateTimeZone35.convertLocalToUTC((long) 1, false);
        long long41 = dateTimeZone35.previousTransition((long) 5);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone35);
        int int43 = property25.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = mutableDateTime49.toDateTimeISO();
        int int51 = mutableDateTime47.compareTo((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime53.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime54.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.withPeriodAdded(readablePeriod56, 0);
        int int59 = dateTime54.getSecondOfDay();
        mutableDateTime49.setDate((org.joda.time.ReadableInstant) dateTime54);
        mutableDateTime49.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime49.era();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = mutableDateTime67.toDateTimeISO();
        int int69 = mutableDateTime65.compareTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = mutableDateTime71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime76 = dateTime72.withPeriodAdded(readablePeriod74, 0);
        int int77 = dateTime72.getSecondOfDay();
        mutableDateTime67.setDate((org.joda.time.ReadableInstant) dateTime72);
        mutableDateTime67.setMillisOfDay((int) 'a');
        boolean boolean81 = mutableDateTime49.isAfter((org.joda.time.ReadableInstant) mutableDateTime67);
        mutableDateTime67.setDayOfYear((int) (short) 10);
        int int84 = mutableDateTime67.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85, readableInstant86, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology88.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology88.yearOfCentury();
        org.joda.time.DurationField durationField92 = gJChronology88.days();
        org.joda.time.DurationField durationField93 = gJChronology88.months();
        org.joda.time.DurationField durationField94 = gJChronology88.weekyears();
        org.joda.time.MutableDateTime mutableDateTime95 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime67, (org.joda.time.Chronology) gJChronology88);
        org.joda.time.MutableDateTime.Property property96 = mutableDateTime67.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property97 = mutableDateTime67.millisOfSecond();
        int int98 = property44.compareTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and mutableDateTime47", (dateTime42.compareTo(mutableDateTime47) == 0) == dateTime42.equals(mutableDateTime47));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0939");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        int int6 = dateTimeZone4.getOffsetFromLocal((long) 657);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        long long23 = dateTimeZone19.convertLocalToUTC((long) 1, false);
        long long25 = dateTimeZone19.previousTransition((long) 5);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 1L, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime10, dateTimeZone19);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) mutableDateTime10);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone4.getShortName((long) 26245, locale30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(6560453767L, dateTimeZone4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime27", (mutableDateTime8.compareTo(mutableDateTime27) == 0) == mutableDateTime8.equals(mutableDateTime27));
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0940");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, (long) 26155, 9);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField14 = gJChronology3.centuries();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime();
        int int23 = localDateTime18.getEra();
        int int24 = localDateTime18.getMillisOfSecond();
        java.util.Locale locale28 = new java.util.Locale("26367820", "0001-01-01T00:00:08.000Z");
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        java.lang.String str38 = dateTimeField36.toString();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        boolean boolean41 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        boolean boolean45 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = dateTimeZone53.getShortName((long) 2022, locale55);
        java.lang.String str57 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, 295, locale55);
        java.util.Locale.setDefault(category29, locale55);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Locale.setDefault(category29, locale59);
        java.util.Locale locale62 = java.util.Locale.getDefault(category29);
        java.lang.String str63 = locale28.getDisplayCountry(locale62);
        java.lang.String str64 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 100, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and dateTime22", (mutableDateTime15.compareTo(dateTime22) == 0) == mutableDateTime15.equals(dateTime22));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0941");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.yearOfEra();
        org.joda.time.DurationField durationField15 = gJChronology12.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology12.getZone();
        long long19 = dateTimeZone17.nextTransition((long) 611);
        int int21 = dateTimeZone17.getOffsetFromLocal(166151L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        java.lang.String str35 = dateTimeZone34.getID();
        long long38 = dateTimeZone34.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology42.getZone();
        java.lang.String str47 = dateTimeZone46.getID();
        long long50 = dateTimeZone46.convertLocalToUTC((long) 1, false);
        long long52 = dateTimeZone46.previousTransition((long) 5);
        long long54 = dateTimeZone34.getMillisKeepLocal(dateTimeZone46, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) mutableDateTime55);
        long long58 = dateTimeZone17.getMillisKeepLocal(dateTimeZone26, 0L);
        org.joda.time.Chronology chronology59 = gJChronology3.withZone(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime55", (dateTime7.compareTo(mutableDateTime55) == 0) == dateTime7.equals(mutableDateTime55));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime3.add(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime3.property(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = mutableDateTime48.toDateTimeISO();
        boolean boolean50 = mutableDateTime46.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        java.lang.String str52 = mutableDateTime48.toString("15");
        mutableDateTime48.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime48.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundHalfCeiling();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableDateTime56.add(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.yearOfEra();
        org.joda.time.DurationField durationField65 = gJChronology62.halfdays();
        org.joda.time.DurationField durationField66 = gJChronology62.centuries();
        org.joda.time.DurationField durationField67 = gJChronology62.hours();
        mutableDateTime56.setChronology((org.joda.time.Chronology) gJChronology62);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime3.toMutableDateTime((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology62.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and mutableDateTime69", (mutableDateTime3.compareTo(mutableDateTime69) == 0) == mutableDateTime3.equals(mutableDateTime69));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0943");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.Instant instant13 = instant10.withDurationAdded((long) '4', 15);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.era();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.era();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long28 = dateTimeZone26.nextTransition((long) '#');
        org.joda.time.Chronology chronology29 = gJChronology17.withZone(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = instant10.toMutableDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = instant10.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime30", (instant10.compareTo(mutableDateTime30) == 0) == instant10.equals(mutableDateTime30));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0944");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes(26353);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        java.lang.String str37 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.weekyear();
        org.joda.time.DurationField durationField51 = gJChronology46.weekyears();
        org.joda.time.DurationField durationField52 = gJChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.centuryOfEra();
        org.joda.time.Instant instant54 = gJChronology46.getGregorianCutover();
        int int55 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTime dateTime56 = dateTime28.toDateTime(dateTimeZone42);
        java.util.Locale locale59 = new java.util.Locale("2022-02-22T12:17:20.068", "461");
        java.util.Calendar calendar60 = dateTime28.toCalendar(locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime56", (dateTime28.compareTo(dateTime56) == 0) == dateTime28.equals(dateTime56));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0945");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology6.getZone();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        int int18 = dateTime17.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime27.getFieldType((int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime17.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        org.joda.time.DateTime.Property property45 = dateTime44.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime44.withPeriodAdded(readablePeriod46, 0);
        int int49 = dateTime44.getSecondOfDay();
        org.joda.time.DateTime.Property property50 = dateTime44.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight52 = dateTime44.toDateMidnight();
        org.joda.time.DateTime dateTime54 = dateTime44.withMillisOfSecond(70);
        int int55 = property32.getDifference((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.yearOfEra();
        org.joda.time.DurationField durationField65 = gJChronology62.halfdays();
        org.joda.time.DurationField durationField66 = gJChronology62.centuries();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.dayOfMonth();
        boolean boolean68 = dateTimeFieldType58.isSupported((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType58.getDurationType();
        boolean boolean70 = instant57.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime72 = dateTime54.withField(dateTimeFieldType58, 26174);
        mutableDateTime1.set(dateTimeFieldType58, 11);
        mutableDateTime1.addMonths(2922790);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        mutableDateTime78.add(readablePeriod79, 26289);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime14", (dateTime13.compareTo(mutableDateTime14) == 0) == dateTime13.equals(mutableDateTime14));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0946");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = localDateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusSeconds(0);
        int int24 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.plusHours(15);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusSeconds(26214);
        long long35 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime33, 6453L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime12 and localDateTime13", (localDateTime12.compareTo(localDateTime13) == 0) == localDateTime12.equals(localDateTime13));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0947");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        int int6 = dateTime4.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType8.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField18 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime7.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        int int22 = mutableDateTime7.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime21", (dateTime4.compareTo(mutableDateTime21) == 0) == dateTime4.equals(mutableDateTime21));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0948");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(9);
        int int34 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds(26147);
        int int46 = localDateTime43.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalDateTime localDateTime49 = property47.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType64.getField((org.joda.time.Chronology) gJChronology68);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = dateTimeZone75.getShortName((long) 2022, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = dateTimeField73.getAsText((int) '4', locale77);
        java.lang.String str81 = locale77.getISO3Language();
        java.lang.String str82 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale77);
        java.lang.String str83 = locale77.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime62 and localDateTime63", (localDateTime62.compareTo(localDateTime63) == 0) == localDateTime62.equals(localDateTime63));
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime1.isAfter(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        boolean boolean10 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology11 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        org.joda.time.Chronology chronology29 = gJChronology16.withZone(dateTimeZone28);
        mutableDateTime6.setZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone28);
        java.lang.String str35 = dateTimeZone28.getShortName((long) 26575);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime6", (mutableDateTime1.compareTo(mutableDateTime6) == 0) == mutableDateTime1.equals(mutableDateTime6));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0950");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean9 = mutableDateTime3.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.year();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.monthOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.monthOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withPeriodAdded(readablePeriod34, 9);
        int int37 = property22.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        org.joda.time.DateTime dateTime48 = dateTime33.toDateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology41);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.year();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.addWrapField(26323);
        org.joda.time.MutableDateTime mutableDateTime53 = property50.roundHalfFloor();
        boolean boolean54 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0951");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        mutableDateTime4.addMonths(2922790);
        mutableDateTime4.setTime((long) 26152);
        mutableDateTime4.setSecondOfDay(26199);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime24.minusWeeks(26152);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        long long37 = gJChronology31.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long41 = gJChronology31.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField42 = gJChronology31.days();
        org.joda.time.DateTime dateTime43 = dateTime24.toDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology31.yearOfCentury();
        int int45 = gJChronology31.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology31.secondOfMinute();
        org.joda.time.DurationField durationField47 = gJChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology31.secondOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology31.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology31.dayOfYear();
        mutableDateTime4.setChronology((org.joda.time.Chronology) gJChronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime12.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = gJChronology19.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology19.minutes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 2030, (org.joda.time.Chronology) gJChronology19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMonths(497);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.yearOfEra();
        org.joda.time.DurationField durationField33 = gJChronology30.halfdays();
        org.joda.time.DurationField durationField34 = gJChronology30.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology30.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 611);
        org.joda.time.DateTime dateTime38 = localDateTime26.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime12.withZoneRetainFields(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime44.toDateTimeISO();
        boolean boolean46 = mutableDateTime42.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        java.lang.String str48 = mutableDateTime44.toString("15");
        mutableDateTime44.setSecondOfMinute(15);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = mutableDateTime52.toDateTimeISO();
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        boolean boolean55 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.yearOfEra();
        org.joda.time.DurationField durationField62 = gJChronology59.halfdays();
        org.joda.time.DurationField durationField63 = gJChronology59.centuries();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology59.secondOfMinute();
        org.joda.time.DurationField durationField66 = gJChronology59.hours();
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology59.getZone();
        mutableDateTime44.setZoneRetainFields(dateTimeZone67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField75 = gJChronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology74.getZone();
        boolean boolean79 = dateTimeZone78.isFixed();
        java.lang.String str81 = dateTimeZone78.getNameKey(0L);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(5662872000026258L, dateTimeZone78);
        boolean boolean83 = mutableDateTime44.equals((java.lang.Object) mutableDateTime82);
        org.joda.time.DateTimeZone dateTimeZone84 = mutableDateTime44.getZone();
        long long86 = dateTimeZone35.getMillisKeepLocal(dateTimeZone84, 1645514401622L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime40", (dateTime5.compareTo(mutableDateTime40) == 0) == dateTime5.equals(mutableDateTime40));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0953");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology4.getZone();
        org.joda.time.DurationField durationField7 = gJChronology4.weekyears();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-292269054L), (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField18 = gJChronology12.minutes();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.weekyear();
        java.util.Locale locale23 = new java.util.Locale("centuries");
        java.lang.String str24 = dateTimeField20.getAsText(2, locale23);
        java.util.Calendar calendar25 = dateTime8.toCalendar(locale23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        mutableDateTime26.addWeeks(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType29.getField((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours(5);
        org.joda.time.Chronology chronology45 = gJChronology33.withZone(dateTimeZone44);
        mutableDateTime26.setZoneRetainFields(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        java.lang.String str51 = gJChronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.monthOfYear();
        org.joda.time.Instant instant54 = gJChronology50.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        long long58 = gJChronology50.add(readablePeriod55, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology59 = gJChronology50.withUTC();
        org.joda.time.DurationField durationField60 = gJChronology50.months();
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime26.toMutableDateTime((org.joda.time.Chronology) gJChronology50);
        boolean boolean62 = dateTime8.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        java.lang.String str63 = dateTime8.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime26 and mutableDateTime61", (mutableDateTime26.compareTo(mutableDateTime61) == 0) == mutableDateTime26.equals(mutableDateTime61));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0954");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DurationField durationField29 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField30 = gJChronology22.years();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.weekyear();
        org.joda.time.DurationField durationField32 = gJChronology22.weekyears();
        org.joda.time.Chronology chronology33 = gJChronology22.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField30 and durationField32", (durationField30.compareTo(durationField32) == 0) == durationField30.equals(durationField32));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 26149);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = dateTimeZone4.getName((long) (byte) 10, locale9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(0);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 26148);
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.minus((long) 179);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime27", (dateTime22.compareTo(dateTime27) == 0) == dateTime22.equals(dateTime27));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        mutableDateTime5.addYears(26165);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.set(26147);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.getID();
        boolean boolean15 = dateTimeZone13.isFixed();
        long long17 = dateTimeZone13.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime19", (mutableDateTime11.compareTo(dateTime19) == 0) == mutableDateTime11.equals(dateTime19));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        long long16 = gJChronology3.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology17 = gJChronology3.withUTC();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = localDateTime28.get(dateTimeFieldType29);
        boolean boolean31 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusSeconds(0);
        int int36 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusHours(26282);
        int int40 = localDateTime39.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusDays(833);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.weekyear();
        org.joda.time.DurationField durationField51 = gJChronology46.weekyears();
        org.joda.time.DurationField durationField52 = gJChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology46.centuryOfEra();
        org.joda.time.Instant instant54 = gJChronology46.getGregorianCutover();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusHours(0);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.minus(readableDuration58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYear(26332);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property68 = localDateTime62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(dateTimeZone69);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.era();
        boolean boolean75 = mutableDateTime70.isEqual((org.joda.time.ReadableInstant) mutableDateTime73);
        int int76 = property68.getDifference((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = mutableDateTime79.toDateTimeISO();
        org.joda.time.DateTime.Property property81 = dateTime80.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.DateTime dateTime84 = dateTime80.withPeriodAdded(readablePeriod82, 0);
        int int85 = dateTime80.getSecondOfDay();
        org.joda.time.DateTime.Property property86 = dateTime80.minuteOfHour();
        java.util.Locale locale87 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale87);
        java.lang.String str89 = property86.getAsText(locale87);
        java.lang.String str90 = locale87.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime91 = property68.setCopy("26", locale87);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.withYearOfEra(26165);
        int int94 = localDateTime91.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime95 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime91);
        int[] intArray97 = gJChronology46.get((org.joda.time.ReadablePartial) localDateTime91, 1740090021146L);
        gJChronology3.validate((org.joda.time.ReadablePartial) localDateTime39, intArray97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime18 and localDateTime25", (localDateTime18.compareTo(localDateTime25) == 0) == localDateTime18.equals(localDateTime25));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfWeek();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology3.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        org.joda.time.DurationField durationField9 = gJChronology3.eras();
        org.joda.time.DurationField durationField10 = gJChronology3.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField10, and durationField9", !(durationField9.compareTo(durationField10) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField10.compareTo(durationField9))));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0960");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology8.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime16", (mutableDateTime1.compareTo(dateTime16) == 0) == mutableDateTime1.equals(dateTime16));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime7, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekyear();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("18");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        boolean boolean21 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        java.lang.String str30 = dateTimeZone29.getID();
        mutableDateTime19.setZoneRetainFields(dateTimeZone29);
        int int32 = mutableDateTime19.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime19.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType34.getField((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime19.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime47 = dateTime15.withField(dateTimeFieldType34, 26453);
        boolean boolean48 = mutableDateTime12.isSupported(dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime12.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime17", (dateTime5.compareTo(mutableDateTime17) == 0) == dateTime5.equals(mutableDateTime17));
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0962");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        mutableDateTime3.setZone(dateTimeZone6);
        int int10 = mutableDateTime3.getHourOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfMinute();
        java.lang.String str12 = property11.getName();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfFloor();
        mutableDateTime13.addSeconds(26273);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.yearOfEra();
        org.joda.time.DurationField durationField24 = gJChronology21.halfdays();
        org.joda.time.DurationField durationField25 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.secondOfMinute();
        org.joda.time.DurationField durationField28 = gJChronology21.hours();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology21.getZone();
        org.joda.time.DurationField durationField30 = gJChronology21.years();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj17, (org.joda.time.Chronology) gJChronology21);
        mutableDateTime16.setTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeField dateTimeField33 = mutableDateTime16.getRoundingField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime31", (mutableDateTime1.compareTo(dateTime31) == 0) == mutableDateTime1.equals(dateTime31));
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime9.plusMonths(61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime21", (dateTime9.compareTo(dateTime21) == 0) == dateTime9.equals(dateTime21));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0964");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514299056L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(0);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.withPeriodAdded(readablePeriod13, 26148);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        int int18 = mutableDateTime17.getYearOfCentury();
        boolean boolean19 = dateTime15.isEqual((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addWeeks(326);
        boolean boolean22 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withPeriodAdded(readablePeriod27, 0);
        int int30 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime.Property property31 = dateTime25.minuteOfHour();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        int int33 = property31.getMaximumTextLength(locale32);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        int int36 = mutableDateTime35.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.weekyear();
        int int38 = property31.getDifference((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTime dateTime39 = property31.roundFloorCopy();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime24", (dateTime8.compareTo(mutableDateTime24) == 0) == dateTime8.equals(mutableDateTime24));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0965");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        int int8 = localDateTime5.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTimeISO();
        int int14 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime12.setMillisOfDay((int) 'a');
        mutableDateTime12.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime12.add(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = dateTime32.getYearOfEra();
        boolean boolean34 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateTime32);
        java.util.GregorianCalendar gregorianCalendar35 = mutableDateTime12.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.era();
        boolean boolean43 = mutableDateTime38.isEqual((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addMonths(26176);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTimeISO();
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfDay();
        org.joda.time.DateTime dateTime50 = property49.roundHalfCeilingCopy();
        java.lang.String str51 = property49.getAsText();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime53.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime54.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime58 = dateTime54.withPeriodAdded(readablePeriod56, 0);
        int int59 = dateTime54.getSecondOfDay();
        org.joda.time.DateTime.Property property60 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime54.minusSeconds(10);
        long long63 = property49.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime54);
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.yearOfEra();
        org.joda.time.DurationField durationField72 = gJChronology69.halfdays();
        boolean boolean73 = dateTimeFieldType65.isSupported((org.joda.time.Chronology) gJChronology69);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType65.getDurationType();
        boolean boolean75 = mutableDateTime41.isSupported(dateTimeFieldType65);
        int int76 = localDateTime36.get(dateTimeFieldType65);
        java.lang.String str77 = dateTimeFieldType65.toString();
        boolean boolean78 = localDateTime5.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79, readableInstant80, (int) (short) 1);
        java.lang.String str83 = gJChronology82.toString();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology82.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology82.monthOfYear();
        org.joda.time.Instant instant86 = gJChronology82.getGregorianCutover();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology82);
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology82);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology82.hourOfDay();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType65.getField((org.joda.time.Chronology) gJChronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime87", (mutableDateTime10.compareTo(dateTime87) == 0) == mutableDateTime10.equals(dateTime87));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0966");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 26149);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = dateTimeZone4.getName((long) (byte) 10, locale9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(0);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 26148);
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime27", (dateTime22.compareTo(dateTime27) == 0) == dateTime22.equals(dateTime27));
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0967");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 5, 0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant0.minus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.Instant instant8 = instant5.withMillis(166151L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime6", (instant0.compareTo(dateTime6) == 0) == instant0.equals(dateTime6));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0968");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.Instant instant10 = instant7.minus((-1L));
        org.joda.time.Instant instant12 = instant7.plus(1645514158018L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant7.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant7.minus(readableDuration14);
        org.joda.time.MutableDateTime mutableDateTime16 = instant7.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0969");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = dateTime7.plusHours((-19085278));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.monthOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withPeriodAdded(readablePeriod22, 9);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfWeek(4);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        int int29 = dateTime28.getCenturyOfEra();
        org.joda.time.DateTime dateTime31 = dateTime28.minusMonths(245);
        boolean boolean32 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime19", (mutableDateTime1.compareTo(dateTime19) == 0) == mutableDateTime1.equals(dateTime19));
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0970");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology28 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        boolean boolean41 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withDayOfWeek(5);
        int int44 = localDateTime38.getYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime47 = dateTime34.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTime.Property property48 = dateTime34.yearOfCentury();
        java.lang.String str49 = property48.getName();
        org.joda.time.DateTime dateTime51 = property48.addToCopy(26197998);
        int int52 = property48.get();
        org.joda.time.DateTime dateTime53 = property48.roundCeilingCopy();
        org.joda.time.DateTime dateTime54 = dateTime53.withLaterOffsetAtOverlap();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and dateTime34", (mutableDateTime19.compareTo(dateTime34) == 0) == mutableDateTime19.equals(dateTime34));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0971");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.yearOfEra();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 26150);
        long long15 = property11.remainder();
        long long16 = property11.remainder();
        int int17 = property11.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime20 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime26);
        int int29 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withMillisOfSecond(218);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology36.getZone();
        java.lang.String str40 = dateTimeZone38.getName((long) 26155);
        org.joda.time.Chronology chronology41 = gJChronology32.withZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology32.getZone();
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime26 and localDateTime28", (localDateTime26.compareTo(localDateTime28) == 0) == localDateTime26.equals(localDateTime28));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0972");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        mutableDateTime4.addMonths(2922790);
        mutableDateTime4.setTime((long) 26152);
        mutableDateTime4.setSecondOfDay(26199);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 948);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(3600001L);
        mutableDateTime27.setDate(220924800100L);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfEra();
        org.joda.time.DurationField durationField40 = gJChronology37.halfdays();
        org.joda.time.DurationField durationField41 = gJChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.dayOfMonth();
        boolean boolean43 = dateTimeFieldType33.isSupported((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType33.getDurationType();
        boolean boolean45 = instant32.isSupported(dateTimeFieldType33);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) instant32);
        boolean boolean47 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant48 = instant32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.centuryOfEra();
        org.joda.time.DurationField durationField58 = gJChronology52.weeks();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        java.lang.String str67 = dateTimeZone66.getID();
        long long70 = dateTimeZone66.convertLocalToUTC((long) 1, false);
        org.joda.time.Chronology chronology71 = gJChronology52.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField72 = gJChronology52.clockhourOfHalfday();
        org.joda.time.DateTime dateTime73 = instant32.toDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DurationField durationField74 = gJChronology52.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime73", (instant32.compareTo(dateTime73) == 0) == instant32.equals(dateTime73));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.hourOfHalfday();
        org.joda.time.Chronology chronology34 = gJChronology22.withUTC();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfSecond();
        org.joda.time.DateTime.Property property37 = dateTime35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime10 and dateTime35", (mutableDateTime10.compareTo(dateTime35) == 0) == mutableDateTime10.equals(dateTime35));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0974");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        java.lang.String str11 = dateTime8.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DurationField durationField18 = gJChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.weekyearOfCentury();
        long long24 = gJChronology15.add(120L, (long) 70, 26149);
        org.joda.time.DateTime dateTime25 = dateTime8.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology29.millisOfDay();
        org.joda.time.DurationField durationField39 = gJChronology29.centuries();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime8, (org.joda.time.Chronology) gJChronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime17", (mutableDateTime1.compareTo(dateTime17) == 0) == mutableDateTime1.equals(dateTime17));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0975");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.yearOfCentury();
        org.joda.time.DurationField durationField19 = gJChronology15.days();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.parse("2022-02-21T07:18:08.944");
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTime dateTime31 = dateTime29.withMillisOfDay(0);
        org.joda.time.DateTime dateTime33 = dateTime31.withYear((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime33.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        long long47 = dateTimeZone44.convertLocalToUTC(32L, false);
        boolean boolean48 = property36.equals((java.lang.Object) false);
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.getDisplayVariant();
        int int51 = property36.getMaximumTextLength(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType52.getField((org.joda.time.Chronology) gJChronology56);
        int int63 = dateTimeField61.getMaximumValue(0L);
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = locale64.getDisplayScript();
        java.lang.String str67 = locale64.toLanguageTag();
        int int68 = dateTimeField61.getMaximumTextLength(locale64);
        java.lang.String str69 = locale64.getDisplayName();
        java.lang.String str70 = locale49.getDisplayCountry(locale64);
        java.util.Set<java.lang.String> strSet71 = locale49.getUnicodeLocaleKeys();
        java.lang.String str72 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale49);
        org.joda.time.LocalDateTime.Property property73 = localDateTime23.minuteOfHour();
        int int74 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = mutableDateTime76.toDateTimeISO();
        org.joda.time.DateTime.Property property78 = dateTime77.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime77.toMutableDateTime();
        mutableDateTime79.setHourOfDay(2);
        mutableDateTime79.setYear(26148);
        java.util.Date date84 = mutableDateTime79.toDate();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime87 = mutableDateTime86.toDateTimeISO();
        int int88 = dateTime87.getMillisOfSecond();
        org.joda.time.DateTime dateTime90 = dateTime87.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int92 = dateTime87.get(dateTimeFieldType91);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType91.getDurationType();
        java.lang.String str94 = durationFieldType93.toString();
        mutableDateTime79.add(durationFieldType93, 26529);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime11.withFieldAdded(durationFieldType93, 759);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and mutableDateTime76", (dateTime29.compareTo(mutableDateTime76) == 0) == dateTime29.equals(mutableDateTime76));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0976");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfEra();
        org.joda.time.DurationField durationField16 = gJChronology13.halfdays();
        org.joda.time.DurationField durationField17 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.secondOfMinute();
        org.joda.time.DurationField durationField20 = gJChronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.dayOfYear();
        long long26 = gJChronology13.add((long) 26148, (long) 26185, 23);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime9.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DurationField durationField28 = gJChronology13.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime27", (dateTime8.compareTo(mutableDateTime27) == 0) == dateTime8.equals(mutableDateTime27));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0977");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.era();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundFloor();
        int int18 = mutableDateTime17.getRoundingMode();
        org.joda.time.DateTime dateTime19 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfMonth();
        boolean boolean30 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology24);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime17.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationField durationField32 = gJChronology24.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and mutableDateTime31", (mutableDateTime15.compareTo(mutableDateTime31) == 0) == mutableDateTime15.equals(mutableDateTime31));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0978");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(26155);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.getID();
        boolean boolean15 = dateTimeZone13.isFixed();
        long long17 = dateTimeZone13.convertUTCToLocal((long) (byte) 0);
        int int19 = dateTimeZone13.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withField(dateTimeFieldType22, (int) (short) 0);
        boolean boolean25 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.year();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.era();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime8 and localDateTime20", (localDateTime8.compareTo(localDateTime20) == 0) == localDateTime8.equals(localDateTime20));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0979");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.years();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        int int14 = localDateTime12.get(dateTimeFieldType13);
        boolean boolean15 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withDayOfWeek(5);
        int int18 = localDateTime12.getYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMillisOfDay(26147);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withPeriodAdded(readablePeriod26, 13);
        long long30 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime28, (long) 1898);
        org.joda.time.DurationField durationField31 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField5, and durationField6", !(durationField31.compareTo(durationField5) == 0) || (Math.signum(durationField31.compareTo(durationField6)) == Math.signum(durationField5.compareTo(durationField6))));
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0980");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField11 = gJChronology3.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        long long23 = dateTimeZone19.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        java.lang.String str32 = dateTimeZone31.getID();
        long long35 = dateTimeZone31.convertLocalToUTC((long) 1, false);
        long long37 = dateTimeZone31.previousTransition((long) 5);
        long long39 = dateTimeZone19.getMillisKeepLocal(dateTimeZone31, (long) (byte) -1);
        org.joda.time.Chronology chronology40 = gJChronology3.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant41);
        org.joda.time.DateTimeField dateTimeField43 = gJChronology42.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology42.getZone();
        org.joda.time.DurationField durationField45 = gJChronology42.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField45, durationField6, and durationField7", !(durationField45.compareTo(durationField6) == 0) || (Math.signum(durationField45.compareTo(durationField7)) == Math.signum(durationField6.compareTo(durationField7))));
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0981");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 26297);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTime dateTime17 = dateTime15.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime15.getZone();
        org.joda.time.DateTime dateTime20 = dateTime15.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property21 = dateTime15.centuryOfEra();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime23 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = property21.setCopy("20");
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime15", (mutableDateTime5.compareTo(dateTime15) == 0) == mutableDateTime5.equals(dateTime15));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DurationField durationField10 = gJChronology9.seconds();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField11", Math.signum(durationField10.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField10)));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0983");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DurationField durationField9 = gJChronology3.hours();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.era();
        org.joda.time.DurationField durationField11 = gJChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField6, and durationField8", !(durationField11.compareTo(durationField6) == 0) || (Math.signum(durationField11.compareTo(durationField8)) == Math.signum(durationField6.compareTo(durationField8))));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = locale27.getDisplayCountry();
        int int31 = property3.getMaximumShortTextLength(locale27);
        boolean boolean32 = property3.isLeap();
        org.joda.time.DateTime dateTime33 = property3.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        java.lang.String str38 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.monthOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property45 = dateTime44.year();
        org.joda.time.DateTime.Property property46 = dateTime44.weekyear();
        org.joda.time.DateTime dateTime47 = property46.roundCeilingCopy();
        org.joda.time.tz.NameProvider nameProvider48 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale49);
        java.lang.String str53 = nameProvider48.getName(locale49, "secondOfMinute", "Etc/UTC");
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology58.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType54.getField((org.joda.time.Chronology) gJChronology58);
        int int65 = dateTimeField63.getMaximumValue(0L);
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale66);
        java.lang.String str68 = locale66.getDisplayScript();
        java.lang.String str69 = locale66.toLanguageTag();
        int int70 = dateTimeField63.getMaximumTextLength(locale66);
        java.lang.String str73 = nameProvider48.getShortName(locale66, "AD", "26158015");
        int int74 = property46.getMaximumTextLength(locale66);
        int int75 = property3.getMaximumShortTextLength(locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime42", (mutableDateTime1.compareTo(dateTime42) == 0) == mutableDateTime1.equals(dateTime42));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0985");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime3.setZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime3.getRoundingField();
        mutableDateTime3.addSeconds(0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.year();
        int int24 = property23.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime3", (mutableDateTime1.compareTo(mutableDateTime3) == 0) == mutableDateTime1.equals(mutableDateTime3));
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0986");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        boolean boolean6 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfWeek();
        mutableDateTime4.setMillisOfDay(635);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        java.lang.String str15 = gJChronology14.toString();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withDayOfWeek(5);
        int int26 = localDateTime20.getYear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime16.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks(26151);
        boolean boolean43 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minusYears(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.withCenturyOfEra(26185);
        org.joda.time.DateTime dateTime50 = localDateTime49.toDateTime();
        boolean boolean51 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime16", (mutableDateTime1.compareTo(dateTime16) == 0) == mutableDateTime1.equals(dateTime16));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0987");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        int int15 = mutableDateTime8.get(dateTimeField14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        java.lang.String str20 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.era();
        boolean boolean37 = mutableDateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime35);
        int int38 = property30.getDifference((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime42.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.withPeriodAdded(readablePeriod44, 0);
        int int47 = dateTime42.getSecondOfDay();
        org.joda.time.DateTime.Property property48 = dateTime42.minuteOfHour();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale49);
        java.lang.String str51 = property48.getAsText(locale49);
        java.lang.String str52 = locale49.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime53 = property30.setCopy("26", locale49);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.year();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusDays(26158);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusMinutes(26195);
        long long60 = gJChronology19.set((org.joda.time.ReadablePartial) localDateTime58, 3907552601159L);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology19.secondOfMinute();
        org.joda.time.DateTime dateTime62 = mutableDateTime8.toDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 690, (org.joda.time.Chronology) gJChronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime32", (mutableDateTime8.compareTo(mutableDateTime32) == 0) == mutableDateTime8.equals(mutableDateTime32));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0988");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays((int) (short) -1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        java.util.Date date23 = localDateTime20.toDate();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withPeriodAdded(readablePeriod24, (int) (byte) -1);
        java.lang.Object obj27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withField(dateTimeFieldType30, 523);
        java.lang.String str33 = dateTimeFieldType30.getName();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime13.withField(dateTimeFieldType30, 26204);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = localDateTime39.get(dateTimeFieldType40);
        boolean boolean42 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.halfdayOfDay();
        org.joda.time.DurationField durationField54 = gJChronology51.seconds();
        boolean boolean55 = localDateTime47.equals((java.lang.Object) durationField54);
        int int56 = localDateTime47.getYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime47.minusDays(26252);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime15 and localDateTime47", (localDateTime15.compareTo(localDateTime47) == 0) == localDateTime15.equals(localDateTime47));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime12.getZone();
        org.joda.time.DateTime dateTime17 = dateTime12.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property18 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime19.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = gJChronology26.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology26.minutes();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 2030, (org.joda.time.Chronology) gJChronology26);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths(497);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfEra();
        org.joda.time.DurationField durationField40 = gJChronology37.halfdays();
        org.joda.time.DurationField durationField41 = gJChronology37.centuries();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology37.getZone();
        long long44 = dateTimeZone42.nextTransition((long) 611);
        org.joda.time.DateTime dateTime45 = localDateTime33.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime19.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.era();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundHalfCeiling();
        java.util.Locale locale54 = new java.util.Locale("26", "halfdays");
        java.lang.String str55 = property50.getAsText(locale54);
        java.util.Set<java.lang.Character> charSet56 = locale54.getExtensionKeys();
        java.lang.String str57 = dateTimeZone42.getName(52311L, locale54);
        mutableDateTime6.setZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime12", (mutableDateTime1.compareTo(dateTime12) == 0) == mutableDateTime1.equals(dateTime12));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime17 = dateTime6.withYearOfEra(70);
        org.joda.time.DateTime dateTime19 = dateTime6.withYearOfEra(26194);
        boolean boolean20 = dateTime19.isEqualNow();
        int int21 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology25.getZone();
        org.joda.time.DurationField durationField28 = gJChronology25.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.dayOfWeek();
        long long33 = gJChronology25.add((-166150900L), (long) 26160, 4);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology25.year();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology25.millisOfSecond();
        org.joda.time.DateTime dateTime36 = dateTime19.toDateTime((org.joda.time.Chronology) gJChronology25);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology25.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime36", (dateTime19.compareTo(dateTime36) == 0) == dateTime19.equals(dateTime36));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0991");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        long long16 = gJChronology3.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology17 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear(26163);
        java.lang.String str28 = dateTime25.toString();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded(readableDuration29, 26270);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        long long36 = dateTimeZone32.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getShortName(874L);
        org.joda.time.DateTime dateTime40 = dateTime25.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology41 = gJChronology3.withZone(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime37", (dateTime25.compareTo(dateTime37) == 0) == dateTime25.equals(dateTime37));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.getID();
        boolean boolean8 = dateTimeZone6.isFixed();
        mutableDateTime3.setZone(dateTimeZone6);
        int int10 = mutableDateTime3.getHourOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime3.monthOfYear();
        long long13 = property12.remainder();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime22.getZone();
        org.joda.time.DateTime dateTime27 = dateTime22.withSecondOfMinute((int) '#');
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = dateTime27.isBefore(readableInstant28);
        boolean boolean30 = dateTime27.isAfterNow();
        org.joda.time.DateTime dateTime32 = dateTime27.minusSeconds(26159);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.era();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfCeiling();
        java.util.Locale locale40 = new java.util.Locale("26", "halfdays");
        java.lang.String str41 = property36.getAsText(locale40);
        org.joda.time.MutableDateTime mutableDateTime43 = property36.addWrapField(26173);
        org.joda.time.MutableDateTime mutableDateTime45 = property36.addWrapField((int) (short) 1);
        int int46 = mutableDateTime45.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        java.lang.String str51 = gJChronology50.toString();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillisOfDay(0);
        org.joda.time.DateTime dateTime56 = dateTime54.withYear((int) '#');
        org.joda.time.DateTime dateTime58 = dateTime56.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime63 = property61.add(1L);
        boolean boolean64 = dateTime58.isBefore((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.DateTime dateTime66 = dateTime58.minus(readablePeriod65);
        org.joda.time.DateTime.Property property67 = dateTime66.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str70 = dateTimeZone69.getID();
        boolean boolean71 = dateTimeZone69.isFixed();
        long long73 = dateTimeZone69.convertUTCToLocal((long) (byte) 0);
        int int75 = dateTimeZone69.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone69);
        int int77 = localDateTime76.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withField(dateTimeFieldType78, (int) (short) 0);
        org.joda.time.DateTime.Property property81 = dateTime66.property(dateTimeFieldType78);
        int int82 = mutableDateTime45.get(dateTimeFieldType78);
        org.joda.time.DateTime.Property property83 = dateTime33.property(dateTimeFieldType78);
        mutableDateTime16.set(dateTimeFieldType78, 26623);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime22", (mutableDateTime1.compareTo(dateTime22) == 0) == mutableDateTime1.equals(dateTime22));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0993");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTime dateTime7 = dateTime2.withYearOfEra(436);
        org.joda.time.DateTime dateTime9 = dateTime2.withYear(26163);
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTimeISO();
        org.joda.time.LocalDate localDate11 = dateTime10.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.era();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.era();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime10.toMutableDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology15.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and mutableDateTime23", (mutableDateTime1.compareTo(mutableDateTime23) == 0) == mutableDateTime1.equals(mutableDateTime23));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0994");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded(4518963757L, 688);
        org.joda.time.DateTime dateTime22 = instant18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        long long41 = dateTimeZone39.nextTransition((long) 'x');
        org.joda.time.Chronology chronology42 = gJChronology26.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField43 = gJChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology26.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTime.Property property46 = dateTime22.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime45", (mutableDateTime1.compareTo(dateTime45) == 0) == mutableDateTime1.equals(dateTime45));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0995");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long7 = dateTimeZone5.nextTransition((long) 26149);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = dateTimeZone5.getName((long) (byte) 10, locale10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1908343047937L, dateTimeZone5);
        boolean boolean15 = localDateTime13.equals((java.lang.Object) "2093-09-24T07:17:26.242Z");
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusSeconds(217);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusYears(47);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.setSecondOfDay(59);
        mutableDateTime23.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withPeriodAdded(readablePeriod40, 0);
        int int43 = dateTime38.getSecondOfDay();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime46 = dateTime38.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMillis(100);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        mutableDateTime65.addWeeks(4);
        org.joda.time.DateTime dateTime68 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTime dateTime70 = dateTime68.withCenturyOfEra(8);
        mutableDateTime23.setTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime73 = property72.roundHalfCeiling();
        boolean boolean74 = localDateTime13.equals((java.lang.Object) mutableDateTime73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75, readableInstant76, (int) (short) 1);
        java.lang.String str79 = gJChronology78.toString();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology78);
        org.joda.time.DateTime dateTime82 = dateTime80.withMillisOfDay(0);
        org.joda.time.DateTime dateTime84 = dateTime82.withYear((int) '#');
        org.joda.time.DateTime dateTime86 = dateTime84.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean88 = dateTime86.isSupported(dateTimeFieldType87);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.chrono.GJChronology gJChronology92 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone89, readableInstant90, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField93 = gJChronology92.millisOfDay();
        org.joda.time.DateTimeField dateTimeField94 = gJChronology92.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField95 = gJChronology92.minuteOfHour();
        org.joda.time.DurationField durationField96 = gJChronology92.years();
        int int97 = gJChronology92.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField98 = dateTimeFieldType87.getField((org.joda.time.Chronology) gJChronology92);
        int int99 = localDateTime13.get(dateTimeFieldType87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and dateTime80", (mutableDateTime21.compareTo(dateTime80) == 0) == mutableDateTime21.equals(dateTime80));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0996");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.plusMinutes(26179);
        org.joda.time.DateTime dateTime18 = dateTime11.minusMillis(26201);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(26245);
        org.joda.time.DateTime dateTime23 = dateTime18.plusMinutes(0);
        int int24 = dateTime23.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant19", (dateTime23.compareTo(instant19) == 0) == dateTime23.equals(instant19));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        long long14 = dateTime13.getMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.Chronology chronology19 = dateTimeFormatter18.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter18.getPrinter();
        int int21 = dateTimeFormatter18.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withDefaultYear(292278993);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter18.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter18.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.era();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = gJChronology29.add(readablePeriod35, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter18.withChronology((org.joda.time.Chronology) gJChronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter42.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime47.toDateTimeISO();
        int int49 = mutableDateTime45.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime51.toDateTimeISO();
        org.joda.time.DateTime.Property property53 = dateTime52.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime52.withPeriodAdded(readablePeriod54, 0);
        int int57 = dateTime52.getSecondOfDay();
        mutableDateTime47.setDate((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime60 = dateTime52.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime52.minusMinutes(26192);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology66.getZone();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.yearOfEra();
        org.joda.time.DurationField durationField69 = gJChronology66.halfdays();
        org.joda.time.DurationField durationField70 = gJChronology66.centuries();
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology66.getZone();
        long long73 = dateTimeZone71.nextTransition((long) 611);
        org.joda.time.DateTime dateTime74 = dateTime62.withZoneRetainFields(dateTimeZone71);
        java.lang.String str76 = dateTimeZone71.getNameKey((-72436L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter43.withZone(dateTimeZone71);
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime13.toMutableDateTime(dateTimeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime45", (dateTime8.compareTo(mutableDateTime45) == 0) == dateTime8.equals(mutableDateTime45));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0998");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType11, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = gJChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime10.withChronology((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(26370);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 51);
        java.lang.String str31 = dateTimeZone29.getName(4537020646L);
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime24.withYearOfEra(26613);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime32", (dateTime10.compareTo(dateTime32) == 0) == dateTime10.equals(dateTime32));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.era();
        boolean boolean21 = mutableDateTime16.isEqual((org.joda.time.ReadableInstant) mutableDateTime19);
        int int22 = property14.getDifference((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime.Property property32 = dateTime26.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale33);
        java.lang.String str35 = property32.getAsText(locale33);
        java.lang.String str36 = locale33.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime37 = property14.setCopy("26", locale33);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusDays(26158);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.minusMinutes(26195);
        long long44 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime42, 3907552601159L);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology3.getZone();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField48 = gJChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime47", (mutableDateTime16.compareTo(mutableDateTime47) == 0) == mutableDateTime16.equals(mutableDateTime47));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test1000");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DurationField durationField6 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField7 = gJChronology4.eras();
        int int8 = gJChronology4.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField7", Math.signum(durationField6.compareTo(durationField7)) == -Math.signum(durationField7.compareTo(durationField6)));
    }
}


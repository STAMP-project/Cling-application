import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(26152);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        long long23 = gJChronology17.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long27 = gJChronology17.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField28 = gJChronology17.days();
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime10.withSecondOfMinute(26258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26258 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 763106140800035L + "'", long23 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36026149L + "'", long27 == 36026149L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.monthOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology16.add(readablePeriod21, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology25 = gJChronology16.withUTC();
        long long29 = gJChronology16.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.Chronology chronology30 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) gJChronology3, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GJChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(gJChronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str17, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514151595L + "'", long24 == 1645514151595L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 763105276800055L + "'", long29 == 763105276800055L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withField(dateTimeFieldType10, (int) (short) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        int int15 = localDateTime12.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withYearOfCentury(26315);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26315 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DurationField durationField8 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField10 = gJChronology3.seconds();
        org.joda.time.DurationField durationField11 = gJChronology3.years();
        long long13 = durationField11.getMillis(26155);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 825372079560000L + "'", long13 == 825372079560000L);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = property7.add(1645427958305L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645427958305");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(readableInstant2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean5 = localDateTime1.isSupported(dateTimeFieldType4);
        java.lang.String str6 = dateTimeFieldType4.getName();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "monthOfYear" + "'", str6, "monthOfYear");
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = dateTimeFormatter13.parseMutableDateTime("Greenwich Zeit");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeZone14);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = property3.setCopy("1439");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.weekyear();
        int int8 = localDateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField15 = gJChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = gJChronology12.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.secondOfDay();
        org.joda.time.DurationField durationField21 = gJChronology12.millis();
        org.joda.time.DurationField durationField22 = gJChronology12.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) localDateTime4, (org.joda.time.Chronology) gJChronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26341281 + "'", int8 == 26341281);
        org.junit.Assert.assertNotNull(gJChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str13, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        long long47 = gJChronology41.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 26185, (org.joda.time.Chronology) gJChronology52);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withWeekyear(1970);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology65);
        org.joda.time.DateTime dateTime69 = dateTime67.withMillisOfDay(0);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear((int) '#');
        org.joda.time.DateTime dateTime73 = dateTime69.withWeekyear(26149);
        org.joda.time.DateTime dateTime75 = dateTime69.plusMonths(1970);
        org.joda.time.DateTime dateTime78 = dateTime69.withDurationAdded(26395200000L, (-627528));
        java.lang.String str79 = dateTime69.toString();
        org.joda.time.DateTime dateTime82 = dateTime69.withDurationAdded((long) 497, 26179);
        org.joda.time.DateTime dateTime83 = localDateTime59.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        long long85 = gJChronology41.set((org.joda.time.ReadablePartial) localDateTime59, (long) 18000100);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime59.plusHours(44274548);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26376 + "'", int22 == 26376);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 763106140800035L + "'", long47 == 763106140800035L);
        org.junit.Assert.assertNotNull(gJChronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str53, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(gJChronology65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str66, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str79, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 26185L + "'", long85 == 26185L);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        mutableDateTime21.setTime((-61535981553845L));
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26376 + "'", int13 == 26376);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26376 + "'", int31 == 26376);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = dateTimeField7.getAsShortText((-52L), locale9);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-CN" + "'", str10, "zh-CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusWeeks(968);
        int int14 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withYearOfEra(192);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(88);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        java.lang.String str24 = timeZone22.getID();
        timeZone22.setRawOffset((int) (short) 10);
        java.time.ZoneId zoneId27 = timeZone22.toZoneId();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone(zoneId27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone(zoneId27);
        java.time.ZoneId zoneId30 = timeZone29.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime20.toDateTime(dateTimeZone31);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "fr_CA");
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 948);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(3600001L);
        mutableDateTime14.setDate(220924800100L);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.minuteOfDay();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        java.lang.String str29 = dateTimeZone28.getID();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        int int37 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime.Property property38 = dateTime32.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        java.lang.String str44 = gJChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.era();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology43.minuteOfDay();
        org.joda.time.DurationField durationField48 = gJChronology43.seconds();
        boolean boolean49 = dateTimeZone28.equals((java.lang.Object) gJChronology43);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology43.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale52);
        java.lang.String str56 = nameProvider51.getName(locale52, "secondOfMinute", "Etc/UTC");
        java.lang.String str57 = locale52.getDisplayLanguage();
        int int58 = dateTimeField50.getMaximumShortTextLength(locale52);
        java.lang.String str59 = locale20.getDisplayName(locale52);
        java.lang.String str60 = locale20.getVariant();
        java.lang.String str61 = locale20.getDisplayName();
        int int62 = property18.getMaximumTextLength(locale20);
        java.lang.Object obj63 = locale20.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 26376 + "'", int37 == 26376);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(gJChronology43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str44, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(nameProvider51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Deutsch" + "'", str57, "Deutsch");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "");
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMinutes(20);
        long long25 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime23, (long) (short) 100);
        org.joda.time.DurationField durationField26 = gJChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology30.years();
        org.joda.time.DurationField durationField36 = gJChronology30.centuries();
        int int37 = durationField26.compareTo(durationField36);
        boolean boolean38 = durationField26.isSupported();
        long long41 = durationField26.subtract((long) 26176970, 1970);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1199900L) + "'", long25 == (-1199900L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(gJChronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str31, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-170181823030L) + "'", long41 == (-170181823030L));
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        long long9 = dateTimeZone7.nextTransition((long) 'x');
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        long long20 = dateTimeZone18.nextTransition((long) 'x');
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        java.time.ZoneId zoneId22 = timeZone21.toZoneId();
        boolean boolean23 = timeZone21.observesDaylightTime();
        boolean boolean24 = timeZone10.hasSameRules(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        long long31 = dateTimeZone29.nextTransition((long) 26149);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.lang.String str36 = dateTimeZone29.getName((long) (byte) 10, locale34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone29);
        java.util.TimeZone timeZone38 = dateTimeZone29.toTimeZone();
        int int39 = timeZone38.getRawOffset();
        boolean boolean40 = timeZone21.hasSameRules(timeZone38);
        int int41 = timeZone38.getRawOffset();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.era();
        boolean boolean57 = mutableDateTime52.isEqual((org.joda.time.ReadableInstant) mutableDateTime55);
        int int58 = property50.getDifference((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime61.toDateTimeISO();
        org.joda.time.DateTime.Property property63 = dateTime62.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.withPeriodAdded(readablePeriod64, 0);
        int int67 = dateTime62.getSecondOfDay();
        org.joda.time.DateTime.Property property68 = dateTime62.minuteOfHour();
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = property68.getAsText(locale69);
        java.lang.String str72 = locale69.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime73 = property50.setCopy("26", locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75, readableInstant76, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology78.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology78.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology78.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone82 = gJChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType74.getField((org.joda.time.Chronology) gJChronology78);
        int int85 = dateTimeField83.getMaximumValue(0L);
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale86);
        java.lang.String str88 = locale86.getDisplayScript();
        java.lang.String str89 = locale86.toLanguageTag();
        int int90 = dateTimeField83.getMaximumTextLength(locale86);
        java.lang.String str91 = locale86.getDisplayCountry();
        java.lang.String str92 = locale69.getDisplayVariant(locale86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = timeZone38.getDisplayName(false, 26214, locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26214");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 120L + "'", long9 == 120L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 120L + "'", long20 == 120L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 26149L + "'", long31 == 26149L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 26377 + "'", int67 == 26377);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "19" + "'", str71, "19");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Deutschland" + "'", str72, "Deutschland");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(gJChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 292278993 + "'", int85 == 292278993);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "de-DE" + "'", str89, "de-DE");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Deutschland" + "'", str91, "Deutschland");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfDay();
        java.lang.String str29 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.clockhourOfHalfday();
        long long40 = dateTimeField37.addWrapField((long) (short) 1, (int) (short) 1);
        int int42 = dateTimeField37.get(20000L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology47);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusSeconds(26147);
        int int54 = localDateTime51.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.era();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundFloor();
        int int61 = mutableDateTime60.getRoundingMode();
        org.joda.time.DateTime dateTime62 = localDateTime56.toDateTime((org.joda.time.ReadableInstant) mutableDateTime60);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder64.clearExtensions();
        java.util.Locale locale66 = builder65.build();
        java.lang.String str67 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, 5, locale66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69, (int) (short) 1);
        java.lang.String str72 = gJChronology71.toString();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology71.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology71.monthOfYear();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology71.yearOfEra();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology71.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale79 = java.util.Locale.PRC;
        java.lang.String str80 = dateTimeZone77.getShortName((long) 2022, locale79);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone77);
        int[] intArray83 = gJChronology71.get((org.joda.time.ReadablePartial) localDateTime81, 7L);
        int int84 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56, intArray83);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime87 = mutableDateTime86.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime87.getZone();
        org.joda.time.DateTime dateTime90 = dateTime87.withEra(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int92 = dateTime87.get(dateTimeFieldType91);
        boolean boolean93 = localDateTime56.isSupported(dateTimeFieldType91);
        int int94 = mutableDateTime21.get(dateTimeFieldType91);
        mutableDateTime21.addWeeks(44238347);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26377 + "'", int13 == 26377);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3600001L + "'", long40 == 3600001L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(gJChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "5" + "'", str67, "5");
        org.junit.Assert.assertNotNull(gJChronology71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str72, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1970, 1, 1, 7]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 999 + "'", int84 == 999);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant15.minus(readableDuration17);
        org.joda.time.Instant instant21 = instant18.withDurationAdded(4518963757L, 688);
        org.joda.time.DateTime dateTime22 = instant18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology26.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        long long41 = dateTimeZone39.nextTransition((long) 'x');
        org.joda.time.Chronology chronology42 = gJChronology26.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField43 = gJChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology26.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = dateTime22.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26377 + "'", int13 == 26377);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(gJChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 120L + "'", long41 == 120L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean19 = dateTimeZone16.isStandardOffset(2L);
        mutableDateTime3.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime24.setMillisOfDay((int) 'a');
        mutableDateTime24.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime24.add(readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        int int45 = dateTime44.getYearOfEra();
        boolean boolean46 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime44);
        java.util.GregorianCalendar gregorianCalendar47 = mutableDateTime24.toGregorianCalendar();
        long long48 = mutableDateTime24.getMillis();
        java.lang.String str49 = mutableDateTime24.toString();
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.monthOfYear();
        org.joda.time.DurationField durationField58 = gJChronology54.minutes();
        mutableDateTime24.setChronology((org.joda.time.Chronology) gJChronology54);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime24.add(readableDuration60, 44361921);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26377 + "'", int34 == 26377);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62162726399903L) + "'", long48 == (-62162726399903L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0000-02-22T00:00:00.097Z" + "'", str49, "0000-02-22T00:00:00.097Z");
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(gJChronology54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str55, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        mutableDateTime3.setZoneRetainFields(dateTimeZone13);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.yearOfCentury();
        mutableDateTime3.setYear(11);
        boolean boolean21 = mutableDateTime3.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        boolean boolean6 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime1.setSecondOfDay(26294);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology3.getDateTimeMillis((long) 491, 26274, 167, 26165, 699);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26274 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        long long11 = dateTimeField8.add((long) 26358, 0);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 26358L + "'", long11 == 26358L);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.secondOfDay();
        org.joda.time.DurationField durationField15 = gJChronology4.years();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = gJChronology4.get(readablePeriod16, 100000L, (long) 26205);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 763106140800035L + "'", long10 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setUnicodeLocaleKeyword("DurationField[hours]", "yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DurationField[hours] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology10);
        org.joda.time.DurationField durationField15 = gJChronology10.minutes();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.secondOfMinute();
        org.joda.time.DurationField durationField17 = gJChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(26155, 26175, 44274162, 26301, 26341, 26348, (org.joda.time.Chronology) gJChronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26301 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField11 = gJChronology3.years();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((int) '#');
        int int15 = localDateTime14.getMonthOfYear();
        int int16 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusYears(68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale16);
        java.lang.String str20 = nameProvider15.getName(locale16, "secondOfMinute", "Etc/UTC");
        java.lang.String str21 = locale16.getDisplayCountry();
        java.lang.String str22 = property13.getAsText(locale16);
        java.lang.String str23 = property13.getAsText();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutschland" + "'", str21, "Deutschland");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        int int7 = property6.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale13);
        java.lang.String str17 = nameProvider12.getName(locale13, "secondOfMinute", "Etc/UTC");
        java.lang.String str18 = locale13.getDisplayLanguage();
        int int19 = property11.getMaximumShortTextLength(locale13);
        org.joda.time.DateTime dateTime21 = property11.addToCopy((long) 26148);
        org.joda.time.DateTime dateTime22 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra(26163);
        org.joda.time.DateTime.Property property25 = dateTime22.monthOfYear();
        int int26 = dateTime22.getYear();
        org.joda.time.Chronology chronology27 = dateTime22.getChronology();
        org.joda.time.DateTime.Property property28 = dateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.millisOfDay();
        org.joda.time.DurationField durationField37 = gJChronology32.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) property28, (org.joda.time.Chronology) gJChronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Deutsch" + "'", str18, "Deutsch");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfHalfday();
        long long12 = gJChronology3.add((long) 26275, (long) 26367, 26347);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 694717624L + "'", long12 == 694717624L);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = gJChronology3.getDateTimeMillis((long) 833, 745, 26354, 26334, 874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 745 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(0);
        org.joda.time.DateTime dateTime14 = dateTime12.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 26148);
        org.joda.time.DateTime.Property property18 = dateTime14.era();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str20 = durationFieldType19.getName();
        org.joda.time.DateTime dateTime22 = dateTime14.withFieldAdded(durationFieldType19, 26181);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.yearOfCentury();
        org.joda.time.DurationField durationField30 = gJChronology26.minutes();
        org.joda.time.DurationField durationField31 = gJChronology26.millis();
        org.joda.time.DurationField durationField32 = gJChronology26.millis();
        boolean boolean33 = durationFieldType19.isSupported((org.joda.time.Chronology) gJChronology26);
        java.lang.String str34 = durationFieldType19.getName();
        boolean boolean35 = languageRange1.equals((java.lang.Object) durationFieldType19);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(gJChronology8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str9, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "seconds" + "'", str34, "seconds");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Chronology chronology8 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        mutableDateTime10.setMillisOfSecond(983);
        int int13 = mutableDateTime10.getSecondOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26377 + "'", int13 == 26377);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(10);
        int int17 = localDateTime14.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withCenturyOfEra(523);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.minuteOfHour();
        int int23 = localDateTime19.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 295 + "'", int17 == 295);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37 + "'", int23 == 37);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.lang.String str36 = dateTimeZone33.getShortName((long) 2022, locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = dateTimeZone30.getShortName(0L, locale35);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.DurationField durationField40 = gJChronology39.centuries();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = gJChronology39.get(readablePeriod41, 1645514307546L, 824614714800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26377 + "'", int16 == 26377);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        boolean boolean3 = strSet2.isEmpty();
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.util.Locale locale7 = new java.util.Locale("26", "halfdays");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        boolean boolean10 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        int int17 = dateTimeField16.getMaximumValue();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = dateTimeField16.getAsShortText(20192L, locale19);
        boolean boolean22 = strSet2.equals((java.lang.Object) str21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertEquals(locale7.toString(), "26_HALFDAYS");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "20" + "'", str21, "20");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = gJChronology3.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.secondOfDay();
        org.joda.time.DurationField durationField12 = gJChronology3.millis();
        org.joda.time.DurationField durationField13 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.era();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology3.getZone();
        org.joda.time.DurationField durationField16 = gJChronology3.years();
        long long19 = durationField16.getMillis(699, (long) 28);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 22058352000000L + "'", long19 == 22058352000000L);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusYears((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = localDateTime8.getField(26312);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26312");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.era();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology31.seconds();
        boolean boolean37 = dateTimeZone16.equals((java.lang.Object) gJChronology31);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale41);
        java.lang.String str45 = nameProvider40.getName(locale41, "secondOfMinute", "Etc/UTC");
        java.lang.String str46 = locale41.getDisplayLanguage();
        java.lang.String str47 = dateTimeField38.getAsText(4528800000L, locale41);
        boolean boolean48 = locale41.hasExtensions();
        boolean boolean49 = gJChronology3.equals((java.lang.Object) locale41);
        org.joda.time.DurationField durationField50 = gJChronology3.years();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology3.year();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26377 + "'", int25 == 26377);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(gJChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str32, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Deutsch" + "'", str46, "Deutsch");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        boolean boolean7 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        java.lang.String str9 = mutableDateTime5.toString("15");
        mutableDateTime5.setMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.minuteOfHour();
        int int13 = property12.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDayOfWeek(5);
        int int30 = localDateTime24.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime20.withFields((org.joda.time.ReadablePartial) localDateTime32);
        int int34 = dateTime20.getEra();
        int int35 = property12.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime37 = dateTime20.minusMillis(999);
        int int38 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology43);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology43.year();
        org.joda.time.DurationField durationField50 = gJChronology43.centuries();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime0.toMutableDateTime((org.joda.time.Chronology) gJChronology43);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "15" + "'", str9, "15");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(gJChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str19, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 348479 + "'", int35 == 348479);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear(70);
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear(26158);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withPeriodAdded(readablePeriod27, 0);
        int int30 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime.Property property31 = dateTime25.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter13.withChronology((org.joda.time.Chronology) gJChronology32);
        java.lang.Appendable appendable34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = localDateTime38.get(dateTimeFieldType39);
        boolean boolean41 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis(10);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        int int55 = localDateTime52.getCenturyOfEra();
        int int56 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(appendable34, (org.joda.time.ReadablePartial) localDateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 26378 + "'", int30 == 26378);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withPeriodAdded(readablePeriod14, 0);
        int int17 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime.Property property18 = dateTime12.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology23.seconds();
        boolean boolean29 = dateTimeZone8.equals((java.lang.Object) gJChronology23);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale32);
        java.lang.String str36 = nameProvider31.getName(locale32, "secondOfMinute", "Etc/UTC");
        java.lang.String str37 = locale32.getDisplayLanguage();
        int int38 = dateTimeField30.getMaximumShortTextLength(locale32);
        java.lang.String str39 = locale32.getScript();
        java.lang.String str40 = locale32.getVariant();
        java.lang.String str43 = nameProvider0.getShortName(locale32, "Heure de Greenwich", "halfdays");
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str49 = nameProvider0.getShortName(locale44, "yearOfCentury", "Englisch");
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType50.getField((org.joda.time.Chronology) gJChronology54);
        int int61 = dateTimeField59.getMaximumValue(0L);
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale62.getDisplayScript();
        java.lang.String str65 = locale62.toLanguageTag();
        int int66 = dateTimeField59.getMaximumTextLength(locale62);
        java.lang.String str67 = locale62.getDisplayCountry();
        java.lang.String str68 = locale62.getISO3Country();
        java.lang.String str71 = nameProvider0.getShortName(locale62, "2022-02-21T12:17:26.272", "2022-02-21T12:17:46.892");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale73);
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str78 = nameProvider0.getName(locale73, "2093-09-24T07:18:58.773Z", "DurationField[weeks]");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26378 + "'", int17 == 26378);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(gJChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str24, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u6cd5\u6587" + "'", str46, "\u6cd5\u6587");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "de-DE" + "'", str65, "de-DE");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Deutschland" + "'", str67, "Deutschland");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DEU" + "'", str68, "DEU");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        int int3 = timeZone0.getOffset((long) 22);
        timeZone0.setID("");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int7 = dateTime2.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.era();
        boolean boolean27 = mutableDateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime25);
        int int28 = property20.getDifference((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.withPeriodAdded(readablePeriod34, 0);
        int int37 = dateTime32.getSecondOfDay();
        org.joda.time.DateTime.Property property38 = dateTime32.minuteOfHour();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale39);
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = locale39.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime43 = property20.setCopy("26", locale39);
        java.lang.String str44 = locale39.getLanguage();
        java.lang.String str45 = property13.getAsText(locale39);
        java.util.Calendar calendar46 = dateTime2.toCalendar(locale39);
        int int47 = dateTime2.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology52.getZone();
        java.lang.String str57 = dateTimeZone56.getID();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 26275, dateTimeZone56);
        int int60 = dateTime59.getCenturyOfEra();
        boolean boolean61 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 231 + "'", int3 == 231);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26378 + "'", int7 == 26378);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 26378 + "'", int37 == 26378);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "19" + "'", str41, "19");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Deutschland" + "'", str42, "Deutschland");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "de" + "'", str44, "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "8" + "'", str45, "8");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645514378231,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=19,SECOND=38,MILLISECOND=231,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 25);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter3.print(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        long long16 = gJChronology3.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusDays((int) (short) -1);
        long long24 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime22, 826129497600000L);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology3.secondOfDay();
        int int28 = dateTimeField25.getDifference((long) 377, 1645514155259L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514151595L + "'", long11 == 1645514151595L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 763105276800055L + "'", long16 == 763105276800055L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645427978389L + "'", long24 == 1645427978389L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1645514154) + "'", int28 == (-1645514154));
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType6.getField((org.joda.time.Chronology) gJChronology10);
        boolean boolean16 = dateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.DateTime.Property property17 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime2);
        org.joda.time.DateTime.Property property19 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        int int21 = dateTime20.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 433 + "'", int3 == 433);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 433 + "'", int21 == 433);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.DurationField durationField12 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.weekyear();
        java.lang.String str14 = gJChronology3.toString();
        org.joda.time.DurationField durationField15 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.minuteOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514151595L + "'", long11 == 1645514151595L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str14, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology8.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        int int21 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime.Property property22 = dateTime16.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.era();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology27.seconds();
        boolean boolean33 = dateTimeZone12.equals((java.lang.Object) gJChronology27);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology27.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(26284, 107, 75, 0, 2013, (org.joda.time.Chronology) gJChronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2013 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26378 + "'", int21 == 26378);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(gJChronology27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str28, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.clockhourOfHalfday();
        long long9 = dateTimeField6.addWrapField((long) (short) 1, (int) (short) 1);
        int int11 = dateTimeField6.get(20000L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(26147);
        int int23 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.era();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        int int30 = mutableDateTime29.getRoundingMode();
        org.joda.time.DateTime dateTime31 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 5, locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minusMinutes(20);
        int[] intArray50 = localDateTime49.getValues();
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.lang.String str54 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, 26172, locale52);
        boolean boolean55 = locale52.hasExtensions();
        boolean boolean56 = locale52.hasExtensions();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600001L + "'", long9 == 3600001L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "5" + "'", str36, "5");
        org.junit.Assert.assertNotNull(gJChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1969, 12, 31, 85200100]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Englisch" + "'", str53, "Englisch");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "26172" + "'", str54, "26172");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.DateTime dateTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        int int16 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.withPeriodAdded(readablePeriod21, 0);
        int int24 = dateTime19.getSecondOfDay();
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime19);
        mutableDateTime14.setMillisOfDay((int) 'a');
        mutableDateTime14.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime14.add(readableDuration30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = dateTime34.getYearOfEra();
        boolean boolean36 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) dateTime34);
        java.util.GregorianCalendar gregorianCalendar37 = mutableDateTime14.toGregorianCalendar();
        long long38 = mutableDateTime14.getMillis();
        boolean boolean39 = dateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfDay();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime47 = property44.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology51.getZone();
        org.joda.time.DurationField durationField54 = gJChronology51.weekyears();
        boolean boolean55 = dateTime47.equals((java.lang.Object) gJChronology51);
        boolean boolean57 = dateTime47.isAfter(3065584560813L);
        org.joda.time.DateTime dateTime59 = dateTime47.withDayOfYear(13);
        boolean boolean61 = dateTime59.isEqual((long) 345);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = property40.getDifference((org.joda.time.ReadableInstant) dateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -63804784778");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26378 + "'", int24 == 26378);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-62162726399903L) + "'", long38 == (-62162726399903L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale37);
        java.lang.String str41 = nameProvider36.getName(locale37, "secondOfMinute", "Etc/UTC");
        java.lang.String str42 = locale37.getDisplayLanguage();
        int int43 = dateTimeField35.getMaximumShortTextLength(locale37);
        java.lang.String str44 = locale37.getScript();
        java.lang.String str45 = locale37.getVariant();
        int int46 = property5.getMaximumTextLength(locale37);
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.lang.String str52 = nameProvider47.getName(locale48, "secondOfMinute", "Etc/UTC");
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = property5.getAsText(locale48);
        org.joda.time.LocalDateTime localDateTime55 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = property56.addToCopy(22);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks(1046607);
        int int61 = localDateTime58.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26378 + "'", int22 == 26378);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Deutsch" + "'", str42, "Deutsch");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(nameProvider47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Deutsch" + "'", str53, "Deutsch");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7" + "'", str54, "7");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime6.withDayOfWeek(144);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 144 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        int int6 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.minusSeconds(88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime0.getField(653);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 653");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = locale27.getDisplayCountry();
        int int31 = property3.getMaximumShortTextLength(locale27);
        boolean boolean32 = property3.isLeap();
        org.joda.time.DateTime dateTime33 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.yearOfEra();
        java.util.Date date37 = mutableDateTime35.toDate();
        boolean boolean38 = dateTime33.isEqual((org.joda.time.ReadableInstant) mutableDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime33.withTime(26368, 26278, 26192, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26368 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "26378801" + "'", str5, "26378801");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26378 + "'", int13 == 26378);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26378 + "'", int25 == 26378);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "19" + "'", str29, "19");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Deutschland" + "'", str30, "Deutschland");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:19:38 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology3.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 611);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute(26201);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26201 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 611L + "'", long10 == 611L);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = dateTimeFormatter13.parseLocalTime("2022-02-21T07:18:44.793");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        java.lang.String str9 = dateTimeField7.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone24.getShortName((long) 2022, locale26);
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 295, locale26);
        java.util.Locale.setDefault(category0, locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        boolean boolean58 = dateTimeZone37.equals((java.lang.Object) gJChronology52);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale62);
        java.lang.String str66 = nameProvider61.getName(locale62, "secondOfMinute", "Etc/UTC");
        java.lang.String str67 = locale62.getDisplayLanguage();
        java.lang.String str68 = dateTimeField59.getAsText(4528800000L, locale62);
        boolean boolean69 = locale62.hasExtensions();
        java.lang.String str70 = locale62.getScript();
        java.util.Locale.setDefault(category0, locale62);
        java.util.Locale locale74 = new java.util.Locale("2093-09-24T07:17:56.012Z", "2022-02-21T12:17:25.911");
        java.util.Locale.setDefault(category0, locale74);
        java.util.Locale.setDefault(locale74);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str9, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "295" + "'", str28, "295");
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 26378 + "'", int46 == 26378);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(gJChronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str53, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Deutsch" + "'", str67, "Deutsch");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals(locale74.toString(), "2093-09-24t07:17:56.012z_2022-02-21T12:17:25.911");
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Chronology chronology30 = gJChronology17.withZone(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter11.withZone(dateTimeZone29);
        boolean boolean36 = gJChronology3.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology3.secondOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4518960813L + "'", long34 == 4518960813L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DurationField durationField7 = gJChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = gJChronology4.withZone(dateTimeZone9);
        org.joda.time.Chronology chronology11 = gJChronology4.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.getLocalDateTime();
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusYears((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        int int32 = localDateTime30.get(dateTimeFieldType31);
        boolean boolean33 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withDurationAdded(readableDuration44, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.millisOfSecond();
        int[] intArray49 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime26, intArray49);
        long long54 = gJChronology4.add(829064246400000L, (long) 18000100, 26305);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 26322, (org.joda.time.Chronology) gJChronology4);
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u661f\u671f\u4e8c" + "'", str24, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2013, 10, 22, 25178925]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 829537739030500L + "'", long54 == 829537739030500L);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(26193);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology20);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, 523);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(26287317);
        int int32 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        java.lang.String str34 = localDateTime29.toString("26366868");
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26366868" + "'", str34, "26366868");
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int2 = mutableDateTime1.getEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        long long12 = gJChronology6.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology6.minuteOfDay();
        org.joda.time.DurationField durationField15 = gJChronology6.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology6.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField17, 18000100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 18000100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 763106140800035L + "'", long12 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale37);
        java.lang.String str41 = nameProvider36.getName(locale37, "secondOfMinute", "Etc/UTC");
        java.lang.String str42 = locale37.getDisplayLanguage();
        int int43 = dateTimeField35.getMaximumShortTextLength(locale37);
        java.lang.String str44 = locale37.getScript();
        java.lang.String str45 = locale37.getVariant();
        int int46 = property5.getMaximumTextLength(locale37);
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.lang.String str52 = nameProvider47.getName(locale48, "secondOfMinute", "Etc/UTC");
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = property5.getAsText(locale48);
        org.joda.time.LocalDateTime localDateTime55 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = property56.addToCopy(22);
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfYear(38090);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38090 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26379 + "'", int22 == 26379);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Deutsch" + "'", str42, "Deutsch");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(nameProvider47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Deutsch" + "'", str53, "Deutsch");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7" + "'", str54, "7");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.secondOfMinute();
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfWeek();
        org.joda.time.DurationField durationField9 = gJChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        boolean boolean29 = dateTimeZone26.isStandardOffset(2L);
        mutableDateTime13.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology31 = gJChronology3.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField32 = gJChronology3.halfdays();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTimeFormatter6.print(289300L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.withWeekyear(26153);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withPeriodAdded(readablePeriod24, 0);
        int int27 = dateTime22.getSecondOfDay();
        org.joda.time.DateTime.Property property28 = dateTime22.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime30 = dateTime2.withZoneRetainFields(dateTimeZone18);
        long long33 = dateTimeZone18.adjustOffset((-166150900L), false);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26379 + "'", int7 == 26379);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26379 + "'", int27 == 26379);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-166150900L) + "'", long33 == (-166150900L));
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        boolean boolean6 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        boolean boolean17 = localDateTime7.equals((java.lang.Object) property15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekyear(26149);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths(1970);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = gJChronology18.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology18.minutes();
        org.joda.time.DurationField durationField23 = durationFieldType14.getField((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime25 = dateTime13.withFieldAdded(durationFieldType14, (int) '4');
        int int26 = dateTime13.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime13.withYearOfCentury(521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 521 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2186 + "'", int26 == 2186);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant4 = new org.joda.time.Instant((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField8 = gJChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.secondOfMinute();
        org.joda.time.DurationField durationField12 = gJChronology4.days();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.minuteOfHour();
        org.joda.time.DurationField durationField20 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.secondOfMinute();
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology26.getZone();
        java.lang.String str30 = dateTimeZone28.getName((long) 26155);
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone28);
        long long33 = dateTimeZone28.previousTransition((long) 26167);
        org.joda.time.Chronology chronology34 = gJChronology16.withZone(dateTimeZone28);
        long long38 = dateTimeZone28.convertLocalToUTC(1380120L, false, (long) ' ');
        org.joda.time.Chronology chronology39 = gJChronology4.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 26167L + "'", long33 == 26167L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1380120L + "'", long38 == 1380120L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 100, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        int int7 = dateTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfWeek();
        org.joda.time.DurationField durationField9 = gJChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        boolean boolean29 = dateTimeZone26.isStandardOffset(2L);
        mutableDateTime13.setZone(dateTimeZone26);
        org.joda.time.Chronology chronology31 = gJChronology3.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology3.dayOfWeek();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale locale5 = builder1.build();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.lang.String str10 = dateTimeZone7.getShortName((long) 2022, locale9);
        java.lang.String str11 = locale9.getScript();
        java.util.Locale.setDefault(category6, locale9);
        java.util.Locale.Builder builder13 = builder1.setLocale(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.DateTime dateTime23 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfDay();
        java.lang.String str33 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.millisOfSecond();
        java.lang.String str35 = dateTimeField34.toString();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = dateTimeField34.getAsShortText((long) 26187, locale37);
        java.lang.String str41 = property24.getAsText(locale37);
        java.util.Locale.Builder builder42 = builder1.setLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder42.setScript("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str33, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str35, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u6cd5\u6587" + "'", str39, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "187" + "'", str40, "187");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "25200000" + "'", str41, "25200000");
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.secondOfMinute();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale8);
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = locale8.getLanguage();
        java.lang.String str13 = dateTimeField6.getAsText(53L, locale8);
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale15);
        java.lang.String str19 = nameProvider14.getName(locale15, "secondOfMinute", "Etc/UTC");
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType20.getField((org.joda.time.Chronology) gJChronology24);
        int int31 = dateTimeField29.getMaximumValue(0L);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale32.getDisplayScript();
        java.lang.String str35 = locale32.toLanguageTag();
        int int36 = dateTimeField29.getMaximumTextLength(locale32);
        java.lang.String str39 = nameProvider14.getShortName(locale32, "AD", "26158015");
        java.lang.String str40 = locale8.getDisplayName(locale32);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de-DE" + "'", str11, "de-DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de-DE" + "'", str35, "de-DE");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Deutsch (Deutschland)" + "'", str40, "Deutsch (Deutschland)");
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        long long8 = durationField6.getValueAsLong((long) (short) 1);
        long long11 = durationField6.getValueAsLong((long) 26323, 1645514301449L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime20);
        mutableDateTime15.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime15.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withPeriodAdded(readablePeriod40, 0);
        int int43 = dateTime38.getSecondOfDay();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateTime38);
        mutableDateTime33.setMillisOfDay((int) 'a');
        boolean boolean47 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime dateTime48 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        boolean boolean49 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        java.lang.String str50 = localDateTime9.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26379 + "'", int25 == 26379);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 26379 + "'", int43 == 26379);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T07:19:39.960" + "'", str50, "2022-02-21T07:19:39.960");
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        java.lang.String[] strArray14 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        int int17 = strSet15.size();
        strSet15.clear();
        strSet15.clear();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap25);
        java.util.Locale locale29 = new java.util.Locale("26", "halfdays");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = mutableDateTime32.toDateTimeISO();
        org.joda.time.DateTime.Property property34 = dateTime33.centuryOfEra();
        org.joda.time.DurationField durationField35 = property34.getLeapDurationField();
        org.joda.time.DateTime dateTime36 = property34.roundCeilingCopy();
        org.joda.time.DateTime dateTime38 = property34.setCopy(26168);
        boolean boolean39 = strSet30.contains((java.lang.Object) property34);
        java.lang.String str40 = java.util.Locale.lookupTag(languageRangeList26, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean41 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet30);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        long long51 = gJChronology45.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DurationField durationField52 = gJChronology45.weekyears();
        int int53 = gJChronology45.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField54 = gJChronology45.seconds();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str56 = dateTimeZone55.getID();
        boolean boolean57 = dateTimeZone55.isFixed();
        long long59 = dateTimeZone55.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime60.getZone();
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.DurationField durationField65 = gJChronology64.weeks();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        java.lang.String str70 = gJChronology69.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology69.secondOfDay();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology69.secondOfMinute();
        org.joda.time.DurationField durationField75 = gJChronology69.millis();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology69.halfdayOfDay();
        org.joda.time.chrono.GJChronology[] gJChronologyArray77 = new org.joda.time.chrono.GJChronology[] { gJChronology45, gJChronology64, gJChronology69 };
        org.joda.time.chrono.GJChronology[] gJChronologyArray78 = strSet30.toArray(gJChronologyArray77);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertEquals(locale29.toString(), "26_HALFDAYS");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 763106140800035L + "'", long51 == 763106140800035L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(gJChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(gJChronology69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str70, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(gJChronologyArray77);
        org.junit.Assert.assertNotNull(gJChronologyArray78);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusDays((int) (short) -1);
        boolean boolean13 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withPeriodAdded(readablePeriod21, 948);
        boolean boolean24 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withSecondOfMinute(26149);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26149 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology31 = gJChronology22.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        java.lang.String str37 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        boolean boolean41 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        boolean boolean45 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusSeconds(0);
        int int50 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withWeekyear(26241);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(382);
        long long57 = gJChronology22.set((org.joda.time.ReadablePartial) localDateTime53, 36026149L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26380 + "'", int16 == 26380);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(gJChronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str37, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 765923411980150L + "'", long57 == 765923411980150L);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(10);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        int[] intArray22 = localDateTime19.getValues();
        java.lang.String str23 = localDateTime19.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2013, 10, 22, 25180180]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2013-10-22T06:59:40.180" + "'", str23, "2013-10-22T06:59:40.180");
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfDay();
        int int19 = localDateTime16.size();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withDurationAdded(readableDuration20, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withYearOfEra(348480);
        int int25 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withMillisOfDay(26248);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDate(26233, (int) (short) 1, 26190);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26190 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DurationField durationField5 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.dayOfYear();
        java.lang.String str7 = gJChronology4.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        java.lang.String str12 = localDateTime10.toString("2022");
        int int13 = localDateTime10.size();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology8.getZone();
        java.lang.String str12 = dateTimeZone10.getName((long) 26155);
        org.joda.time.Chronology chronology13 = gJChronology4.withZone(dateTimeZone10);
        mutableDateTime3.setZone(dateTimeZone10);
        long long17 = dateTimeZone10.convertLocalToUTC(20000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20000L + "'", long17 == 20000L);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.addMonths((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.property(dateTimeFieldType20);
        org.joda.time.MutableDateTime mutableDateTime22 = property21.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = property21.set("millisOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millisOfDay\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        boolean boolean29 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusSeconds(0);
        int int34 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property35 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime.Property property36 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        int[] intArray41 = localDateTime37.getValues();
        gJChronology21.validate((org.joda.time.ReadablePartial) localDateTime26, intArray41);
        org.joda.time.DurationField durationField43 = gJChronology21.millis();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2022, 2, 22, 26380581]");
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant39 = mutableDateTime21.toInstant();
        org.joda.time.Instant instant41 = instant39.withMillis((long) 18000100);
        org.joda.time.Instant instant43 = instant39.minus((long) 26175);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant46 = instant43.withDurationAdded(1645514212073L, 26367287);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514212073 * 26367287");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26380 + "'", int13 == 26380);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26380 + "'", int31 == 26380);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.clockhourOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTime.Property property16 = dateTime5.year();
        org.joda.time.DateTime dateTime18 = dateTime5.plusYears(26185);
        org.joda.time.DateTime.Property property19 = dateTime5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) property19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gJChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str12, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        java.util.Locale locale2 = new java.util.Locale("0", "Property[yearOfCentury]");
        org.junit.Assert.assertEquals(locale2.toString(), "0_PROPERTY[YEAROFCENTURY]");
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, 523);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withDayOfMonth(837);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 837 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.addWeeks(4);
        org.joda.time.DateTime dateTime18 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minus(readableDuration19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusMinutes(20);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        int int35 = localDateTime33.getDayOfMonth();
        int int36 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = localDateTime33.getField(113);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 113");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.clockhourOfHalfday();
        int int8 = dateTimeField6.get((long) 26148);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        int[] intArray25 = new int[] {};
        int[] intArray27 = dateTimeField16.add((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 100, intArray25, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.plusWeeks(7);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDateTime localDateTime34 = property31.addWrapFieldToCopy(192);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        int int43 = dateTimeField42.getMaximumValue();
        long long45 = dateTimeField42.roundHalfFloor((long) 26173);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        boolean boolean61 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        int int64 = localDateTime62.get(dateTimeFieldType63);
        boolean boolean65 = localDateTime60.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.minusSeconds(0);
        int int70 = localDateTime62.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property71 = localDateTime62.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime62.plusHours(15);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale79 = java.util.Locale.PRC;
        java.lang.String str80 = dateTimeZone77.getShortName((long) 2022, locale79);
        java.lang.String str81 = dateTimeField58.getAsShortText((org.joda.time.ReadablePartial) localDateTime73, 21, locale79);
        java.lang.String str82 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime51, 244, locale79);
        boolean boolean83 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        int[] intArray87 = new int[] { 14025312, (-17259936) };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField6.set((org.joda.time.ReadablePartial) localDateTime34, 26315, intArray87, (-26165));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17259936 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 26000L + "'", long45 == 26000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(gJChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "21" + "'", str81, "21");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "244" + "'", str82, "244");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[14025312, -17259936]");
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.era();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime((org.joda.time.Chronology) gJChronology12);
        org.joda.time.DurationField durationField17 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology12);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfDay(26159);
        long long27 = gJChronology12.set((org.joda.time.ReadablePartial) localDateTime25, (long) 26150);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology12.secondOfMinute();
        long long31 = dateTimeField29.remainder((long) 2030);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = dateTimeField29.set((-604800000L), 739);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 739 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str13, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645488026159L + "'", long27 == 1645488026159L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 30L + "'", long31 == 30L);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = mutableDateTime4.toDateTimeISO();
        int int6 = mutableDateTime2.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.withPeriodAdded(readablePeriod11, 0);
        int int14 = dateTime9.getSecondOfDay();
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) dateTime9);
        mutableDateTime4.setMillisOfDay((int) 'a');
        mutableDateTime4.addMillis(4);
        java.lang.String str20 = mutableDateTime4.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime24.setMillisOfDay((int) 'a');
        mutableDateTime24.setWeekyear((int) (short) 0);
        boolean boolean40 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime4.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableDateTime4.add(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime4.property(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        long long55 = gJChronology49.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeField dateTimeField56 = gJChronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology49.secondOfMinute();
        boolean boolean58 = dateTimeFieldType44.isSupported((org.joda.time.Chronology) gJChronology49);
        org.joda.time.Instant instant59 = gJChronology49.getGregorianCutover();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (-17259936), (org.joda.time.Chronology) gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26380 + "'", int14 == 26380);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:00:00.101Z" + "'", str20, "2022-02-22T00:00:00.101Z");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26380 + "'", int34 == 26380);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 763106140800035L + "'", long55 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(instant59);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("HALFDAYS");
        java.util.Locale locale10 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setLanguageTag("2022-02-22T07:16:21.146");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.year();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.weekyear();
        org.joda.time.DurationField durationField14 = gJChronology4.hours();
        org.joda.time.DurationField durationField15 = gJChronology4.days();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.lang.String str2 = timeZone1.getID();
        timeZone1.setRawOffset((-627528));
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        java.lang.String str26 = dateTimeZone25.getID();
        long long29 = dateTimeZone25.convertLocalToUTC((long) 1, false);
        long long31 = dateTimeZone25.previousTransition((long) 5);
        long long33 = dateTimeZone13.getMillisKeepLocal(dateTimeZone25, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        java.util.TimeZone timeZone35 = dateTimeZone25.toTimeZone();
        boolean boolean36 = timeZone1.hasSameRules(timeZone35);
        boolean boolean37 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5L + "'", long31 == 5L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26215);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.addDays(26147);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        org.joda.time.DateTime.Property property35 = dateTime29.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.centuryOfEra();
        long long40 = gJChronology36.set((org.joda.time.ReadablePartial) localDateTime37, (long) (-1));
        org.joda.time.DurationField durationField41 = gJChronology36.weeks();
        org.joda.time.DurationFieldType durationFieldType42 = durationField41.getType();
        mutableDateTime3.add(durationFieldType42, 291);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26380 + "'", int13 == 26380);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26380 + "'", int34 == 26380);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514380925L + "'", long40 == 1645514380925L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationFieldType42);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(1L);
        boolean boolean17 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.minus(readablePeriod18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime22 = dateTime19.minusHours(26177);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime20);
        mutableDateTime15.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime15.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withPeriodAdded(readablePeriod40, 0);
        int int43 = dateTime38.getSecondOfDay();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateTime38);
        mutableDateTime33.setMillisOfDay((int) 'a');
        boolean boolean47 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime dateTime48 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        boolean boolean49 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology53.getZone();
        java.lang.String str58 = dateTimeZone57.getID();
        long long61 = dateTimeZone57.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63, (int) (short) 1);
        java.lang.String str66 = gJChronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.monthOfYear();
        org.joda.time.Instant instant69 = gJChronology65.getGregorianCutover();
        int int70 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant69);
        long long72 = dateTimeZone57.nextTransition((long) (-1));
        boolean boolean73 = localDateTime9.equals((java.lang.Object) long72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime9.minusMonths(60);
        org.joda.time.DateTime dateTime76 = localDateTime75.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime76.toMutableDateTime();
        int int78 = dateTime76.getDayOfMonth();
        boolean boolean79 = dateTime76.isBeforeNow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26380 + "'", int25 == 26380);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 26380 + "'", int43 == 26380);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(gJChronology65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str66, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 21 + "'", int78 == 21);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withZoneUTC();
        boolean boolean37 = dateTimeFormatter36.isPrinter();
        java.lang.StringBuffer stringBuffer38 = null;
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId41 = timeZone40.toZoneId();
        java.lang.String str42 = timeZone40.getID();
        timeZone40.setRawOffset((int) (short) 10);
        int int46 = timeZone40.getOffset(763105276800055L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(stringBuffer38, (org.joda.time.ReadablePartial) localDateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26381 + "'", int22 == 26381);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT" + "'", str42, "GMT");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone47);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology4.millisOfDay();
        org.joda.time.DurationField durationField16 = gJChronology4.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 763106140800035L + "'", long10 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology4.getDateTimeMillis((int) (short) 100, 50, 26155, 26221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long13 = gJChronology3.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.monthOfYear();
        org.joda.time.DurationField durationField15 = gJChronology3.hours();
        org.joda.time.DurationField durationField16 = gJChronology3.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = gJChronology3.getDateTimeMillis(764, 0, 138, 26316, 439, 238, 26236);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26316 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36026149L + "'", long13 == 36026149L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = gJChronology3.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.millisOfSecond();
        java.lang.String str12 = dateTimeField10.getAsShortText(18000012L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12" + "'", str12, "12");
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        java.lang.String[] strArray14 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        int int17 = strSet15.size();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean20 = dateTimeZone18.isFixed();
        long long22 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        long long24 = dateTimeZone18.convertUTCToLocal(20000L);
        int int26 = dateTimeZone18.getStandardOffset((long) 26151);
        boolean boolean27 = strSet15.contains((java.lang.Object) int26);
        int int28 = strSet15.size();
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 20000L + "'", long24 == 20000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) (-1), true, (long) (short) 10);
        org.joda.time.Chronology chronology15 = gJChronology3.withZone(dateTimeZone10);
        java.lang.String str17 = dateTimeZone10.getName((-15910473600000L));
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = gJChronology13.add(readablePeriod18, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology22 = gJChronology13.withUTC();
        long long26 = gJChronology13.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusDays((int) (short) -1);
        long long34 = gJChronology13.set((org.joda.time.ReadablePartial) localDateTime32, 826129497600000L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minus(readableDuration35);
        int[] intArray38 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime36, 1380120L);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.property(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minusSeconds(1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.centuryOfEra();
        int int44 = localDateTime42.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(gJChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str14, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514151595L + "'", long21 == 1645514151595L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 763105276800055L + "'", long26 == 763105276800055L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645427981272L + "'", long34 == 1645427981272L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 1380120]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        int int6 = dateTimeField5.getMaximumValue();
        int int7 = dateTimeField5.getMinimumValue();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = dateTimeField5.getAsShortText((long) 377, locale9);
        org.joda.time.DurationField durationField12 = dateTimeField5.getDurationField();
        org.joda.time.DurationField durationField13 = dateTimeField5.getRangeDurationField();
        long long15 = durationField13.getMillis(1645513218211L);
        long long17 = durationField13.getMillis(0L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 98730793092660000L + "'", long15 == 98730793092660000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.plusMillis(627);
        org.joda.time.LocalDateTime.Property property54 = localDateTime42.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = localDateTime58.get(dateTimeFieldType59);
        boolean boolean61 = localDateTime56.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.minusSeconds(0);
        int int66 = localDateTime58.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property67 = localDateTime58.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.plusHours(15);
        boolean boolean70 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withWeekOfWeekyear((-299));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -299 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22, 26381452]");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = dateTime10.isBefore(readableInstant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime10.toLocalDateTime();
        int int14 = dateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder8 = builder4.setLanguage("");
        java.util.Locale locale9 = builder8.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime20.toGregorianCalendar();
        org.joda.time.DateTime dateTime31 = dateTime20.withYearOfEra(26154);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readableDuration32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfSecond(26324511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26324511 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26381 + "'", int25 == 26381);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(292278993);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMinutes(20);
        long long25 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime23, (long) (short) 100);
        org.joda.time.DurationField durationField26 = gJChronology3.days();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        java.lang.String str31 = gJChronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.millisOfSecond();
        org.joda.time.DurationField durationField35 = gJChronology30.years();
        org.joda.time.DurationField durationField36 = gJChronology30.centuries();
        int int37 = durationField26.compareTo(durationField36);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = durationField36.subtract(1645427876422L, 1645427932921L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -164542793292100");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1199900L) + "'", long25 == (-1199900L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(gJChronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str31, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        int int4 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        java.lang.String str7 = mutableDateTime3.toString("15");
        mutableDateTime3.setSecondOfMinute(15);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        boolean boolean14 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.yearOfEra();
        org.joda.time.DurationField durationField21 = gJChronology18.halfdays();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology18.secondOfMinute();
        org.joda.time.DurationField durationField25 = gJChronology18.hours();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology18.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = property28.set("2022-02-21T07:17:58.912");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T07:17:58.912\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "15" + "'", str7, "15");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfWeek();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        java.lang.String str13 = locale11.getVariant();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray3 = strSet2.toArray();
        org.joda.time.tz.Provider provider4 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet6 = provider5.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider5.getZone("CHN");
        org.joda.time.DateTimeZone dateTimeZone10 = provider5.getZone("Deutsch (Deutschland)");
        org.joda.time.tz.Provider[] providerArray11 = new org.joda.time.tz.Provider[] { provider4, provider5 };
        org.joda.time.tz.Provider[] providerArray12 = strSet2.toArray(providerArray11);
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet2.spliterator();
        boolean boolean14 = strSet2.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = strSet2.add("8");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(provider4);
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(providerArray11);
        org.junit.Assert.assertNotNull(providerArray12);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DurationField durationField17 = gJChronology14.weeks();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology14.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withSecondOfMinute(1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMonthOfYear(4);
        long long27 = gJChronology14.set((org.joda.time.ReadablePartial) localDateTime20, (long) '#');
        int[] intArray29 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime20, 3600001L);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.minusMinutes(26237);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514381787L + "'", long27 == 1645514381787L);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 3600001]");
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime3.add(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime3.property(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        long long55 = gJChronology49.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean56 = durationFieldType45.isSupported((org.joda.time.Chronology) gJChronology49);
        org.joda.time.DurationField durationField57 = gJChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology49.weekOfWeekyear();
        org.joda.time.DurationField durationField59 = gJChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology49.era();
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology49.getZone();
        boolean boolean62 = dateTimeFieldType43.isSupported((org.joda.time.Chronology) gJChronology49);
        java.lang.String str63 = dateTimeFieldType43.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26381 + "'", int13 == 26381);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T00:00:00.101Z" + "'", str19, "2022-02-22T00:00:00.101Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26381 + "'", int33 == 26381);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 763106140800035L + "'", long55 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfCentury" + "'", str63, "yearOfCentury");
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.year();
        org.joda.time.DurationField durationField12 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.yearOfEra();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        int int10 = mutableDateTime3.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.year();
        boolean boolean12 = property11.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = property11.set("2022-02-21T07:19:39.220");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T07:19:39.220\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(180);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter13.withChronology((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology51);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusSeconds(26147);
        int int58 = localDateTime55.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withMillisOfDay(0);
        int int61 = localDateTime60.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology66.millisOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology66.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology66);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusSeconds(26147);
        int int73 = localDateTime70.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property74 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property75 = localDateTime70.dayOfYear();
        int int76 = localDateTime60.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime60.minusMinutes(26168);
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale80.getDisplayName();
        java.lang.String str82 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, 292278993, locale80);
        java.lang.String str83 = locale80.getScript();
        java.lang.String str84 = locale80.getCountry();
        java.lang.String str85 = dateTimeField8.getAsShortText(439, locale80);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26381 + "'", int32 == 26381);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str39, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(gJChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Italienisch (Italien)" + "'", str81, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "292278993" + "'", str82, "292278993");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "IT" + "'", str84, "IT");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "439" + "'", str85, "439");
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant0.withDurationAdded(readableDuration2, 2022);
        org.joda.time.Instant instant6 = instant0.minus((long) 51);
        org.joda.time.DateTime dateTime7 = instant0.toDateTime();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime34 = dateTime26.minusYears(2022);
        org.joda.time.DateTime dateTime35 = dateTime26.toDateTimeISO();
        long long36 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.withPeriodAdded(readablePeriod41, 0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology48.getZone();
        java.lang.String str53 = dateTimeZone52.getID();
        long long56 = dateTimeZone52.convertLocalToUTC((long) 1, false);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 53, dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime43, dateTimeZone52);
        org.joda.time.DateTime dateTime59 = dateTime26.toDateTime(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26382 + "'", int31 == 26382);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-8L) + "'", long36 == (-8L));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        int int3 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.weekyearOfCentury();
        mutableDateTime1.setRounding(dateTimeField11);
        mutableDateTime1.setSecondOfDay(86399);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 439 + "'", int3 == 439);
        org.junit.Assert.assertNotNull(gJChronology7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str8, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(48, 693, 518, 479, 26324271, 26249);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 479 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime.Property property5 = dateTime2.era();
        org.joda.time.DateTime dateTime6 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset((int) (short) 10);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.time.ZoneId zoneId9 = timeZone8.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.Object obj11 = timeZone8.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField18 = gJChronology3.eras();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 7]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.Interval interval5 = property2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.add((-86399998L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField16 = gJChronology11.minutes();
        long long19 = durationField16.getValueAsLong((long) 26297, 4519118799L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gJChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str12, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfEven();
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DurationField durationField20 = gJChronology18.hours();
        org.joda.time.DurationField durationField21 = gJChronology18.years();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.clockhourOfHalfday();
        java.lang.String[] strArray38 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        int int41 = strSet39.size();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime45.get(dateTimeFieldType46);
        boolean boolean48 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        boolean boolean49 = strSet39.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime.Property property50 = localDateTime43.hourOfDay();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = property50.getAsText(locale51);
        java.lang.String str53 = locale51.getCountry();
        java.lang.String str54 = dateTimeField22.getAsText((long) 26175, locale51);
        java.lang.String str55 = locale51.getDisplayScript();
        java.lang.String str56 = locale51.getCountry();
        java.lang.String str57 = dateTime10.toString("26222", locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType58.getField((org.joda.time.Chronology) gJChronology62);
        org.joda.time.DateTimeField dateTimeField68 = gJChronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology62.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology62.weekyear();
        org.joda.time.DateTime dateTime74 = dateTime10.toDateTime((org.joda.time.Chronology) gJChronology62);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "7" + "'", str52, "7");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "12" + "'", str54, "12");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26222" + "'", str57, "26222");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(gJChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant39 = mutableDateTime21.toInstant();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant39.plus(readableDuration40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26382 + "'", int13 == 26382);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26382 + "'", int31 == 26382);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DurationField durationField29 = gJChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.minuteOfHour();
        org.joda.time.DurationField durationField31 = gJChronology22.days();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26382 + "'", int16 == 26382);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.addMonths((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.property(dateTimeFieldType20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.addWeeks(26277223);
        mutableDateTime1.setMillis((long) 26317823);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italian\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField8 = gJChronology3.eras();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 1645514228123L, 47);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514228123L + "'", long12 == 1645514228123L);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        int int8 = gJChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology3.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = timeZone11.getDisplayName(false, 26335);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26335");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setTime(57, (int) (short) 100, 26279, 2013);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        int int9 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfDay(26147);
        int int17 = localDateTime16.getYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(9);
        int int20 = localDateTime16.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.clockhourOfHalfday();
        long long9 = dateTimeField6.addWrapField((long) (short) 1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        int int15 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime13.setMillisOfDay((int) 'a');
        mutableDateTime13.setWeekyear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime13.add(readableDuration29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = mutableDateTime32.toDateTimeISO();
        int int34 = dateTime33.getYearOfEra();
        boolean boolean35 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateTime33);
        java.util.GregorianCalendar gregorianCalendar36 = mutableDateTime13.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.hourOfDay();
        java.lang.String str49 = gJChronology45.toString();
        org.joda.time.DurationField durationField50 = gJChronology45.hours();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        boolean boolean61 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        int int64 = localDateTime62.get(dateTimeFieldType63);
        boolean boolean65 = localDateTime60.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        int[] intArray67 = new int[] {};
        int[] intArray69 = dateTimeField58.add((org.joda.time.ReadablePartial) localDateTime60, (int) (byte) 100, intArray67, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime60.weekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime60.plusWeeks(7);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.weekyear();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        org.joda.time.LocalDateTime localDateTime76 = property73.addWrapFieldToCopy(192);
        int[] intArray78 = gJChronology45.get((org.joda.time.ReadablePartial) localDateTime76, (long) 20);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) localDateTime40, 523, intArray78, 26176);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 523");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600001L + "'", long9 == 3600001L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26383 + "'", int23 == 26383);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str49, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 20]");
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        int int23 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime26);
        mutableDateTime21.setMillisOfDay((int) 'a');
        boolean boolean35 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setDayOfYear((int) (short) 10);
        int int38 = mutableDateTime21.getWeekOfWeekyear();
        org.joda.time.Instant instant39 = mutableDateTime21.toInstant();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime21.yearOfEra();
        int int41 = property40.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26383 + "'", int13 == 26383);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26383 + "'", int31 == 26383);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.centuryOfEra();
        java.lang.String str16 = dateTimeField14.getAsText((long) 44358);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20" + "'", str16, "20");
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        boolean boolean17 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis(10);
        int int38 = localDateTime35.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withCenturyOfEra(523);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusMinutes(24);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays(995);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int48 = localDateTime44.get(dateTimeFieldType47);
        int int49 = localDateTime19.get(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFieldType47, dateTimeZone51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 295 + "'", int38 == 295);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 360 + "'", int48 == 360);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertNotNull(dateTimeZone51);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 948);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(3600001L);
        mutableDateTime14.setDate(220924800100L);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfMonth();
        boolean boolean30 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType20.getDurationType();
        boolean boolean32 = instant19.isSupported(dateTimeFieldType20);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) instant19);
        long long34 = instant19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime35 = instant19.toMutableDateTimeISO();
        mutableDateTime35.addMillis(525);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.monthOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = gJChronology41.add(readablePeriod46, 1645514151595L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology41.monthOfYear();
        org.joda.time.DurationField durationField52 = gJChronology41.hours();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology41.millisOfDay();
        int int54 = mutableDateTime35.get(dateTimeField53);
        mutableDateTime35.setDate((long) (-7));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2022L + "'", long34 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(gJChronology41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str42, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514151595L + "'", long49 == 1645514151595L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2547 + "'", int54 == 2547);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        int int7 = dateTimeFormatter4.getDefaultYear();
        java.lang.Integer int8 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withPivotYear(70);
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        org.joda.time.Chronology chronology12 = dateTimeFormatter10.getChronolgy();
        int int13 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter10.getParser();
        org.joda.time.Chronology chronology16 = dateTimeFormatter10.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant17 = org.joda.time.Instant.parse("26292727", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfYear();
        int int11 = dateTimeField9.getMaximumValue(1645514324766L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.addDays(26147);
        java.lang.String str17 = mutableDateTime3.toString();
        int int18 = mutableDateTime3.getEra();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime19.hourOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26383 + "'", int13 == 26383);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2093-09-24T07:19:43.429Z" + "'", str17, "2093-09-24T07:19:43.429Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = dateTimeField5.getDurationField();
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = localDateTime21.get(dateTimeFieldType22);
        boolean boolean24 = localDateTime19.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = mutableDateTime45.toDateTimeISO();
        org.joda.time.DateTime.Property property47 = dateTime46.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime50 = dateTime46.withPeriodAdded(readablePeriod48, 0);
        int int51 = dateTime46.getSecondOfDay();
        org.joda.time.DateTime.Property property52 = dateTime46.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55, (int) (short) 1);
        java.lang.String str58 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.era();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology57.minuteOfDay();
        org.joda.time.DurationField durationField62 = gJChronology57.seconds();
        boolean boolean63 = dateTimeZone42.equals((java.lang.Object) gJChronology57);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology57.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        boolean boolean67 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyear();
        int int70 = localDateTime68.get(dateTimeFieldType69);
        boolean boolean71 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusMinutes(20);
        int[] intArray84 = new int[] { '4', 8, 26148, '#' };
        int int85 = dateTimeField64.getMaximumValue((org.joda.time.ReadablePartial) localDateTime77, intArray84);
        int int86 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray84);
        int[] intArray87 = localDateTime28.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = dateTimeField5.addWrapPartial(readablePartial7, 26259, intArray87, 26166);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 26383 + "'", int51 == 26383);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(gJChronology57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str58, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[52, 8, 26148, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 24 + "'", int85 == 24);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2022, 2, 22, 26383457]");
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology3.clockhourOfHalfday();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        java.lang.String str29 = dateTimeField27.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = dateTimeZone44.getShortName((long) 2022, locale46);
        java.lang.String str48 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, 295, locale46);
        java.util.Locale.setDefault(category20, locale46);
        java.lang.String str50 = dateTimeField18.getAsText(100, locale46);
        java.lang.String str51 = locale46.getDisplayName();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 7]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str29, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "295" + "'", str48, "295");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100" + "'", str50, "100");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinesisch (China)" + "'", str51, "Chinesisch (China)");
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology4.add(readablePeriod14, 4519000290L, 26248);
        org.joda.time.DurationField durationField18 = gJChronology4.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology4.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = gJChronology4.getDateTimeMillis(1645513200000L, 575, 0, 26279, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4519000290L + "'", long17 == 4519000290L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.centuryOfEra();
        java.lang.String str2 = property1.getAsText();
        org.joda.time.LocalDateTime localDateTime4 = property1.setCopy(26164);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(26204);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury(11);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours(100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.centuryOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "20" + "'", str2, "20");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.withYearOfCentury(51);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        int int22 = dateTime20.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.getID();
        boolean boolean25 = dateTimeZone23.isFixed();
        long long27 = dateTimeZone23.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone23);
        int int30 = dateTimeZone23.getOffsetFromLocal((long) 26174);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime20, dateTimeZone23);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26383 + "'", int16 == 26383);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        int int6 = mutableDateTime3.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withZoneUTC();
        boolean boolean37 = dateTimeFormatter36.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = dateTimeFormatter36.parseLocalDate("26344");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26383 + "'", int22 == 26383);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.withCenturyOfEra(714);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withWeekOfWeekyear(26334);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26334 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int14 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime9.plusMonths(26167);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField26 = gJChronology21.years();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.era();
        org.joda.time.DateTime dateTime29 = dateTime16.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime31 = dateTime16.withMillis((long) 63);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        int int10 = durationField7.getDifference((long) 806, 259200059L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DurationField durationField8 = gJChronology3.months();
        org.joda.time.DurationField durationField9 = gJChronology3.weekyears();
        long long12 = durationField9.getValueAsLong((long) 26157, (long) 26273);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.lang.String str7 = timeZone6.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean9 = timeZone4.hasSameRules(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DurationField durationField9 = gJChronology3.hours();
        java.lang.String str10 = durationField9.getName();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hours" + "'", str10, "hours");
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        mutableDateTime5.addYears(26165);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.set("42");
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withPeriodAdded(readablePeriod25, 0);
        int int28 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime23.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        java.lang.String str35 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.era();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField39 = gJChronology34.seconds();
        boolean boolean40 = dateTimeZone19.equals((java.lang.Object) gJChronology34);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale43);
        java.lang.String str47 = nameProvider42.getName(locale43, "secondOfMinute", "Etc/UTC");
        java.lang.String str48 = locale43.getDisplayLanguage();
        int int49 = dateTimeField41.getMaximumShortTextLength(locale43);
        java.lang.String str50 = locale43.getScript();
        java.lang.String str51 = locale43.getVariant();
        java.lang.String str54 = nameProvider11.getShortName(locale43, "Heure de Greenwich", "halfdays");
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = dateTimeField62.getType();
        java.lang.String str64 = dateTimeField62.toString();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        boolean boolean67 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyear();
        int int70 = localDateTime68.get(dateTimeFieldType69);
        boolean boolean71 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale81 = java.util.Locale.PRC;
        java.lang.String str82 = dateTimeZone79.getShortName((long) 2022, locale81);
        java.lang.String str83 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, 295, locale81);
        java.util.Locale.setDefault(category55, locale81);
        java.lang.String str87 = nameProvider11.getName(locale81, "years", "GJChronology[Etc/UTC,mdfw=1]");
        java.util.Set<java.lang.Character> charSet88 = locale81.getExtensionKeys();
        java.lang.String str89 = property8.getAsText(locale81);
        java.util.Locale locale90 = java.util.Locale.FRENCH;
        java.util.Locale locale91 = java.util.Locale.TAIWAN;
        java.lang.String str92 = locale90.getDisplayLanguage(locale91);
        java.util.Set<java.lang.String> strSet93 = locale91.getUnicodeLocaleAttributes();
        int int94 = property8.getMaximumShortTextLength(locale91);
        org.joda.time.MutableDateTime mutableDateTime95 = property8.roundHalfFloor();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26384 + "'", int28 == 26384);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(gJChronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str35, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(nameProvider42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Deutsch" + "'", str48, "Deutsch");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(gJChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str64, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "295" + "'", str83, "295");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "42" + "'", str89, "42");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u6cd5\u6587" + "'", str92, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 9 + "'", int94 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime95);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.DateTime.Property property13 = dateTime9.era();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = property13.withMaximumValue();
        boolean boolean17 = dateTime15.isBefore(1641609822071L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale1);
        java.lang.String str5 = nameProvider0.getName(locale1, "secondOfMinute", "Etc/UTC");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology9.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withPeriodAdded(readablePeriod33, 0);
        int int36 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40, (int) (short) 1);
        java.lang.String str43 = gJChronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.era();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology42.minuteOfDay();
        org.joda.time.DurationField durationField47 = gJChronology42.seconds();
        boolean boolean48 = dateTimeZone27.equals((java.lang.Object) gJChronology42);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology42.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale51);
        java.lang.String str55 = nameProvider50.getName(locale51, "secondOfMinute", "Etc/UTC");
        java.lang.String str56 = locale51.getDisplayLanguage();
        int int57 = dateTimeField49.getMaximumShortTextLength(locale51);
        java.lang.String str58 = locale19.getDisplayName(locale51);
        java.lang.String str59 = locale19.getVariant();
        java.lang.String str60 = locale19.getDisplayLanguage();
        int int61 = dateTimeField17.getMaximumShortTextLength(locale19);
        java.lang.String str64 = nameProvider0.getName(locale19, "1970-01-01T00:00:00.100", "2022-02-21T12:19:28.601");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(gJChronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str10, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26384 + "'", int36 == 26384);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(gJChronology42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str43, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Deutsch" + "'", str56, "Deutsch");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long4 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime5.getZone();
        boolean boolean9 = dateTime5.isBefore((-1L));
        boolean boolean11 = dateTime5.isAfter((long) 26203);
        org.joda.time.DateTime dateTime13 = dateTime5.minusMonths(1898);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(26194);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        int int11 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setDate((long) 948);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        boolean boolean19 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime15.setMillisOfDay((int) (short) 0);
        int int22 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology29);
        org.joda.time.DurationField durationField34 = gJChronology29.years();
        org.joda.time.DurationField durationField35 = gJChronology29.weeks();
        mutableDateTime24.setChronology((org.joda.time.Chronology) gJChronology29);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.millisOfSecond();
        java.lang.String str7 = gJChronology3.toString();
        org.joda.time.DurationField durationField8 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology13.getZone();
        org.joda.time.DurationField durationField16 = gJChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYear((int) (byte) 10);
        int int26 = localDateTime23.getWeekOfWeekyear();
        int int27 = localDateTime23.getYear();
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime23, locale28);
        java.util.Locale locale33 = new java.util.Locale("yearOfCentury", "years", "\u6cd5\u6587");
        java.lang.String str34 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime23, locale33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        int int42 = dateTimeField41.getMaximumValue();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = dateTimeField41.getAsShortText(20192L, locale44);
        java.lang.String str48 = locale44.getExtension('a');
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeField9.getAsShortText(26235, locale44);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "febbraio" + "'", str29, "febbraio");
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "52" + "'", str34, "52");
        org.junit.Assert.assertNotNull(gJChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "20" + "'", str46, "20");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "26235" + "'", str50, "26235");
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        boolean boolean14 = gJChronology3.equals((java.lang.Object) dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str16 = dateTimeZone15.getID();
        boolean boolean17 = dateTimeZone15.isFixed();
        long long19 = dateTimeZone15.convertUTCToLocal((long) (byte) 0);
        int int21 = dateTimeZone15.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = property25.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusHours(10);
        boolean boolean32 = dateTimeZone15.equals((java.lang.Object) localDateTime31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter12.withZone(dateTimeZone15);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = gJChronology34.get(readablePeriod35, (long) 926);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(gJChronology34);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime16 = dateTime11.minusYears(2022);
        int int17 = dateTime16.getYear();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1988) + "'", int17 == (-1988));
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology8.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        int int21 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime.Property property22 = dateTime16.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.era();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfDay();
        org.joda.time.DurationField durationField32 = gJChronology27.seconds();
        boolean boolean33 = dateTimeZone12.equals((java.lang.Object) gJChronology27);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.era();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology36 = gJChronology27.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField37 = gJChronology27.days();
        java.lang.String str38 = gJChronology27.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((int) 'u', 0, (-627528), 26351, 26254, (org.joda.time.Chronology) gJChronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26351 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26384 + "'", int21 == 26384);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(gJChronology27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str28, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str38, "GJChronology[UTC,mdfw=1]");
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = localDateTime8.get(dateTimeFieldType9);
        boolean boolean11 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minusSeconds(0);
        int int16 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.plusHours(15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = dateTimeZone23.getShortName((long) 2022, locale25);
        java.lang.String str27 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 21, locale25);
        long long30 = dateTimeField4.set((long) 35, "42");
        // The following exception was thrown during execution in test generation
        try {
            int int33 = dateTimeField4.getDifference(765824138279285L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 765824138279285");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "21" + "'", str27, "21");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 42L + "'", long30 == 42L);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(691);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.era();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DurationField durationField11 = gJChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(763106140800035L, (org.joda.time.Chronology) gJChronology10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = gJChronology10.get(readablePeriod14, (long) 611);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((int) 'u');
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        long long17 = gJChronology11.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean18 = durationFieldType7.isSupported((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DurationField durationField19 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField20 = gJChronology11.hours();
        org.joda.time.Instant instant21 = gJChronology11.getGregorianCutover();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) gJChronology11);
        org.joda.time.Chronology chronology23 = dateTimeFormatter6.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = dateTimeFormatter6.parseLocalDate("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 763106140800035L + "'", long17 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(chronology23);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        long long13 = dateTimeZone11.nextTransition((long) 26149);
        long long17 = dateTimeZone11.convertLocalToUTC((long) 2000, false, (long) 26154);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        long long21 = dateTimeZone11.nextTransition(2265235200000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(58352487, 0, 26253, (int) (short) 10, 26249797, 26208, 26358, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26249797 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 26149L + "'", long13 == 26149L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2000L + "'", long17 == 2000L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2265235200000L + "'", long21 == 2265235200000L);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology3.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology3.getDateTimeMillis(26310, 26204, 26215, 26353);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26204 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        mutableDateTime9.addMinutes(9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.era();
        mutableDateTime9.setMinuteOfDay(16);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField8 = gJChronology4.centuries();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology4.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(951203772466L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.era();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.clockhourOfHalfday();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = dateTimeField11.getAsText(26207, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26207");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = gJChronology3.get(readablePeriod14, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514151595L + "'", long11 == 1645514151595L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray8 = strSet7.toArray();
        java.util.Locale.FilteringMode filteringMode9 = null;
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet7, filteringMode9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strMap14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        boolean boolean19 = strSet18.isEmpty();
        java.lang.String[] strArray28 = new java.lang.String[] { "2022-02-22T00:00:00.101Z", "DateTimeField[hourOfHalfday]", "+00:00", "2022-02-22T00:00:00.101Z", "de-DE", "UTC", "Deutsch", "2022-02-21T07:15:52.625" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        boolean boolean31 = strSet18.containsAll((java.util.Collection<java.lang.String>) strList29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList29, filteringMode32);
        boolean boolean34 = strSet7.containsAll((java.util.Collection<java.lang.String>) strList29);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.lang.String str10 = dateTimeZone7.getShortName((long) 2022, locale9);
        long long13 = dateTimeZone7.adjustOffset((long) 2, false);
        org.joda.time.Chronology chronology14 = gJChronology3.withZone(dateTimeZone7);
        java.util.TimeZone timeZone15 = dateTimeZone7.toTimeZone();
        int int16 = timeZone15.getRawOffset();
        java.util.TimeZone.setDefault(timeZone15);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withOffsetParsed();
        java.util.Locale locale25 = dateTimeFormatter24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        org.joda.time.Chronology chronology43 = gJChronology30.withZone(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter24.withZone(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((-1199900L), dateTimeZone42);
        java.util.Locale.Category category51 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.lang.String str55 = dateTimeZone52.getShortName((long) 2022, locale54);
        java.lang.String str56 = locale54.getScript();
        java.util.Locale.setDefault(category51, locale54);
        java.lang.String str58 = dateTimeZone42.getShortName((-8L), locale54);
        java.util.Locale locale59 = locale54.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = timeZone15.getDisplayName(true, 26327964, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26327964");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4518960813L + "'", long47 == 4518960813L);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.FORMAT + "'", category51.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale1);
        java.lang.String str5 = nameProvider0.getName(locale1, "secondOfMinute", "Etc/UTC");
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.lang.String str7 = locale1.getDisplayName();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withPeriodAdded(readablePeriod27, 0);
        int int30 = dateTime25.getSecondOfDay();
        org.joda.time.DateTime.Property property31 = dateTime25.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34, (int) (short) 1);
        java.lang.String str37 = gJChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.era();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.minuteOfDay();
        org.joda.time.DurationField durationField41 = gJChronology36.seconds();
        boolean boolean42 = dateTimeZone21.equals((java.lang.Object) gJChronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter11.withChronology((org.joda.time.Chronology) gJChronology36);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        boolean boolean46 = strSet45.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField51 = gJChronology50.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        java.lang.String str55 = dateTimeZone54.getID();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = mutableDateTime57.toDateTimeISO();
        org.joda.time.DateTime.Property property59 = dateTime58.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime58.withPeriodAdded(readablePeriod60, 0);
        int int63 = dateTime58.getSecondOfDay();
        org.joda.time.DateTime.Property property64 = dateTime58.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        java.lang.String str70 = gJChronology69.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.era();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology69.minuteOfDay();
        org.joda.time.DurationField durationField74 = gJChronology69.seconds();
        boolean boolean75 = dateTimeZone54.equals((java.lang.Object) gJChronology69);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology69.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider77 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale78);
        java.lang.String str82 = nameProvider77.getName(locale78, "secondOfMinute", "Etc/UTC");
        java.lang.String str83 = locale78.getDisplayLanguage();
        int int84 = dateTimeField76.getMaximumShortTextLength(locale78);
        java.lang.String str85 = locale78.getScript();
        java.lang.String str86 = locale78.getVariant();
        boolean boolean87 = strSet45.contains((java.lang.Object) locale78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter43.withLocale(locale78);
        java.lang.String str89 = locale1.getDisplayLanguage(locale78);
        java.lang.String str90 = locale1.getDisplayLanguage();
        java.util.Locale locale91 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Deutsch" + "'", str6, "Deutsch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Deutsch (Deutschland)" + "'", str7, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 26384 + "'", int30 == 26384);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(gJChronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str37, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(gJChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 26384 + "'", int63 == 26384);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(gJChronology65);
        org.junit.Assert.assertNotNull(gJChronology69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str70, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(nameProvider77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Deutsch" + "'", str83, "Deutsch");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Deutsch" + "'", str89, "Deutsch");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Deutsch" + "'", str90, "Deutsch");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        int int9 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withHourOfDay((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfDay(26147);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 13);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMonths(26268);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        int int7 = dateTimeFormatter3.getDefaultYear();
        boolean boolean8 = dateTimeFormatter3.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.monthOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField18 = gJChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        java.lang.String str36 = dateTimeZone35.getID();
        boolean boolean38 = dateTimeZone35.isStandardOffset(2L);
        mutableDateTime22.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology40 = gJChronology12.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter3.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeFormatter3.getZone();
        java.io.Writer writer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer43, 826817699921443L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(gJChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str13, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimeZone42);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        int int11 = dateTimeField9.getMaximumValue(0L);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale12.getDisplayScript();
        java.lang.String str15 = locale12.toLanguageTag();
        int int16 = dateTimeField9.getMaximumTextLength(locale12);
        java.lang.String str17 = locale12.getDisplayCountry();
        java.lang.String str18 = locale12.getISO3Country();
        java.lang.String str19 = locale12.getCountry();
        java.util.Locale.setDefault(locale12);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de-DE" + "'", str15, "de-DE");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Deutschland" + "'", str17, "Deutschland");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DEU" + "'", str18, "DEU");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DE" + "'", str19, "DE");
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = property8.getAsText(locale9);
        java.lang.String str12 = locale9.getDisplayCountry();
        java.lang.String str13 = locale9.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26384 + "'", int7 == 26384);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutschland" + "'", str12, "Deutschland");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Deutschland" + "'", str13, "Deutschland");
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property5.setCopy(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        long long20 = dateTimeZone16.convertLocalToUTC((long) 1, false);
        long long22 = dateTimeZone16.previousTransition((long) 5);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        long long26 = dateTimeZone16.convertLocalToUTC((long) 26178, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) localDateTime8, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 5L + "'", long22 == 5L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 26178L + "'", long26 == 26178L);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DurationField durationField9 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.yearOfEra();
        boolean boolean11 = dateTimeField10.isLenient();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime22.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime3, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField53 = gJChronology48.seconds();
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) gJChronology48);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.yearOfEra();
        mutableDateTime3.setRounding(dateTimeField55);
        mutableDateTime3.addDays(438);
        mutableDateTime3.setMillisOfSecond(489);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26384 + "'", int13 == 26384);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26384 + "'", int42 == 26384);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(gJChronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str49, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.lang.String str3 = timeZone1.getID();
        java.lang.String str4 = timeZone1.getID();
        boolean boolean5 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(44264689);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfDay(295);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        java.lang.String str25 = dateTimeZone23.getName((long) 26150);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int28 = dateTimeZone23.getStandardOffset(827680749358018L);
        boolean boolean29 = dateTimeZone23.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) 295, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Feb 01 00:00:00 UTC 3690725");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfDay();
        java.lang.String str7 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.clockhourOfHalfday();
        long long18 = dateTimeField15.addWrapField((long) (short) 1, (int) (short) 1);
        int int20 = dateTimeField15.get(20000L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology25);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusSeconds(26147);
        int int32 = localDateTime29.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.era();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundFloor();
        int int39 = mutableDateTime38.getRoundingMode();
        org.joda.time.DateTime dateTime40 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 5, locale44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        java.lang.String str50 = gJChronology49.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology49.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = dateTimeZone55.getShortName((long) 2022, locale57);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        int[] intArray61 = gJChronology49.get((org.joda.time.ReadablePartial) localDateTime59, 7L);
        int int62 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34, intArray61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        int int67 = dateTimeField64.getDifference(1645514217699L, 1641609842826L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3600001L + "'", long18 == 3600001L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "5" + "'", str45, "5");
        org.junit.Assert.assertNotNull(gJChronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str50, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 7]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 999 + "'", int62 == 999);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1084 + "'", int67 == 1084);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.clockhourOfHalfday();
        long long9 = dateTimeField6.addWrapField((long) (short) 1, (int) (short) 1);
        int int11 = dateTimeField6.get(20000L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(26147);
        int int23 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.era();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        int int30 = mutableDateTime29.getRoundingMode();
        org.joda.time.DateTime dateTime31 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) mutableDateTime29);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 5, locale35);
        java.util.Locale locale39 = new java.util.Locale("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = localDateTime25.toString("DateTimeField[yearOfEra]", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600001L + "'", long9 == 3600001L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "5" + "'", str36, "5");
        org.junit.Assert.assertEquals(locale39.toString(), "");
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField9 = gJChronology3.hours();
        org.joda.time.DurationField durationField10 = gJChronology3.centuries();
        long long12 = durationField10.getMillis(26298);
        long long13 = durationField10.getUnitMillis();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 82988472369600000L + "'", long12 == 82988472369600000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3155695200000L + "'", long13 == 3155695200000L);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.yearOfEra();
        org.joda.time.DurationField durationField21 = gJChronology18.halfdays();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfMonth();
        boolean boolean24 = dateTimeFieldType14.isSupported((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime.Property property26 = dateTime10.property(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType14.getRangeDurationType();
        java.lang.String str29 = dateTimeFieldType14.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "centuryOfEra" + "'", str29, "centuryOfEra");
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJChronology$ImpreciseCutoverField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property2 = dateTime1.hourOfDay();
        java.lang.Class<?> wildcardClass3 = property2.getClass();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        int int7 = dateTimeZone4.getOffset((long) 11);
        java.lang.String str9 = dateTimeZone4.getShortName((long) 2051);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        mutableDateTime10.setTime((long) 26152);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology3.getZone();
        org.joda.time.DurationField durationField17 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology3.minuteOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(26155);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plus(readableDuration12);
        int int14 = localDateTime8.getMonthOfYear();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter13.withChronology((org.joda.time.Chronology) gJChronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = dateTimeFormatter2.parseLocalDateTime("millis");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26385 + "'", int32 == 26385);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str39, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        int int5 = localDateTime4.getDayOfMonth();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(5);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.yearOfEra();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 26150);
        org.joda.time.LocalDateTime localDateTime16 = property11.addToCopy(1970);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        int int18 = localDateTime16.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withHourOfDay(26260808);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26260808 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 39 + "'", int18 == 39);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.yearOfEra();
        org.joda.time.DurationField durationField25 = gJChronology22.halfdays();
        boolean boolean26 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gJChronology22);
        int int27 = localDateTime17.get(dateTimeFieldType18);
        int int28 = localDateTime10.get(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.era();
        boolean boolean51 = mutableDateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime49);
        int int52 = property44.getDifference((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTimeISO();
        org.joda.time.DateTime.Property property57 = dateTime56.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime60 = dateTime56.withPeriodAdded(readablePeriod58, 0);
        int int61 = dateTime56.getSecondOfDay();
        org.joda.time.DateTime.Property property62 = dateTime56.minuteOfHour();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale63);
        java.lang.String str65 = property62.getAsText(locale63);
        java.lang.String str66 = locale63.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime67 = property44.setCopy("26", locale63);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.year();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusDays(26158);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readablePeriod71);
        long long74 = gJChronology33.set((org.joda.time.ReadablePartial) localDateTime72, (long) 18000100);
        org.joda.time.DurationField durationField75 = durationFieldType29.getField((org.joda.time.Chronology) gJChronology33);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology33.getZone();
        long long81 = dateTimeZone78.convertLocalToUTC((long) 36633, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 26385 + "'", int61 == 26385);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "19" + "'", str65, "19");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Deutschland" + "'", str66, "Deutschland");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3903232785482L + "'", long74 == 3903232785482L);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 36633L + "'", long81 == 36633L);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        boolean boolean25 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(26151);
        boolean boolean32 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.yearOfEra();
        org.joda.time.DurationField durationField25 = gJChronology22.halfdays();
        boolean boolean26 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gJChronology22);
        int int27 = localDateTime17.get(dateTimeFieldType18);
        int int28 = localDateTime10.get(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DurationField durationField34 = gJChronology32.hours();
        org.joda.time.DurationField durationField35 = gJChronology32.years();
        boolean boolean36 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DurationField durationField37 = gJChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.era();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        java.lang.Integer int7 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear(8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.parse("", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        int int7 = mutableDateTime1.getYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(348479, 23, (int) (short) 100, 48, 0, 1582, 26373);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear(70);
        org.joda.time.Chronology chronology10 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter3.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = localDateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusSeconds((int) '#');
        int int27 = localDateTime26.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeFormatter3.print((org.joda.time.ReadablePartial) localDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setVariant("Deutsch");
        java.util.Locale locale13 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.clear();
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale locale16 = builder15.build();
        int int17 = dateTimeField8.getMaximumShortTextLength(locale16);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.era();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.getDifferenceAsLong((long) 26303, 1135080026193L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Chronology chronology8 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField11 = gJChronology3.hours();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology3.getDateTimeMillis(0L, 26179, 26182, 262, 44358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26179 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add(1L);
        mutableDateTime4.setMillis(3600001L);
        int int7 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime21.getFieldType((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = localDateTime29.get(dateTimeFieldType30);
        boolean boolean32 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusMillis(8);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        boolean boolean38 = dateTimeFieldType25.isSupported(chronology37);
        int int39 = dateTime11.get(dateTimeFieldType25);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime4.property(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        org.joda.time.DurationField durationField8 = gJChronology3.hours();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.monthOfYear();
        org.joda.time.DurationField durationField10 = gJChronology3.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology3.getDateTimeMillis(26354, 26195, 26207, 26258, 0, 688, 26164);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26258 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        long long12 = gJChronology3.add(120L, (long) 70, 26149);
        org.joda.time.DurationField durationField13 = gJChronology3.hours();
        org.joda.time.DurationField durationField14 = gJChronology3.centuries();
        org.joda.time.DurationField durationField15 = gJChronology3.seconds();
        long long18 = durationField15.getValueAsLong(341490204633345L, (long) 26351);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1830550L + "'", long12 == 1830550L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 341490204633L + "'", long18 == 341490204633L);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(47232000L);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = gJChronology3.get(readablePeriod8, 1645514178837L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(20);
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.year();
        int int21 = property20.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant10 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.year();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField15 = gJChronology4.weeks();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withPeriodAdded(readablePeriod14, 0);
        int int17 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime.Property property18 = dateTime12.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology23.seconds();
        boolean boolean29 = dateTimeZone8.equals((java.lang.Object) gJChronology23);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale32);
        java.lang.String str36 = nameProvider31.getName(locale32, "secondOfMinute", "Etc/UTC");
        java.lang.String str37 = locale32.getDisplayLanguage();
        int int38 = dateTimeField30.getMaximumShortTextLength(locale32);
        java.lang.String str39 = locale32.getScript();
        java.lang.String str40 = locale32.getVariant();
        java.lang.String str43 = nameProvider0.getShortName(locale32, "Heure de Greenwich", "halfdays");
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str49 = nameProvider0.getShortName(locale44, "yearOfCentury", "Englisch");
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType50.getField((org.joda.time.Chronology) gJChronology54);
        int int61 = dateTimeField59.getMaximumValue(0L);
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale62.getDisplayScript();
        java.lang.String str65 = locale62.toLanguageTag();
        int int66 = dateTimeField59.getMaximumTextLength(locale62);
        java.lang.String str67 = locale62.getDisplayCountry();
        java.lang.String str68 = locale62.getISO3Country();
        java.lang.String str71 = nameProvider0.getShortName(locale62, "2022-02-21T12:17:26.272", "2022-02-21T12:17:46.892");
        java.lang.String str72 = locale62.getCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26385 + "'", int17 == 26385);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(gJChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str24, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u6cd5\u6587" + "'", str46, "\u6cd5\u6587");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "de-DE" + "'", str65, "de-DE");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Deutschland" + "'", str67, "Deutschland");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DEU" + "'", str68, "DEU");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DE" + "'", str72, "DE");
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        java.time.ZoneId zoneId0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone(zoneId0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.weekyears();
        int int12 = durationField9.getDifference((long) 52, (-753845L));
        int int14 = durationField9.getValue((long) 657);
        boolean boolean15 = durationField9.isSupported();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(26266, 26264, 70, 2051, 736, 26346);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2051 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int2 = mutableDateTime1.getEra();
        java.lang.String str4 = mutableDateTime1.toString("DE");
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        boolean boolean9 = dateTimeFormatter8.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear(23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = mutableDateTime1.toString(dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "53Di" + "'", str4, "53Di");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField25 = gJChronology20.seconds();
        long long29 = gJChronology20.add(20000L, (long) 1, 192);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.secondOfDay();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology20);
        mutableDateTime3.setMillis((-155087999052L));
        boolean boolean35 = mutableDateTime3.isBefore(1645514295627L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gJChronology8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str9, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gJChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str21, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 20192L + "'", long29 == 20192L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        int int13 = mutableDateTime12.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.weekyear();
        int int15 = property8.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26386 + "'", int7 == 26386);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 439 + "'", int15 == 439);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        long long9 = dateTimeZone7.nextTransition((long) 'x');
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = dateTimeZone12.getOffset((long) 348479);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 120L + "'", long9 == 120L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        boolean boolean25 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (short) 10);
        boolean boolean30 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime17.withMillisOfSecond(26319);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26319 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTime.Property property19 = dateTime5.yearOfCentury();
        java.lang.String str20 = property19.getName();
        java.lang.String str21 = property19.getAsText();
        org.joda.time.DateTime dateTime23 = property19.addWrapFieldToCopy(26167);
        org.joda.time.DateTime dateTime24 = property19.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property19.setCopy("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[hourOfDay]\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "yearOfCentury" + "'", str20, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        int int11 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setDate((long) 948);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        boolean boolean19 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime15.setMillisOfDay((int) (short) 0);
        int int22 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime15.era();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.era();
        mutableDateTime15.setRounding(dateTimeField32);
        mutableDateTime15.addDays(26169);
        mutableDateTime15.setDayOfYear(44);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str28, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(671, 26220, 439, 26329, 26282, 26223, 26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26329 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime6.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.yearOfEra();
        org.joda.time.DurationField durationField21 = gJChronology18.halfdays();
        org.joda.time.DurationField durationField22 = gJChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.dayOfMonth();
        boolean boolean24 = dateTimeFieldType14.isSupported((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime.Property property26 = dateTime10.property(dateTimeFieldType14);
        org.joda.time.DateTime dateTime28 = dateTime10.plusHours(498);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Chronology chronology43 = gJChronology40.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField44 = gJChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter36.withChronology((org.joda.time.Chronology) gJChronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter46.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTimeFormatter47.parseDateTime("2022-02-21T12:19:10.834");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26386 + "'", int22 == 26386);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(gJChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("HALFDAYS");
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.Builder builder12 = builder7.addUnicodeLocaleAttribute("26214006");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay(0);
        int int14 = localDateTime13.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(26147);
        int int26 = localDateTime23.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.dayOfYear();
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.minusMinutes(26168);
        int int32 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime13.millisOfDay();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("26168");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField6 = gJChronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        java.lang.String str10 = dateTimeZone9.getID();
        long long13 = dateTimeZone9.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        int int22 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) instant21);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.getID();
        boolean boolean28 = dateTimeZone26.isFixed();
        long long30 = dateTimeZone26.convertUTCToLocal((long) (byte) 0);
        int int32 = dateTimeZone26.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone26);
        int int34 = localDateTime33.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withField(dateTimeFieldType35, (int) (short) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear(297);
        int int41 = localDateTime37.getCenturyOfEra();
        int[] intArray43 = gJChronology23.get((org.joda.time.ReadablePartial) localDateTime37, (long) 999);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, (org.joda.time.Chronology) gJChronology23);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMinutes((-292269055));
        int int47 = localDateTime46.getDayOfYear();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(gJChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str18, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 999]");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 256 + "'", int47 == 256);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology4);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = gJChronology4.add(readablePeriod14, 4519000290L, 26248);
        org.joda.time.DurationField durationField18 = gJChronology4.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology4.getZone();
        org.joda.time.DurationField durationField20 = gJChronology4.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4519000290L + "'", long17 == 4519000290L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField22 = gJChronology21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        boolean boolean29 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusSeconds(0);
        int int34 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property35 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime.Property property36 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        int[] intArray41 = localDateTime37.getValues();
        gJChronology21.validate((org.joda.time.ReadablePartial) localDateTime26, intArray41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime26.withMillisOfDay(68400000);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2022, 2, 22, 26386507]");
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DurationField durationField9 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology3.weekyears();
        int int14 = durationField11.getDifference(26244L, (long) 26183);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology4.hourOfHalfday();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.lang.String str56 = locale55.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str59 = dateTimeField53.getAsText((long) 26152, locale55);
        java.lang.String str60 = dateTimeField53.toString();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22, 26386565]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italienisch (Italien)" + "'", str56, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str60, "DateTimeField[hourOfHalfday]");
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        long long9 = durationField6.subtract(26167L, 88);
        int int11 = durationField6.getValue((long) 2922790);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-277674220773833L) + "'", long9 == (-277674220773833L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTime.Property property16 = dateTime5.year();
        org.joda.time.DateTime dateTime18 = dateTime5.plusYears(26185);
        org.joda.time.DateTime dateTime20 = dateTime5.plusMinutes(26260808);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withSecondOfMinute(2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gJChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str12, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        int int3 = timeZone0.getOffset((long) 22);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.parse("2022-02-22T00:00:00.101Z");
        mutableDateTime7.setDate((long) 26163);
        java.lang.String str10 = mutableDateTime7.toString();
        int int11 = mutableDateTime7.getMillisOfDay();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = mutableDateTime7.toString("26175381", locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = timeZone0.getDisplayName(true, 874, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 874");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Koordinierte Universalzeit");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.101Z" + "'", str10, "1970-01-01T00:00:00.101Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 101 + "'", int11 == 101);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "26175381" + "'", str15, "26175381");
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay(9);
        int int17 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.centuryOfEra();
        int int19 = localDateTime16.getDayOfWeek();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 28 + "'", int17 == 28);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(26153);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMillis(26250);
        int int17 = localDateTime13.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withField(dateTimeFieldType10, (int) (short) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear(297);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        long long17 = property16.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DurationField durationField7 = gJChronology3.eras();
        org.joda.time.DurationFieldType durationFieldType8 = durationField7.getType();
        long long9 = durationField7.getUnitMillis();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = gJChronology4.halfdays();
        int int17 = durationField14.getValue(1645427978374L, (long) 88);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 763106140800035L + "'", long10 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 38088 + "'", int17 == 38088);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        boolean boolean4 = timeZone0.hasSameRules(timeZone3);
        int int6 = timeZone0.getOffset((long) (short) 0);
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale8);
        java.lang.String str12 = nameProvider7.getName(locale8, "secondOfMinute", "Etc/UTC");
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType13.getField((org.joda.time.Chronology) gJChronology17);
        int int24 = dateTimeField22.getMaximumValue(0L);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale25);
        java.lang.String str27 = locale25.getDisplayScript();
        java.lang.String str28 = locale25.toLanguageTag();
        int int29 = dateTimeField22.getMaximumTextLength(locale25);
        java.lang.String str32 = nameProvider7.getShortName(locale25, "AD", "26158015");
        java.util.Locale.setDefault(locale25);
        java.lang.String str34 = timeZone0.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Koordinierte Universalzeit");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "de-DE" + "'", str28, "de-DE");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Koordinierte Universalzeit" + "'", str34, "Koordinierte Universalzeit");
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.yearOfEra();
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DurationField durationField12 = gJChronology8.centuries();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.dayOfMonth();
        org.joda.time.DurationField durationField14 = gJChronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology8);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeFormatter16.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        java.lang.String str18 = dateTimeZone17.getID();
        long long21 = dateTimeZone17.convertLocalToUTC((long) 1, false);
        org.joda.time.Chronology chronology22 = gJChronology3.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType24.getField((org.joda.time.Chronology) gJChronology28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = dateTimeZone35.getShortName((long) 2022, locale37);
        java.lang.String str39 = locale37.getScript();
        java.lang.String str40 = dateTimeField33.getAsText((int) '4', locale37);
        int int41 = dateTimeField23.getMaximumTextLength(locale37);
        java.lang.String str42 = locale37.getDisplayName();
        java.lang.String str43 = locale37.getDisplayVariant();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "52" + "'", str40, "52");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch (China)" + "'", str42, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withPeriodAdded(readablePeriod7, 295);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(26175);
        org.joda.time.DateTime.Property property12 = dateTime9.year();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(26313);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset((int) (short) 10);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId7 = timeZone1.toZoneId();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId9 = timeZone1.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId12 = timeZone11.toZoneId();
        java.lang.String str13 = timeZone11.getID();
        timeZone11.setRawOffset((int) (short) 10);
        boolean boolean16 = timeZone11.observesDaylightTime();
        java.time.ZoneId zoneId17 = timeZone11.toZoneId();
        java.util.TimeZone.setDefault(timeZone11);
        java.time.ZoneId zoneId19 = timeZone11.toZoneId();
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean21 = timeZone1.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT" + "'", str13, "GMT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        int int19 = localDateTime17.getHourOfDay();
        int int20 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readablePeriod21);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        int int13 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        int int21 = dateTime16.getSecondOfDay();
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime16);
        mutableDateTime11.setMillisOfDay((int) 'a');
        mutableDateTime11.addMillis(4);
        java.lang.String str27 = mutableDateTime11.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime31.toDateTimeISO();
        int int33 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = mutableDateTime35.toDateTimeISO();
        org.joda.time.DateTime.Property property37 = dateTime36.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.withPeriodAdded(readablePeriod38, 0);
        int int41 = dateTime36.getSecondOfDay();
        mutableDateTime31.setDate((org.joda.time.ReadableInstant) dateTime36);
        mutableDateTime31.setMillisOfDay((int) 'a');
        mutableDateTime31.setWeekyear((int) (short) 0);
        boolean boolean47 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime11.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime11.add(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime11.property(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime11.setZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTime dateTime56 = dateTime55.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T07:19:47.043" + "'", str6, "2022-02-21T07:19:47.043");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26387 + "'", int21 == 26387);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T00:00:00.101Z" + "'", str27, "2022-02-22T00:00:00.101Z");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 26387 + "'", int41 == 26387);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        int int11 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withPeriodAdded(readablePeriod25, 0);
        int int28 = dateTime23.getSecondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime23.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        java.lang.String str35 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.era();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.minuteOfDay();
        org.joda.time.DurationField durationField39 = gJChronology34.seconds();
        boolean boolean40 = dateTimeZone19.equals((java.lang.Object) gJChronology34);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology34.monthOfYear();
        boolean boolean42 = dateTime9.equals((java.lang.Object) dateTimeField41);
        int int44 = dateTimeField41.getMaximumValue((long) 26299);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26387 + "'", int28 == 26387);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(gJChronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str35, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime10.plusYears(837);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusWeeks(968);
        int int14 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withYearOfEra(192);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withEra(18002547);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18002547 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded(readableDuration13, 192);
        org.joda.time.DateTime dateTime17 = dateTime9.plusHours(100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        java.lang.String str22 = gJChronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.hourOfHalfday();
        org.joda.time.DurationField durationField24 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology21.getZone();
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField29 = gJChronology21.months();
        org.joda.time.DurationField durationField30 = gJChronology21.weeks();
        org.joda.time.DurationField durationField31 = gJChronology21.seconds();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DurationField durationField33 = gJChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology21.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, 4537157722L, 26345);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 26345");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gJChronology21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str22, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 26148);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.withDurationAdded(readableDuration13, 192);
        boolean boolean17 = dateTime15.isEqual((long) 26155);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.seconds();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(9);
        int int34 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withTime(16, (-17259936), 5229, 26318);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17259936 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26387 + "'", int16 == 26387);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.weekyear();
        int int12 = dateTimeField9.getDifference(3646797466664L, 117L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115 + "'", int12 == 115);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear(70);
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear(26158);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withDefaultYear(26258);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean20 = dateTimeZone18.isFixed();
        long long22 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        int int24 = dateTimeZone18.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.minusHours(10);
        boolean boolean35 = dateTimeZone18.equals((java.lang.Object) localDateTime34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter17.withZone(dateTimeZone18);
        java.lang.StringBuffer stringBuffer37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTimeISO();
        boolean boolean43 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        boolean boolean45 = mutableDateTime39.isEqual((long) 7);
        mutableDateTime39.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DurationField durationField54 = durationFieldType48.getField((org.joda.time.Chronology) gJChronology52);
        mutableDateTime39.setChronology((org.joda.time.Chronology) gJChronology52);
        mutableDateTime39.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime39.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableDateTime39.add(readablePeriod59, 26190);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(stringBuffer37, (org.joda.time.ReadableInstant) mutableDateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfDay(26160);
        int[] intArray10 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.minusMonths(512);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T07:19:47.316" + "'", str6, "2022-02-21T07:19:47.316");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 26387316]");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        int int11 = dateTimeField8.getDifference(26277L, (long) 180);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.addDays(26147);
        mutableDateTime3.setSecondOfMinute(11);
        mutableDateTime3.addDays(26162);
        mutableDateTime3.add(948L);
        mutableDateTime3.addDays(44238347);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime3.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26387 + "'", int13 == 26387);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.withYearOfCentury(51);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(26173);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime20.toDateTime();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26387 + "'", int16 == 26387);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale37);
        java.lang.String str41 = nameProvider36.getName(locale37, "secondOfMinute", "Etc/UTC");
        java.lang.String str42 = locale37.getDisplayLanguage();
        int int43 = dateTimeField35.getMaximumShortTextLength(locale37);
        java.lang.String str44 = locale37.getScript();
        java.lang.String str45 = locale37.getVariant();
        int int46 = property5.getMaximumTextLength(locale37);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) int46, dateTimeZone47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26387 + "'", int22 == 26387);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Deutsch" + "'", str42, "Deutsch");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.minuteOfDay();
        org.joda.time.DurationField durationField25 = gJChronology20.seconds();
        long long29 = gJChronology20.add(20000L, (long) 1, 192);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology20.secondOfDay();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology20);
        long long32 = mutableDateTime3.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gJChronology8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str9, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gJChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str21, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 20192L + "'", long29 == 20192L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-62135596800000L) + "'", long32 == (-62135596800000L));
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime.Property property14 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime8.minusSeconds(10);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale27);
        java.lang.String str29 = property26.getAsText(locale27);
        java.lang.String str30 = locale27.getDisplayCountry();
        int int31 = property3.getMaximumShortTextLength(locale27);
        boolean boolean32 = property3.isLeap();
        org.joda.time.DateTime dateTime33 = property3.withMaximumValue();
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime33.withCenturyOfEra(47);
        org.joda.time.DateTime.Property property37 = dateTime33.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "26387582" + "'", str5, "26387582");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26387 + "'", int13 == 26387);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26387 + "'", int25 == 26387);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "19" + "'", str29, "19");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Deutschland" + "'", str30, "Deutschland");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        int int10 = mutableDateTime3.getMinuteOfHour();
        int int11 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.hourOfDay();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology15);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime3.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setWeekOfWeekyear(26285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26285 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(gJChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        java.lang.String str13 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.monthOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField18 = gJChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setSecondOfDay(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        java.lang.String str36 = dateTimeZone35.getID();
        boolean boolean38 = dateTimeZone35.isStandardOffset(2L);
        mutableDateTime22.setZone(dateTimeZone35);
        org.joda.time.Chronology chronology40 = gJChronology12.withZone(dateTimeZone35);
        org.joda.time.Chronology chronology41 = gJChronology3.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        java.lang.String str44 = dateTimeZone42.getShortName((long) 6);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str13, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Chronology chronology8 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeZone21.getShortName((long) 2022, locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = dateTimeField19.getAsText((int) '4', locale23);
        java.lang.String str27 = locale23.getISO3Language();
        int int28 = dateTimeField9.getMaximumShortTextLength(locale23);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Chronology chronology37 = gJChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType39.getField((org.joda.time.Chronology) gJChronology43);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.lang.String str53 = dateTimeZone50.getShortName((long) 2022, locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = dateTimeField48.getAsText((int) '4', locale52);
        java.lang.String str56 = locale52.getISO3Language();
        int int57 = dateTimeField38.getMaximumShortTextLength(locale52);
        java.lang.String str58 = locale23.getDisplayLanguage(locale52);
        java.util.Set<java.lang.Character> charSet59 = locale23.getExtensionKeys();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "52" + "'", str55, "52");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zho" + "'", str56, "zho");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587" + "'", str58, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet59);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.set((long) 26280643, "2022-02-22T07:18:57.611Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:57.611Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime16 = dateTime8.minus((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        int int22 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        mutableDateTime20.setSecondOfDay(59);
        mutableDateTime20.addMonths(26149);
        int int27 = mutableDateTime20.getMinuteOfHour();
        int int28 = mutableDateTime20.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfDay();
        mutableDateTime20.setChronology((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DurationField durationField37 = gJChronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        boolean boolean40 = dateTime16.isSupported(dateTimeFieldType39);
        int int41 = dateTime16.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26387 + "'", int13 == 26387);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.era();
        boolean boolean13 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) mutableDateTime11);
        int int14 = property6.getDifference((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime.Property property24 = dateTime18.minuteOfHour();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale25);
        java.lang.String str27 = property24.getAsText(locale25);
        java.lang.String str28 = locale25.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime29 = property6.setCopy("26", locale25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DurationField durationField35 = gJChronology33.hours();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfHalfday();
        java.lang.String[] strArray53 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        int int56 = strSet54.size();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        boolean boolean59 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        int int62 = localDateTime60.get(dateTimeFieldType61);
        boolean boolean63 = localDateTime58.isAfter((org.joda.time.ReadablePartial) localDateTime60);
        boolean boolean64 = strSet54.equals((java.lang.Object) localDateTime58);
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.hourOfDay();
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = property65.getAsText(locale66);
        java.lang.String str68 = locale66.getCountry();
        java.lang.String str69 = dateTimeField37.getAsText((long) 26175, locale66);
        java.lang.String str70 = locale66.getDisplayScript();
        java.lang.String str71 = locale66.getCountry();
        java.lang.String str72 = locale25.getDisplayName(locale66);
        java.lang.String str73 = locale66.getCountry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26387 + "'", int23 == 26387);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "19" + "'", str27, "19");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutschland" + "'", str28, "Deutschland");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "7" + "'", str67, "7");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "12" + "'", str69, "12");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str72, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("187");
        timeZone1.setID("52");
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = timeZone1.getDisplayName(locale4);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT+00:00" + "'", str5, "GMT+00:00");
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 1, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime6.toGregorianCalendar();
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology3.years();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology3.getZone();
        org.joda.time.DurationField durationField11 = gJChronology3.centuries();
        org.joda.time.DurationField durationField12 = gJChronology3.centuries();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(1L);
        boolean boolean17 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.minus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone22.getID();
        boolean boolean24 = dateTimeZone22.isFixed();
        long long26 = dateTimeZone22.convertUTCToLocal((long) (byte) 0);
        int int28 = dateTimeZone22.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone22);
        int int30 = localDateTime29.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withField(dateTimeFieldType31, (int) (short) 0);
        org.joda.time.DateTime.Property property34 = dateTime19.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime36 = property34.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withMonthOfYear(26374);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26374 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.year();
        long long12 = dateTimeField10.roundFloor((long) 44362658);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.era();
        boolean boolean26 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        int int27 = property19.getDifference((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime30.toDateTimeISO();
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withPeriodAdded(readablePeriod33, 0);
        int int36 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property37 = dateTime31.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = property37.getAsText(locale38);
        java.lang.String str41 = locale38.getDisplayCountry();
        org.joda.time.LocalDateTime localDateTime42 = property19.setCopy("26", locale38);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.year();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusDays(26158);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plus(readablePeriod46);
        long long49 = gJChronology8.set((org.joda.time.ReadablePartial) localDateTime47, (long) 18000100);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology8.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(45, 26197, 26345, 26309, 26303, (org.joda.time.Chronology) gJChronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26309 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26388 + "'", int36 == 26388);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "19" + "'", str40, "19");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Deutschland" + "'", str41, "Deutschland");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3903232788148L + "'", long49 == 3903232788148L);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.Chronology) gJChronology11);
        int int21 = gJChronology11.getMinimumDaysInFirstWeek();
        long long25 = gJChronology11.add(10L, (long) 999, 17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(26353, 26388, 50, 26221, 236, (-274269), 376, (org.joda.time.Chronology) gJChronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26221 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 16993L + "'", long25 == 16993L);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DurationField durationField11 = gJChronology8.weeks();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter13.getParser();
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer16, 4537165208L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNull(dateTimeParser15);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        java.lang.String str14 = property13.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property13.setCopy(86438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86438 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.parse("26158015");
        boolean boolean5 = dateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter9.getPrinter();
        int int12 = dateTimeFormatter9.getDefaultYear();
        java.lang.Integer int13 = dateTimeFormatter9.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withPivotYear(70);
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        boolean boolean17 = dateTimeFormatter15.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withPivotYear(26159);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTime2.toString(dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        boolean boolean3 = strSet2.isEmpty();
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        boolean boolean11 = strSet9.remove((java.lang.Object) 2922790L);
        boolean boolean12 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet9);
        boolean boolean13 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet7);
        strSet7.clear();
        java.lang.String[] strArray29 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        int int32 = strSet30.size();
        java.lang.Object[] objArray33 = strSet30.toArray();
        strSet30.clear();
        int int35 = strSet30.size();
        boolean boolean36 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = mutableDateTime50.toDateTimeISO();
        org.joda.time.DateTime.Property property52 = dateTime51.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime55 = dateTime51.withPeriodAdded(readablePeriod53, 0);
        int int56 = dateTime51.getSecondOfDay();
        org.joda.time.DateTime.Property property57 = dateTime51.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        java.lang.String str63 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.era();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology62.minuteOfDay();
        org.joda.time.DurationField durationField67 = gJChronology62.seconds();
        boolean boolean68 = dateTimeZone47.equals((java.lang.Object) gJChronology62);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology62.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider70 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale71);
        java.lang.String str75 = nameProvider70.getName(locale71, "secondOfMinute", "Etc/UTC");
        java.lang.String str76 = locale71.getDisplayLanguage();
        int int77 = dateTimeField69.getMaximumShortTextLength(locale71);
        java.lang.String str78 = locale71.getScript();
        java.lang.String str79 = locale71.getVariant();
        boolean boolean80 = property39.equals((java.lang.Object) str79);
        boolean boolean81 = strSet30.remove((java.lang.Object) property39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[de-DE, +00:00, Deutsch, 0, 15, 2022-02-21T07:15:50.993, Heure de Greenwich, 7, DateTimeField[hourOfHalfday], 2022-02-22T00:00:00.101Z, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[de-DE, +00:00, Deutsch, 0, 15, 2022-02-21T07:15:50.993, Heure de Greenwich, 7, DateTimeField[hourOfHalfday], 2022-02-22T00:00:00.101Z, ]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26388 + "'", int56 == 26388);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(gJChronology58);
        org.junit.Assert.assertNotNull(gJChronology62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str63, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(nameProvider70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Deutsch" + "'", str76, "Deutsch");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        java.util.Locale locale3 = new java.util.Locale("2093-09-24T07:17:35.602Z", "German (Germany)", "2022-02-21T07:18:41.882");
        org.junit.Assert.assertEquals(locale3.toString(), "2093-09-24t07:17:35.602z_GERMAN (GERMANY)_2022-02-21T07:18:41.882");
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfWeek();
        long long11 = gJChronology3.add((-166150900L), (long) 26160, 4);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.year();
        long long14 = dateTimeField12.roundHalfEven(827080787767449L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-166046260L) + "'", long11 == (-166046260L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 827076182400000L + "'", long14 == 827076182400000L);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekyear(26149);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths(1970);
        org.joda.time.DateTime dateTime16 = dateTime7.withDurationAdded(26395200000L, (-627528));
        java.lang.String str17 = dateTime7.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime7.withPeriodAdded(readablePeriod18, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime7.withDayOfWeek(26189733);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26189733 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str17, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        java.lang.StringBuffer stringBuffer5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.yearOfEra();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.LocalDateTime localDateTime20 = property17.addToCopy((long) 26150);
        org.joda.time.LocalDateTime localDateTime22 = property17.addToCopy(1970);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        int int25 = localDateTime24.size();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer5, (org.joda.time.ReadablePartial) localDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.year();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = gJChronology3.getDateTimeMillis((-733157567981997907L), 26324437, 26324271, 26176970, 498);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26324437 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        java.util.Locale locale1 = new java.util.Locale("centuries");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = locale1.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "centuries");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "centuries");
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMaximumValue();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale22.getDisplayScript();
        java.lang.String str25 = locale22.toLanguageTag();
        java.lang.String str26 = locale22.getLanguage();
        java.lang.String str27 = locale22.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = property18.setCopy("2011-06-01T05:00:02.030", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2011-06-01T05:00:02.030\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de-DE" + "'", str25, "de-DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "de" + "'", str26, "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        boolean boolean14 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        int[] intArray16 = new int[] {};
        int[] intArray18 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime9, (int) (byte) 100, intArray16, (int) (short) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.plusWeeks(7);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDateTime localDateTime25 = property22.addWrapFieldToCopy(192);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        int int30 = property28.getLeapAmount();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        int int11 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime.Property property13 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay(144);
        org.joda.time.Chronology chronology17 = localDateTime14.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.centuryOfEra();
        org.joda.time.DurationField durationField19 = durationFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.year();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime6, (org.joda.time.Chronology) gJChronology11);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = gJChronology11.get(readablePeriod23, 0L, 43067429237495646L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        long long14 = dateTimeZone7.adjustOffset((long) 26214, false);
        int int16 = dateTimeZone7.getStandardOffset(18026209L);
        long long18 = dateTimeZone7.convertUTCToLocal((long) 218);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 26214L + "'", long14 == 26214L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 218L + "'", long18 == 218L);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        boolean boolean5 = dateTime2.isEqual(36026149L);
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfCentury();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        java.lang.String str13 = locale11.getScript();
        java.util.Locale.setDefault(category8, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category8);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category8, locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property6.setCopy("26257", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26257 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime2.withMillis((-86399998L));
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(2);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        long long24 = gJChronology18.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        boolean boolean29 = gJChronology18.equals((java.lang.Object) dateTimeFormatter27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str31 = dateTimeZone30.getID();
        boolean boolean32 = dateTimeZone30.isFixed();
        long long34 = dateTimeZone30.convertUTCToLocal((long) (byte) 0);
        int int36 = dateTimeZone30.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = property40.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.minusHours(10);
        boolean boolean47 = dateTimeZone30.equals((java.lang.Object) localDateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter27.withZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime14.toMutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setDayOfYear(1898);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1898 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26388 + "'", int7 == 26388);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 763106140800035L + "'", long24 == 763106140800035L);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.withWeekyear(26153);
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        int int12 = dateTime10.getDayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.withChronology(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight19 = dateTime18.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26388 + "'", int7 == 26388);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.nextTransition((long) '#');
        java.lang.String str5 = dateTimeZone1.getNameKey(0L);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(605893478426174L, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 35L + "'", long3 == 35L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DurationField durationField10 = gJChronology3.weekyears();
        org.joda.time.DurationField durationField11 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = gJChronology3.getDateTimeMillis(1645514265104L, 1970, 26278, 26236, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 'x');
        org.joda.time.Chronology chronology19 = gJChronology3.withZone(dateTimeZone16);
        java.util.TimeZone timeZone20 = dateTimeZone16.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = timeZone20.getOffset(26286298, 179, 26227, 0, 1898, 26164);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 26286298");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 120L + "'", long18 == 120L);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear(218);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime6.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYearOfEra(59);
        java.lang.String[] strArray29 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        int int32 = strSet30.size();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        int int38 = localDateTime36.get(dateTimeFieldType37);
        boolean boolean39 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        boolean boolean40 = strSet30.equals((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime.Property property41 = localDateTime34.hourOfDay();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = property41.getAsText(locale42);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        int int48 = property41.getMaximumShortTextLength(locale45);
        java.lang.String str49 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale45);
        int int50 = dateTimeField6.getMaximumValue();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "7" + "'", str43, "7");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u6cd5\u6587" + "'", str46, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-TW" + "'", str47, "zh-TW");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        java.util.Date date8 = localDateTime5.toDate();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withPeriodAdded(readablePeriod9, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        java.lang.String str22 = dateTimeZone21.getID();
        long long25 = dateTimeZone21.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.monthOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        int int34 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = instant33.plus((long) 2000);
        org.joda.time.Instant instant38 = instant33.withMillis(825908572826157L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime43 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime45 = property42.addToCopy((long) 2);
        boolean boolean46 = instant38.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType47.getField((org.joda.time.Chronology) gJChronology52);
        int int61 = instant38.get(dateTimeFieldType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = localDateTime5.withField(dateTimeFieldType47, 44274548);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44274548 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T07:19:49.177" + "'", str6, "2022-02-21T07:19:49.177");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 07:19:49 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(gJChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(gJChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str30, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(gJChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime21 = property17.addWrapField(688);
        int int22 = mutableDateTime21.getYearOfEra();
        mutableDateTime21.addMillis(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26389 + "'", int13 == 26389);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.dayOfWeek();
        long long11 = gJChronology3.add((-166150900L), (long) 26160, 4);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.year();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology3.dayOfYear();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-166046260L) + "'", long11 == (-166046260L));
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        boolean boolean7 = mutableDateTime1.isEqual((long) 7);
        mutableDateTime1.setHourOfDay(7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = durationFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.setChronology((org.joda.time.Chronology) gJChronology14);
        mutableDateTime1.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTimeISO();
        int int26 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime28.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime29.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.withPeriodAdded(readablePeriod31, 0);
        int int34 = dateTime29.getSecondOfDay();
        mutableDateTime24.setDate((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime24.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.era();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = mutableDateTime42.toDateTimeISO();
        int int44 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = mutableDateTime46.toDateTimeISO();
        org.joda.time.DateTime.Property property48 = dateTime47.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime51 = dateTime47.withPeriodAdded(readablePeriod49, 0);
        int int52 = dateTime47.getSecondOfDay();
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime47);
        mutableDateTime42.setMillisOfDay((int) 'a');
        boolean boolean56 = mutableDateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime42.setDayOfYear((int) (short) 10);
        int int59 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.Instant instant60 = mutableDateTime42.toInstant();
        org.joda.time.Instant instant62 = instant60.withMillis((long) 18000100);
        org.joda.time.Instant instant64 = instant60.minus((long) 26175);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) instant60);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant60.minus(readableDuration66);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26389 + "'", int34 == 26389);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 26389 + "'", int52 == 26389);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant67);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Instant instant15 = dateTime8.toInstant();
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = instant15.toMutableDateTime();
        mutableDateTime17.setTime(951203867658L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setMonthOfYear(75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26389 + "'", int13 == 26389);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.add(0);
        org.joda.time.MutableDateTime mutableDateTime11 = property5.addWrapField(26163);
        mutableDateTime11.setTime(1645427818558L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.hourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology3.centuries();
        long long13 = durationField10.subtract((long) 26296, 26165L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-82570427740773704L) + "'", long13 == (-82570427740773704L));
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getYearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.minusYears(22);
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime.Property property7 = dateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTime dateTime8 = dateTime2.withWeekyear(26297);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 26297);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, (org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DurationField durationField10 = gJChronology9.seconds();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = gJChronology9.get(readablePeriod13, (long) 26313);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        mutableDateTime5.addYears(26165);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDateTime(26288, 26264, 999, 26388, 38088, 0, 26280643);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26388 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.addDays(26147);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime3.add(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        long long25 = dateTimeZone23.nextTransition((long) 26149);
        long long29 = dateTimeZone23.convertLocalToUTC((long) 2000, false, (long) 26154);
        long long32 = dateTimeZone23.adjustOffset((long) 26229, false);
        mutableDateTime3.setZone(dateTimeZone23);
        boolean boolean34 = dateTimeZone23.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26389 + "'", int13 == 26389);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 26149L + "'", long25 == 26149L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2000L + "'", long29 == 2000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 26229L + "'", long32 == 26229L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        java.lang.String str9 = dateTimeField7.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        boolean boolean16 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone24.getShortName((long) 2022, locale26);
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 295, locale26);
        java.util.Locale.setDefault(category0, locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.yearOfEra();
        org.joda.time.DurationField durationField36 = gJChronology33.halfdays();
        org.joda.time.DurationField durationField37 = gJChronology33.centuries();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology33.getZone();
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = dateTimeZone38.getName(24L, locale40);
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale44 = new java.util.Locale("10");
        java.util.Locale.setDefault(category0, locale44);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str9, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "295" + "'", str28, "295");
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals(locale44.toString(), "10");
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        mutableDateTime1.addDays(22);
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField8 = gJChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology4.getDateTimeMillis(44341358, 26183, 0, (-1988));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1988 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.setWeekyear((int) (short) 0);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime3.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.era();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime21.add(readableDuration23, 26164);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        java.lang.String str49 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField53 = gJChronology48.seconds();
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) gJChronology48);
        org.joda.time.DateTimeField dateTimeField55 = gJChronology48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime59 = property57.setCopy(9);
        int int60 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        int int62 = dateTimeField55.getLeapAmount(0L);
        mutableDateTime21.setRounding(dateTimeField55);
        int int64 = mutableDateTime21.getMinuteOfDay();
        int int65 = mutableDateTime21.getMillisOfDay();
        int int66 = mutableDateTime21.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26389 + "'", int13 == 26389);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26389 + "'", int42 == 26389);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(gJChronology44);
        org.junit.Assert.assertNotNull(gJChronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str49, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime2.minusMonths(16);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((-1L), 244);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay(9);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(344);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 344 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = gJChronology11.seconds();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.joda.time.DateTime dateTime19 = dateTime5.withFieldAdded(durationFieldType17, 18000100);
        boolean boolean21 = dateTime19.isAfter((long) 26385);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gJChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str12, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(277, 393, 26355, 26324271, 738);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26324271 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("UTC");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.era();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology6.millisOfSecond();
        org.joda.time.DurationField durationField11 = gJChronology6.years();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.secondOfMinute();
        boolean boolean14 = strSet2.contains((java.lang.Object) dateTimeField13);
        int int16 = dateTimeField13.getLeapAmount((long) 26332);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.yearOfEra();
        org.joda.time.DurationField durationField14 = gJChronology11.halfdays();
        org.joda.time.DurationField durationField15 = gJChronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology11.centuryOfEra();
        org.joda.time.DurationField durationField19 = durationFieldType7.getField((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.year();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime6, (org.joda.time.Chronology) gJChronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime6.withMinuteOfHour(180);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 180 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add(3600001L);
        mutableDateTime4.addHours(26241);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setWeekOfWeekyear(26367287);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26367287 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfHour();
        long long9 = dateTimeField7.roundCeiling((long) 26220);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 60000L + "'", long9 == 60000L);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfSecond();
        org.joda.time.DurationField durationField8 = gJChronology3.years();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.dayOfMonth();
        org.joda.time.DurationField durationField12 = gJChronology3.eras();
        boolean boolean13 = durationField12.isSupported();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.withYearOfCentury(51);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readablePeriod22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime21.withDate(948, 1046607, 26151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1046607 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26390 + "'", int16 == 26390);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = property18.getAsShortText(locale21);
        java.lang.String str25 = property11.getAsText(locale21);
        org.joda.time.DateTime dateTime26 = property11.roundHalfFloorCopy();
        int int27 = dateTime26.getMillisOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7" + "'", str24, "7");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21" + "'", str25, "21");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(26344, 729, 192, 716, 14025312, 26325, 999, (org.joda.time.Chronology) gJChronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 716 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        int int6 = dateTimeFormatter3.getDefaultYear();
        int int7 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withDefaultYear(8);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = property14.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology21.getZone();
        org.joda.time.DurationField durationField24 = gJChronology21.weekyears();
        boolean boolean25 = dateTime17.equals((java.lang.Object) gJChronology21);
        boolean boolean26 = dateTime17.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime17.toMutableDateTime();
        boolean boolean28 = mutableDateTime27.isAfterNow();
        int int29 = mutableDateTime27.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = dateTimeFormatter9.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime27, "2022-02-21T07:18:22.285", (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        java.util.Date date4 = localDateTime0.toDate();
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDateTime7.getField(26224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26224");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:19:50 GMT 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        long long16 = gJChronology10.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean17 = durationFieldType6.isSupported((org.joda.time.Chronology) gJChronology10);
        org.joda.time.DurationField durationField18 = gJChronology10.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology10.hours();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = gJChronology10.add(readablePeriod21, (long) 26319, 18002547);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(26177, 714, 28, 114, 19, (int) (byte) 0, (org.joda.time.Chronology) gJChronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 114 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 763106140800035L + "'", long16 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 26319L + "'", long24 == 26319L);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        long long13 = gJChronology3.add((long) 26149, 36000000L, (int) (short) 1);
        org.joda.time.DurationField durationField14 = gJChronology3.days();
        org.joda.time.DurationField durationField15 = gJChronology3.months();
        long long18 = durationField15.subtract(1645514375869L, (long) 438);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36026149L + "'", long13 == 36026149L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 493543175869L + "'", long18 == 493543175869L);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = property18.getAsShortText(locale21);
        java.lang.String str25 = property11.getAsText(locale21);
        org.joda.time.DateTime dateTime27 = property11.setCopy(26148);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        mutableDateTime28.addSeconds(26176);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = gJChronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.yearOfCentury();
        org.joda.time.DurationField durationField38 = gJChronology34.days();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.centuryOfEra();
        mutableDateTime28.setRounding(dateTimeField40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime28.minuteOfHour();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime28.dayOfYear();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7" + "'", str24, "7");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21" + "'", str25, "21");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(1970);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.clockhourOfHalfday();
        long long9 = dateTimeField6.addWrapField((long) (short) 1, (int) (short) 1);
        org.joda.time.DurationField durationField10 = dateTimeField6.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        int int19 = dateTimeField18.getMaximumValue();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = dateTimeField18.getAsShortText(20192L, locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = mutableDateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime41.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.withPeriodAdded(readablePeriod43, 0);
        int int46 = dateTime41.getSecondOfDay();
        org.joda.time.DateTime.Property property47 = dateTime41.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50, (int) (short) 1);
        java.lang.String str53 = gJChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.era();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology52.minuteOfDay();
        org.joda.time.DurationField durationField57 = gJChronology52.seconds();
        boolean boolean58 = dateTimeZone37.equals((java.lang.Object) gJChronology52);
        org.joda.time.DateTimeField dateTimeField59 = gJChronology52.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider60 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale61);
        java.lang.String str65 = nameProvider60.getName(locale61, "secondOfMinute", "Etc/UTC");
        java.lang.String str66 = locale61.getDisplayLanguage();
        int int67 = dateTimeField59.getMaximumShortTextLength(locale61);
        java.lang.String str68 = locale61.getScript();
        java.lang.String str69 = locale61.getVariant();
        int int70 = property29.getMaximumTextLength(locale61);
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale72);
        java.lang.String str76 = nameProvider71.getName(locale72, "secondOfMinute", "Etc/UTC");
        java.lang.String str77 = locale72.getDisplayLanguage();
        java.lang.String str78 = property29.getAsText(locale72);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime81 = mutableDateTime80.toDateTimeISO();
        org.joda.time.DateTime.Property property82 = dateTime81.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime81.withPeriodAdded(readablePeriod83, 0);
        int int86 = dateTime81.getSecondOfDay();
        org.joda.time.DateTime.Property property87 = dateTime81.minuteOfHour();
        java.util.Locale locale88 = java.util.Locale.FRANCE;
        int int89 = property87.getMaximumTextLength(locale88);
        java.lang.String str90 = locale72.getDisplayScript(locale88);
        java.lang.String str91 = locale21.getDisplayVariant(locale88);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = dateTimeField6.set(2L, "2022-02-21T12:17:52.515", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T12:17:52.515\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600001L + "'", long9 == 3600001L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 26390 + "'", int46 == 26390);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(gJChronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str53, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(nameProvider60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Deutsch" + "'", str66, "Deutsch");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Deutsch" + "'", str77, "Deutsch");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "7" + "'", str78, "7");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 26390 + "'", int86 == 26390);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField7 = gJChronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        java.lang.String str11 = dateTimeZone10.getID();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.monthOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime1.toMutableDateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.yearOfCentury();
        int int29 = property28.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(gJChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(gJChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str19, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.addYears(4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26334022");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField3 = localDateTime1.getField((-62750278));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -62750278");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29, (int) (short) 1);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.era();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.minuteOfDay();
        org.joda.time.DurationField durationField36 = gJChronology31.seconds();
        boolean boolean37 = dateTimeZone16.equals((java.lang.Object) gJChronology31);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale41);
        java.lang.String str45 = nameProvider40.getName(locale41, "secondOfMinute", "Etc/UTC");
        java.lang.String str46 = locale41.getDisplayLanguage();
        java.lang.String str47 = dateTimeField38.getAsText(4528800000L, locale41);
        boolean boolean48 = locale41.hasExtensions();
        boolean boolean49 = gJChronology3.equals((java.lang.Object) locale41);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = gJChronology3.getDateTimeMillis(26161, 26204, 585, 26375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26204 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26390 + "'", int25 == 26390);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(gJChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str32, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Deutsch" + "'", str46, "Deutsch");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset((int) (short) 10);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId7 = timeZone1.toZoneId();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId9 = timeZone1.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId12 = timeZone11.toZoneId();
        java.lang.String str13 = timeZone11.getID();
        timeZone11.setRawOffset((int) (short) 10);
        boolean boolean16 = timeZone11.observesDaylightTime();
        java.time.ZoneId zoneId17 = timeZone11.toZoneId();
        java.util.TimeZone.setDefault(timeZone11);
        java.time.ZoneId zoneId19 = timeZone11.toZoneId();
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean21 = timeZone1.hasSameRules(timeZone11);
        int int23 = timeZone11.getOffset((long) 26239);
        java.lang.String str24 = timeZone11.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = timeZone11.getDisplayName(true, 26381);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26381");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT" + "'", str13, "GMT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusHours((-627528));
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay((int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        java.lang.String str21 = gJChronology20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DurationField durationField23 = gJChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField24.getType();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        boolean boolean27 = localDateTime16.isSupported(dateTimeFieldType25);
        boolean boolean28 = localDateTime0.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(gJChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str21, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.months();
        org.joda.time.DurationField durationField7 = gJChronology3.minutes();
        java.lang.String str8 = durationField7.getName();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "minutes" + "'", str8, "minutes");
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.Chronology chronology38 = dateTimeFormatter37.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTimeFormatter39.parseDateTime("2025-02-16T23:17:18.325Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26391 + "'", int22 == 26391);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        int int6 = dateTimeFormatter3.getDefaultYear();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear(70);
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withPivotYear(26158);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = dateTimeFormatter13.parseMutableDateTime("Februar");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(26163);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.lang.String str13 = dateTime7.toString("17", locale10);
        org.joda.time.DateTime dateTime14 = dateTime7.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutsch" + "'", str12, "Deutsch");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17" + "'", str13, "17");
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        mutableDateTime3.addMonths(26149);
        mutableDateTime3.setWeekOfWeekyear(22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDateTime(1046607, 26330, 567, 26314, 0, 131, 348479);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26314 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfDay(26160);
        int[] intArray10 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withSecondOfMinute(26345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26345 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T07:19:51.295" + "'", str6, "2022-02-21T07:19:51.295");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 26391295]");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.yearOfEra();
        org.joda.time.DurationField durationField25 = gJChronology22.halfdays();
        boolean boolean26 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) gJChronology22);
        int int27 = localDateTime17.get(dateTimeFieldType18);
        int int28 = localDateTime10.get(dateTimeFieldType18);
        int int29 = localDateTime10.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int31 = localDateTime10.get(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime10.withDate(26268, 26203, 26290);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26203 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DurationField durationField9 = gJChronology3.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = gJChronology3.getDateTimeMillis(26199, 949, 26249, 479);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 949 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        boolean boolean15 = dateTime6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime6.toMutableDateTime();
        org.joda.time.LocalTime localTime17 = dateTime6.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        long long27 = gJChronology21.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTime dateTime28 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology21);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(26165);
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours(26324271);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 763106140800035L + "'", long27 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField9 = gJChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.weekOfWeekyear();
        long long14 = dateTimeField11.getDifferenceAsLong((long) 26304, (long) 26235);
        int int17 = dateTimeField11.getDifference(100802000L, 4536963757L);
        int int18 = dateTimeField11.getMinimumValue();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-7) + "'", int17 == (-7));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        mutableDateTime4.setHourOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(26244);
        mutableDateTime9.add((long) 26265);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T12:16:47.591");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.withYearOfCentury(51);
        org.joda.time.DateTime.Property property21 = dateTime11.yearOfEra();
        java.lang.String str22 = property21.getName();
        int int23 = property21.getLeapAmount();
        org.joda.time.DateTime dateTime25 = property21.addToCopy(26256);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(5516803554595200295L, 26177);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 5516803554595200295 * 26177");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26391 + "'", int16 == 26391);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "yearOfEra" + "'", str22, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology4.seconds();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 26185, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime17.getZone();
        org.joda.time.Chronology chronology21 = gJChronology4.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = gJChronology4.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = gJChronology4.getDateTimeMillis((long) 739, 26269, 26191, (-292275054), 26245);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26269 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology4.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = instant0.toMutableDateTime(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setTime(26176, (int) ' ', (-292269055), 276);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26176 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime23.add(readableDuration40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.withMillisOfDay(611);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime44.withSecondOfMinute(44341993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44341993 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26391 + "'", int13 == 26391);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T00:00:00.101Z" + "'", str19, "2022-02-22T00:00:00.101Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26391 + "'", int33 == 26391);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        int int15 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        boolean boolean25 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(26151);
        boolean boolean32 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.minusYears(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.plusMillis((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = localDateTime29.toString("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap7);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        boolean boolean15 = strSet13.remove((java.lang.Object) 2922790L);
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet13);
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList8, (java.util.Collection<java.lang.String>) strSet11);
        java.lang.String[] strArray32 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        int int35 = strSet33.size();
        java.lang.String[] strArray50 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        int int53 = strSet51.size();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55, (int) (short) 1);
        java.lang.String str58 = gJChronology57.toString();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        int int65 = localDateTime63.get(dateTimeFieldType64);
        boolean boolean66 = localDateTime61.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.withDayOfWeek(5);
        int int69 = localDateTime63.getYear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime63.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime72 = dateTime59.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.DateTime.Property property73 = dateTime59.yearOfCentury();
        java.lang.String str74 = property73.getName();
        boolean boolean75 = strSet51.contains((java.lang.Object) property73);
        boolean boolean76 = strSet33.addAll((java.util.Collection<java.lang.String>) strSet51);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField81 = gJChronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology80.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology80.clockhourOfHalfday();
        java.lang.String str84 = gJChronology80.toString();
        boolean boolean85 = strSet33.equals((java.lang.Object) str84);
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator88 = strSet87.spliterator();
        java.lang.Object[] objArray89 = strSet87.toArray();
        boolean boolean90 = strSet33.retainAll((java.util.Collection<java.lang.String>) strSet87);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap92 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap92);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap94 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList95 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap94);
        java.util.Collection<java.lang.String> strCollection96 = null;
        java.lang.String str97 = java.util.Locale.lookupTag(languageRangeList8, strCollection96);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(gJChronology57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str58, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "yearOfCentury" + "'", str74, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(gJChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str84, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(languageRangeList93);
        org.junit.Assert.assertNotNull(languageRangeList95);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.seconds();
        long long11 = durationField8.subtract((long) 26150, 0);
        long long14 = durationField8.add(26169L, 1052223199200000L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 26150L + "'", long11 == 26150L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1052223199200026169L + "'", long14 == 1052223199200026169L);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology3.days();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15, (int) (short) 1);
        java.lang.String str18 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.centuryOfEra();
        org.joda.time.DurationField durationField23 = gJChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = gJChronology17.days();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        int int32 = localDateTime30.get(dateTimeFieldType31);
        boolean boolean33 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(26151);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withSecondOfMinute(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.yearOfEra();
        org.joda.time.DurationField durationField52 = gJChronology49.halfdays();
        boolean boolean53 = dateTimeFieldType45.isSupported((org.joda.time.Chronology) gJChronology49);
        int int54 = localDateTime44.get(dateTimeFieldType45);
        int int55 = localDateTime37.get(dateTimeFieldType45);
        int int56 = localDateTime37.getDayOfMonth();
        int[] intArray58 = gJChronology17.get((org.joda.time.ReadablePartial) localDateTime37, (long) 26228);
        long long60 = gJChronology3.set((org.joda.time.ReadablePartial) localDateTime37, (long) 17);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology3.era();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(gJChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str18, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(gJChronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20 + "'", int54 == 20);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 26228]");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514391754L + "'", long60 == 1645514391754L);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((-2179), 18000000, 26179, 26, 117, 0, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 'x');
        org.joda.time.Chronology chronology19 = gJChronology3.withZone(dateTimeZone16);
        java.util.TimeZone timeZone20 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.DateTime dateTime24 = dateTime21.minusYears(2051);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 120L + "'", long18 == 120L);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str51 = nameProvider46.getName(locale47, "secondOfMinute", "Etc/UTC");
        java.lang.String str52 = locale47.getDisplayLanguage();
        int int53 = dateTimeField45.getMaximumShortTextLength(locale47);
        java.lang.String str54 = locale47.getCountry();
        java.lang.String str55 = dateTimeField14.getAsText(26217, locale47);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 763106140800035L + "'", long10 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26391 + "'", int32 == 26391);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str39, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Deutsch" + "'", str52, "Deutsch");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DE" + "'", str54, "DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "26217" + "'", str55, "26217");
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay(0);
        int int14 = localDateTime13.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(26147);
        int int26 = localDateTime23.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.dayOfYear();
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.minusMinutes(26168);
        int int32 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime13.plusSeconds(26212);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusYears(26248);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.withPeriodAdded(readablePeriod41, 0);
        org.joda.time.DateTime.Property property44 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = property44.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusDays((int) (short) -1);
        java.lang.String str53 = localDateTime52.toString();
        org.joda.time.Chronology chronology54 = localDateTime52.getChronology();
        java.util.Date date55 = localDateTime52.toDate();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withPeriodAdded(readablePeriod56, (int) (byte) -1);
        java.lang.Object obj59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(obj59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.withField(dateTimeFieldType62, 523);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType62.getDurationType();
        org.joda.time.DateTime dateTime67 = dateTime46.withFieldAdded(durationFieldType65, 653);
        boolean boolean68 = localDateTime34.isSupported(durationFieldType65);
        java.lang.String str69 = durationFieldType65.toString();
        java.lang.String str70 = durationFieldType65.toString();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-21T07:19:51.889" + "'", str53, "2022-02-21T07:19:51.889");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Mon Feb 21 07:19:52 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "millis" + "'", str69, "millis");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "millis" + "'", str70, "millis");
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withPeriodAdded(readablePeriod19, 0);
        int int22 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime.Property property23 = dateTime17.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26, (int) (short) 1);
        java.lang.String str29 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.minuteOfDay();
        org.joda.time.DurationField durationField33 = gJChronology28.seconds();
        boolean boolean34 = dateTimeZone13.equals((java.lang.Object) gJChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withChronology((org.joda.time.Chronology) gJChronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = dateTimeFormatter3.parseLocalTime("1970-01-01T00:00:00.101Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26391 + "'", int22 == 26391);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(gJChronology28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str29, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1970-01-01T00:00:00.000");
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(26299);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26299 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.yearOfCentury();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.Instant instant10 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = gJChronology3.get(readablePeriod13, (long) 26277, 4032L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        java.util.Locale locale3 = new java.util.Locale("+32:51", "1970-01-01T00:00:00.000", "1");
        org.junit.Assert.assertEquals(locale3.toString(), "+32:51_1970-01-01T00:00:00.000_1");
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology4.getZone();
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22, 26392041]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(gJChronology53);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1647933402096L);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime4 = dateTime1.withYearOfEra(639);
        org.joda.time.DateTime dateTime6 = dateTime1.minus(1645514374294L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (-26165));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -26165");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.DateTime dateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology38.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str51 = nameProvider46.getName(locale47, "secondOfMinute", "Etc/UTC");
        java.lang.String str52 = locale47.getDisplayLanguage();
        int int53 = dateTimeField45.getMaximumShortTextLength(locale47);
        java.lang.String str54 = locale47.getScript();
        java.lang.String str55 = locale47.getVariant();
        int int56 = property15.getMaximumTextLength(locale47);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale58);
        java.lang.String str62 = nameProvider57.getName(locale58, "secondOfMinute", "Etc/UTC");
        java.lang.String str63 = locale58.getDisplayLanguage();
        java.lang.String str64 = property15.getAsText(locale58);
        java.lang.String str65 = property7.getAsText(locale58);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7" + "'", str8, "7");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26392 + "'", int32 == 26392);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str39, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Deutsch" + "'", str52, "Deutsch");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Deutsch" + "'", str63, "Deutsch");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gJChronology3.add(readablePeriod11, (long) 26161, 26165);
        org.joda.time.Chronology chronology15 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology15.getDateTimeMillis(347, 2013, 26337, 26182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2013 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 26161L + "'", long14 == 26161L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.monthOfYear();
        org.joda.time.Instant instant10 = gJChronology6.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.yearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTime dateTime13 = dateTime12.withLaterOffsetAtOverlap();
        boolean boolean14 = locale0.equals((java.lang.Object) dateTime13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italienisch (Italien)" + "'", str1, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        int int3 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMinutes((int) (short) 0);
        org.joda.time.DateTime.Property property6 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(31172400000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 253 + "'", int3 == 253);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.minuteOfHour();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.era();
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        int int8 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(26271);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        long long7 = dateTimeZone1.convertUTCToLocal(20000L);
        long long11 = dateTimeZone1.convertLocalToUTC((long) 24, true, 1830550L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        mutableDateTime16.setHourOfDay(2);
        mutableDateTime16.addMonths(2922790);
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.getID();
        boolean boolean25 = dateTimeZone23.isFixed();
        long long27 = dateTimeZone23.convertUTCToLocal((long) (byte) 0);
        int int29 = dateTimeZone23.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone23);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId33 = timeZone32.toZoneId();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone(zoneId33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDateTime30.toDateTime(dateTimeZone35);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone35, 951236172466L);
        long long44 = dateTimeZone35.convertLocalToUTC(2265235200000L, false, (long) 26167);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) 43067429237495646L, dateTimeZone35);
        boolean boolean47 = dateTimeZone35.isStandardOffset((long) 26199);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 20000L + "'", long7 == 20000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 24L + "'", long11 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 951236172466L + "'", long40 == 951236172466L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2265235200000L + "'", long44 == 2265235200000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('4', "2022-02-21T07:18:07.608");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology3.minuteOfDay();
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        int int7 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime2.minusDays((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(26227);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.plus((long) 26204);
        boolean boolean27 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime26.withEra(26153);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26153 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26392 + "'", int7 == 26392);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 765824138392414L + "'", long15 == 765824138392414L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusSeconds((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTime dateTime22 = dateTime19.withEra(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int24 = dateTime19.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.property(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime16.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType28.getField((org.joda.time.Chronology) gJChronology32);
        int int39 = dateTimeField37.getMaximumValue(0L);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale40.getDisplayScript();
        java.lang.String str43 = locale40.toLanguageTag();
        int int44 = dateTimeField37.getMaximumTextLength(locale40);
        java.lang.String str45 = locale40.getDisplayCountry();
        java.lang.String str46 = locale40.getISO3Country();
        java.lang.String str47 = locale40.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = property26.setCopy("\u5fb7\u6587\u5fb7\u56fd)", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (??)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de-DE" + "'", str43, "de-DE");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Deutschland" + "'", str45, "Deutschland");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DEU" + "'", str46, "DEU");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DE" + "'", str47, "DE");
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("Deutsch");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder8 = builder4.removeUnicodeLocaleAttribute("26155");
        java.util.Locale.Builder builder10 = builder8.setVariant("hours");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setExtension('x', "0000-02-22T00:00:00.097Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T00:00:00.097Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime5.getZone();
        org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute((int) '#');
        org.joda.time.DateTime.Property property11 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy(7);
        int int14 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        java.lang.String str27 = gJChronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.era();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime20.toMutableDateTime((org.joda.time.Chronology) gJChronology26);
        int int31 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property32 = dateTime20.centuryOfEra();
        org.joda.time.DateTime.Property property33 = dateTime20.monthOfYear();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(gJChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str19, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gJChronology26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str27, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        java.util.Locale locale2 = new java.util.Locale("zh_CN", "26161757");
        java.lang.String str3 = locale2.getScript();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType4.getField((org.joda.time.Chronology) gJChronology8);
        int int15 = dateTimeField13.getMaximumValue(0L);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.lang.String str19 = locale16.toLanguageTag();
        int int20 = dateTimeField13.getMaximumTextLength(locale16);
        java.lang.String str21 = locale16.getDisplayCountry();
        java.lang.String str22 = locale16.getISO3Country();
        java.lang.String str23 = locale2.getDisplayCountry(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 26161757");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "zh_cn_26161757");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(gJChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de-DE" + "'", str19, "de-DE");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Deutschland" + "'", str21, "Deutschland");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DEU" + "'", str22, "DEU");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "26161757" + "'", str23, "26161757");
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3, (int) (short) 1);
        java.lang.String str6 = gJChronology5.toString();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology5);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11, (int) (short) 1);
        java.lang.String str14 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.era();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime7.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DurationField durationField18 = durationFieldType1.getField((org.joda.time.Chronology) gJChronology13);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) 2L, (org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime19.getRoundingField();
        mutableDateTime19.addYears(26348);
        mutableDateTime19.addDays(833);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(gJChronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str6, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gJChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str14, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNull(dateTimeField20);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        int int3 = timeZone0.getOffset(4518997260L);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId6 = timeZone5.toZoneId();
        java.lang.String str7 = timeZone5.getID();
        timeZone5.setRawOffset((int) (short) 10);
        java.time.ZoneId zoneId10 = timeZone5.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId10);
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        boolean boolean14 = timeZone0.hasSameRules(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        timeZone12.setRawOffset(228);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology10.getZone();
        org.joda.time.DurationField durationField13 = gJChronology10.weekyears();
        boolean boolean14 = dateTime6.equals((java.lang.Object) gJChronology10);
        org.joda.time.DurationField durationField15 = gJChronology10.days();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology10.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime34.toDateTimeISO();
        int int36 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime39.withPeriodAdded(readablePeriod41, 0);
        int int44 = dateTime39.getSecondOfDay();
        mutableDateTime34.setDate((org.joda.time.ReadableInstant) dateTime39);
        mutableDateTime34.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime34.era();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = mutableDateTime52.toDateTimeISO();
        int int54 = mutableDateTime50.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = mutableDateTime56.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime57.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime61 = dateTime57.withPeriodAdded(readablePeriod59, 0);
        int int62 = dateTime57.getSecondOfDay();
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) dateTime57);
        mutableDateTime52.setMillisOfDay((int) 'a');
        boolean boolean66 = mutableDateTime34.isAfter((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateTime dateTime67 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        boolean boolean68 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField73 = gJChronology72.millisOfDay();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone76 = gJChronology72.getZone();
        java.lang.String str77 = dateTimeZone76.getID();
        long long80 = dateTimeZone76.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, readableInstant82, (int) (short) 1);
        java.lang.String str85 = gJChronology84.toString();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology84.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = gJChronology84.monthOfYear();
        org.joda.time.Instant instant88 = gJChronology84.getGregorianCutover();
        int int89 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) instant88);
        long long91 = dateTimeZone76.nextTransition((long) (-1));
        boolean boolean92 = localDateTime28.equals((java.lang.Object) long91);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime28.minusMonths(60);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime28.withYearOfEra(18000000);
        int int97 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime96);
        org.joda.time.LocalDateTime.Property property98 = localDateTime96.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 26392 + "'", int44 == 26392);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 26392 + "'", int62 == 26392);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(gJChronology84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str85, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        java.lang.String[] strArray14 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        int int17 = strSet15.size();
        java.lang.String[] strArray32 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        int int35 = strSet33.size();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        java.lang.String str40 = gJChronology39.toString();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime45.get(dateTimeFieldType46);
        boolean boolean48 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withDayOfWeek(5);
        int int51 = localDateTime45.getYear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime41.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTime.Property property55 = dateTime41.yearOfCentury();
        java.lang.String str56 = property55.getName();
        boolean boolean57 = strSet33.contains((java.lang.Object) property55);
        boolean boolean58 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField63 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.clockhourOfHalfday();
        java.lang.String str66 = gJChronology62.toString();
        boolean boolean67 = strSet15.equals((java.lang.Object) str66);
        int int68 = strSet15.size();
        java.lang.Object[] objArray69 = strSet15.toArray();
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(gJChronology39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str40, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "yearOfCentury" + "'", str56, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(gJChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str66, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[de-DE, +00:00, Deutsch, 0, 15, 2022-02-21T07:15:50.993, Heure de Greenwich, 7, DateTimeField[hourOfHalfday], 2022-02-22T00:00:00.101Z, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[de-DE, +00:00, Deutsch, 0, 15, 2022-02-21T07:15:50.993, Heure de Greenwich, 7, DateTimeField[hourOfHalfday], 2022-02-22T00:00:00.101Z, ]");
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusHours(10);
        boolean boolean18 = dateTimeZone1.equals((java.lang.Object) localDateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 44219160, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Chronology chronology37 = gJChronology24.withZone(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC(4518960813L, true, 0L);
        long long44 = dateTimeZone36.adjustOffset(0L, false);
        org.joda.time.DateTime dateTime45 = dateTime19.withZoneRetainFields(dateTimeZone36);
        long long48 = dateTimeZone36.adjustOffset((long) 26180, false);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4518960813L + "'", long41 == 4518960813L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 26180L + "'", long48 == 26180L);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(26155);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plus(readableDuration12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField(26296);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26296");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = gJChronology4.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField8 = gJChronology4.minutes();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 2030, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField10 = gJChronology4.months();
        long long13 = durationField10.getMillis(948, 166151L);
        long long16 = durationField10.getMillis((-292269055), (long) 806);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2493072000000L + "'", long13 == 2493072000000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-768593378448000000L) + "'", long16 == (-768593378448000000L));
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        long long9 = gJChronology3.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) gJChronology3);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.secondOfDay();
        mutableDateTime10.setYear(26294);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 763106140800035L + "'", long9 == 763106140800035L);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(26276);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("hi!");
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone(zoneId13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long18 = dateTimeZone15.convertLocalToUTC(10L, true);
        org.joda.time.DateTime dateTime19 = localDateTime8.toDateTime(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundFloor();
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6, (int) (short) 1);
        java.lang.String str9 = gJChronology8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DurationField durationField11 = gJChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology8.centuryOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.yearOfCentury();
        org.joda.time.DurationField durationField24 = gJChronology20.minutes();
        org.joda.time.DurationField durationField25 = gJChronology20.halfdays();
        mutableDateTime3.setChronology((org.joda.time.Chronology) gJChronology20);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology20.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = gJChronology20.getDateTimeMillis(29, 828, 995, 1046607);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 828 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(gJChronology8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str9, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = dateTimeFormatter4.getLocale();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        org.joda.time.Chronology chronology23 = gJChronology10.withZone(dateTimeZone22);
        long long27 = dateTimeZone22.convertLocalToUTC(4518960813L, true, 0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter4.withZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((-1199900L), dateTimeZone22);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = dateTimeZone32.getShortName((long) 2022, locale34);
        java.lang.String str36 = locale34.getScript();
        java.util.Locale.setDefault(category31, locale34);
        java.lang.String str38 = dateTimeZone22.getShortName((-8L), locale34);
        java.util.Locale locale39 = locale34.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = mutableDateTime41.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = property43.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime46 = property43.addToCopy((long) 2);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, 295);
        org.joda.time.DateTime.Property property50 = dateTime46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        long long57 = dateTimeZone55.nextTransition((long) 26149);
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.lang.String str61 = locale59.getDisplayScript(locale60);
        java.lang.String str62 = dateTimeZone55.getName((long) (byte) 10, locale60);
        java.lang.String str63 = property50.getAsShortText(locale60);
        java.lang.String str64 = locale39.getDisplayLanguage(locale60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.era();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.roundFloor();
        int int69 = mutableDateTime68.getRoundingMode();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime68.secondOfMinute();
        org.joda.time.Chronology chronology71 = mutableDateTime68.getChronology();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = chronology71.add(readablePeriod72, 1840689240L, 117);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((java.lang.Object) str64, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Chinesisch\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4518960813L + "'", long27 == 4518960813L);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 26149L + "'", long57 == 26149L);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8" + "'", str63, "8");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinesisch" + "'", str64, "Chinesisch");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1840689240L + "'", long75 == 1840689240L);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.monthOfYear();
        long long31 = dateTimeField29.roundCeiling(1641609845574L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26392 + "'", int16 == 26392);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1643673600000L + "'", long31 == 1643673600000L);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime20);
        mutableDateTime15.setMillisOfDay((int) 'a');
        int int29 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime.Property property30 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime31.withMillisOfSecond(26203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26203 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26393 + "'", int25 == 26393);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale1);
        java.lang.String str5 = nameProvider0.getName(locale1, "secondOfMinute", "Etc/UTC");
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.lang.String str7 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Deutsch" + "'", str6, "Deutsch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Deutsch" + "'", str7, "Deutsch");
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long7 = dateTimeZone5.nextTransition((long) 26149);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = dateTimeZone5.getName((long) (byte) 10, locale10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1908343047937L, dateTimeZone5);
        boolean boolean15 = localDateTime13.equals((java.lang.Object) "2093-09-24T07:17:26.242Z");
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusSeconds(217);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusSeconds(26236);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 26149L + "'", long7 == 26149L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DurationField durationField5 = gJChronology3.hours();
        org.joda.time.DurationField durationField6 = gJChronology3.months();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        boolean boolean8 = dateTimeField7.isLenient();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        java.lang.String str7 = mutableDateTime3.toString("15");
        mutableDateTime3.setSecondOfMinute(15);
        int int10 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime3.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "15" + "'", str7, "15");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean15 = dateTime10.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime.Property property16 = dateTime10.secondOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        boolean boolean5 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime1.setMillisOfDay((int) (short) 0);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.year();
        int int9 = mutableDateTime1.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology3.years();
        org.joda.time.DurationField durationField8 = gJChronology3.hours();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.monthOfYear();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime20.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property29 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime31 = dateTime20.plusWeeks(26216);
        int int32 = dateTime20.getYearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime20.plusYears(26342945);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26393 + "'", int25 == 26393);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DurationField durationField15 = gJChronology3.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology3.getDateTimeMillis((-17973840L), 26389663, 44264689, 26148, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26389663 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology15.getZone();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        long long24 = dateTimeZone8.getMillisKeepLocal(dateTimeZone21, (long) (-292269054));
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 26241, dateTimeZone8);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-292269054L) + "'", long24 == (-292269054L));
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) gJChronology4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime10.getFieldType(26184);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26184");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) gJChronology0);
        org.joda.time.DurationField durationField2 = gJChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField8 = gJChronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(26147);
        int int14 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusWeeks(968);
        int int17 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withYearOfEra(192);
        long long21 = gJChronology0.set((org.joda.time.ReadablePartial) localDateTime11, (-17999775L));
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = gJChronology0.get(readablePeriod22, (long) 26152, (long) 365);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(gJChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 2022, locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int[] intArray15 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime13, 7L);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis(10);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime34.getCenturyOfEra();
        int int38 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology39 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusWeeks((int) '4');
        int[] intArray43 = gJChronology3.get((org.joda.time.ReadablePartial) localDateTime34, (long) 26156);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime34.minusYears(26262);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime34.withEra(714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 714 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 7]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 26156]");
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology22.era();
        org.joda.time.DurationField durationField34 = gJChronology22.minutes();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26393 + "'", int16 == 26393);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        boolean boolean13 = dateTime10.isBefore((long) 26167);
        org.joda.time.DateTime dateTime15 = dateTime10.withYear(26171);
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfEra();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property2 = dateTime1.centuryOfEra();
        long long3 = property2.remainder();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = mutableDateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withPeriodAdded(readablePeriod8, 0);
        int int11 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime.Property property12 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime14 = dateTime6.withWeekyear(26153);
        long long15 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime6.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime6.plusMillis(26255);
        int int20 = dateTime6.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24L + "'", long3 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26393 + "'", int11 == 26393);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26393628 + "'", int20 == 26393628);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Chronology chronology17 = gJChronology4.withZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Chronology chronology28 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = localDateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(100);
        int int43 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.minuteOfHour();
        int[] intArray50 = localDateTime46.getValues();
        gJChronology4.validate((org.joda.time.ReadablePartial) localDateTime42, intArray50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime42.plusMillis(627);
        org.joda.time.LocalDateTime.Property property54 = localDateTime42.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = localDateTime58.get(dateTimeFieldType59);
        boolean boolean61 = localDateTime56.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.minusSeconds(0);
        int int66 = localDateTime58.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property67 = localDateTime58.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.plusHours(15);
        boolean boolean70 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.secondOfMinute();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(gJChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 22, 26393699]");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology4.getZone();
        java.lang.String str8 = dateTimeZone6.getName((long) 26155);
        org.joda.time.Chronology chronology9 = gJChronology0.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField10 = gJChronology0.millis();
        int int13 = durationField10.getDifference(27425238L, 4032L);
        long long15 = durationField10.getMillis(442);
        org.junit.Assert.assertNotNull(gJChronology0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 27421206 + "'", int13 == 27421206);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 442L + "'", long15 == 442L);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Chronology chronology8 = gJChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial10 = null;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTimeField9.getAsText(readablePartial10, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis(26237);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMillis(0);
        org.joda.time.DateTime dateTime13 = dateTime9.plusYears(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime9.withDayOfMonth(2547);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2547 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.era();
        org.joda.time.DurationField durationField11 = gJChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 26233, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField16 = gJChronology4.months();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DurationField durationField8 = gJChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.secondOfDay();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        java.util.Locale locale10 = locale6.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale6.getUnicodeLocaleType("2022-02-22T12:17:25.753+05:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T12:17:25.753+05:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(297);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DurationField durationField13 = gJChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField15 = gJChronology10.millis();
        org.joda.time.DurationField durationField16 = gJChronology10.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter6.withChronology((org.joda.time.Chronology) gJChronology10);
        java.lang.Appendable appendable18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = mutableDateTime20.toDateTimeISO();
        org.joda.time.DateTime.Property property22 = dateTime21.centuryOfEra();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.DateTime dateTime24 = property22.roundCeilingCopy();
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.LocalDate localDate26 = dateTime24.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(appendable18, (org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        int int17 = mutableDateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 0);
        int int25 = dateTime20.getSecondOfDay();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime20);
        mutableDateTime15.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime15.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        int int35 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTimeISO();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.withPeriodAdded(readablePeriod40, 0);
        int int43 = dateTime38.getSecondOfDay();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateTime38);
        mutableDateTime33.setMillisOfDay((int) 'a');
        boolean boolean47 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime dateTime48 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        boolean boolean49 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        int int50 = localDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26394 + "'", int25 == 26394);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 26394 + "'", int43 == 26394);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withPeriodAdded(readablePeriod14, 0);
        int int17 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime.Property property18 = dateTime12.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21, (int) (short) 1);
        java.lang.String str24 = gJChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.era();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology23.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology23.seconds();
        boolean boolean29 = dateTimeZone8.equals((java.lang.Object) gJChronology23);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology23.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale32);
        java.lang.String str36 = nameProvider31.getName(locale32, "secondOfMinute", "Etc/UTC");
        java.lang.String str37 = locale32.getDisplayLanguage();
        int int38 = dateTimeField30.getMaximumShortTextLength(locale32);
        java.lang.String str39 = locale32.getScript();
        java.lang.String str40 = locale32.getVariant();
        java.lang.String str43 = nameProvider0.getShortName(locale32, "Heure de Greenwich", "halfdays");
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField51.getType();
        java.lang.String str53 = dateTimeField51.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        int int59 = localDateTime57.get(dateTimeFieldType58);
        boolean boolean60 = localDateTime55.isAfter((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale70 = java.util.Locale.PRC;
        java.lang.String str71 = dateTimeZone68.getShortName((long) 2022, locale70);
        java.lang.String str72 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, 295, locale70);
        java.util.Locale.setDefault(category44, locale70);
        java.lang.String str76 = nameProvider0.getName(locale70, "years", "GJChronology[Etc/UTC,mdfw=1]");
        java.util.Set<java.lang.Character> charSet77 = locale70.getExtensionKeys();
        java.util.Locale locale78 = locale70.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26394 + "'", int17 == 26394);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(gJChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str24, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(gJChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str53, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "295" + "'", str72, "295");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusMinutes(26163);
        java.util.Date date28 = localDateTime27.toDate();
        int int29 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.millisOfDay();
        org.joda.time.DurationField durationField38 = gJChronology33.millis();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        java.lang.String str44 = gJChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.monthOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = gJChronology43.add(readablePeriod48, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology52 = gJChronology43.withUTC();
        long long56 = gJChronology43.add(763106140800035L, (-86399998L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        boolean boolean59 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusDays((int) (short) -1);
        long long64 = gJChronology43.set((org.joda.time.ReadablePartial) localDateTime62, 826129497600000L);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.minus(readableDuration65);
        int[] intArray68 = gJChronology33.get((org.joda.time.ReadablePartial) localDateTime66, 1380120L);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property70 = localDateTime66.property(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.minusSeconds(1);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.centuryOfEra();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.dayOfMonth();
        boolean boolean75 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = localDateTime27.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Fri Feb 04 03:16:55 GMT 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(gJChronology43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str44, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514151595L + "'", long51 == 1645514151595L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 763105276800055L + "'", long56 == 763105276800055L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645427994336L + "'", long64 == 1645427994336L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 1380120]");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 26324511, 269, 26253, 26185);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26253 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4, (int) (short) 1);
        java.lang.String str7 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology6.getZone();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.copy();
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(26186);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = property34.getAsText(locale38);
        java.lang.String str40 = property16.getAsShortText(locale38);
        java.util.Locale locale42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime43 = property16.set("2022-02-21T07:19:02.209", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T07:19:02.209\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(gJChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str7, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear(23);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField17 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime24.withPeriodAdded(readablePeriod26, 0);
        int int29 = dateTime24.getSecondOfDay();
        org.joda.time.DateTime.Property property30 = dateTime24.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33, (int) (short) 1);
        java.lang.String str36 = gJChronology35.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.era();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.minuteOfDay();
        org.joda.time.DurationField durationField40 = gJChronology35.seconds();
        boolean boolean41 = dateTimeZone20.equals((java.lang.Object) gJChronology35);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale44);
        java.lang.String str48 = nameProvider43.getName(locale44, "secondOfMinute", "Etc/UTC");
        java.lang.String str49 = locale44.getDisplayLanguage();
        int int50 = dateTimeField42.getMaximumShortTextLength(locale44);
        java.lang.String str51 = locale44.getScript();
        java.lang.String str52 = locale44.getVariant();
        int int53 = property12.getMaximumTextLength(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter6.withLocale(locale44);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField60 = gJChronology59.millisOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology68.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology68.getZone();
        long long74 = dateTimeZone72.nextTransition((long) 'x');
        org.joda.time.Chronology chronology75 = gJChronology59.withZone(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField76 = gJChronology59.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) 9, (org.joda.time.Chronology) gJChronology59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = dateTimeFormatter54.print((org.joda.time.ReadableInstant) mutableDateTime77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26394 + "'", int29 == 26394);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(gJChronology31);
        org.junit.Assert.assertNotNull(gJChronology35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str36, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Deutsch" + "'", str49, "Deutsch");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(gJChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(gJChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 120L + "'", long74 == 120L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        int int8 = property7.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property7.setCopy(44361921);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44361921 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        java.lang.String[] strArray14 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        int int17 = strSet15.size();
        java.lang.String[] strArray32 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        int int35 = strSet33.size();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37, (int) (short) 1);
        java.lang.String str40 = gJChronology39.toString();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime45.get(dateTimeFieldType46);
        boolean boolean48 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withDayOfWeek(5);
        int int51 = localDateTime45.getYear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime54 = dateTime41.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTime.Property property55 = dateTime41.yearOfCentury();
        java.lang.String str56 = property55.getName();
        boolean boolean57 = strSet33.contains((java.lang.Object) property55);
        boolean boolean58 = strSet15.addAll((java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet60.spliterator();
        java.lang.Object[] objArray62 = strSet60.toArray();
        boolean boolean63 = strSet33.addAll((java.util.Collection<java.lang.String>) strSet60);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        boolean boolean66 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.minusWeeks(53);
        org.joda.time.LocalDateTime.Property property70 = localDateTime64.dayOfYear();
        boolean boolean71 = strSet60.contains((java.lang.Object) property70);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet60.parallelStream();
        strSet60.clear();
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertNotNull(gJChronology39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str40, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "yearOfCentury" + "'", str56, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strSpliterator61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strStream72);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = gJChronology3.getDateTimeMillis(7020000L, 26218, 39, 0, 162);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26218 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        int int12 = property11.getMinimumValue();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(26279);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime14.withTime(26362, 66, 26248, 26317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26362 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        int int13 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 0);
        int int21 = dateTime16.getSecondOfDay();
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime16);
        mutableDateTime11.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.era();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        int int31 = mutableDateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime33.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime34.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.withPeriodAdded(readablePeriod36, 0);
        int int39 = dateTime34.getSecondOfDay();
        mutableDateTime29.setDate((org.joda.time.ReadableInstant) dateTime34);
        mutableDateTime29.setMillisOfDay((int) 'a');
        boolean boolean43 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime44 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str45 = mutableDateTime11.toString();
        int int46 = mutableDateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.yearOfEra();
        org.joda.time.DurationField durationField54 = gJChronology51.halfdays();
        org.joda.time.DurationField durationField55 = gJChronology51.centuries();
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology51.getZone();
        mutableDateTime11.setChronology((org.joda.time.Chronology) gJChronology51);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime11.weekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26394 + "'", int21 == 26394);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26394 + "'", int39 == 26394);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T00:00:00.097Z" + "'", str45, "2022-02-22T00:00:00.097Z");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField8 = gJChronology3.millis();
        long long12 = gJChronology3.add(1646576340276L, (long) 26324271, 32);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.year();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1647418716948L + "'", long12 == 1647418716948L);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        java.lang.String str12 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.era();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime5.toMutableDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        long long25 = gJChronology19.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DateTimeField dateTimeField26 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology19.minuteOfDay();
        org.joda.time.DurationField durationField28 = gJChronology19.halfdays();
        org.joda.time.DurationField durationField29 = gJChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology19.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setRounding(dateTimeField30, 375);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 375");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gJChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str12, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 763106140800035L + "'", long25 == 763106140800035L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        long long30 = gJChronology24.getDateTimeMillis(26151, 11, 15, (int) '#');
        org.joda.time.DurationField durationField31 = gJChronology24.weekyears();
        org.joda.time.DurationField durationField32 = gJChronology24.hours();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology24.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setRounding(dateTimeField33, 72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 72");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26394 + "'", int13 == 26394);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 763106140800035L + "'", long30 == 763106140800035L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime.Property property24 = dateTime18.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology29.seconds();
        boolean boolean35 = dateTimeZone14.equals((java.lang.Object) gJChronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter4.withChronology((org.joda.time.Chronology) gJChronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter4.withPivotYear((java.lang.Integer) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.parse("2022-02-22T07:19:47.848Z", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26394 + "'", int23 == 26394);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(gJChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str30, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        int int12 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime15.withPeriodAdded(readablePeriod17, 0);
        int int20 = dateTime15.getSecondOfDay();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) dateTime15);
        mutableDateTime10.addDays(26147);
        int int24 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime10);
        java.lang.String str25 = mutableDateTime10.toString();
        mutableDateTime10.addDays(26152);
        org.joda.time.DateTimeField dateTimeField28 = mutableDateTime10.getRoundingField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7" + "'", str6, "7");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26394 + "'", int20 == 26394);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-627528) + "'", int24 == (-627528));
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2093-09-24T07:19:54.858Z" + "'", str25, "2093-09-24T07:19:54.858Z");
        org.junit.Assert.assertNull(dateTimeField28);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        mutableDateTime3.addMillis(4);
        java.lang.String str19 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTimeISO();
        int int25 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime32 = dateTime28.withPeriodAdded(readablePeriod30, 0);
        int int33 = dateTime28.getSecondOfDay();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime28);
        mutableDateTime23.setMillisOfDay((int) 'a');
        mutableDateTime23.setWeekyear((int) (short) 0);
        boolean boolean39 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime3.copy();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44, (int) (short) 1);
        java.lang.String str47 = gJChronology46.toString();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology46);
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52, (int) (short) 1);
        java.lang.String str55 = gJChronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.era();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime48.toMutableDateTime((org.joda.time.Chronology) gJChronology54);
        org.joda.time.DurationField durationField59 = durationFieldType42.getField((org.joda.time.Chronology) gJChronology54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.year();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfDay(26159);
        long long69 = gJChronology54.set((org.joda.time.ReadablePartial) localDateTime67, (long) 26150);
        org.joda.time.DateTime dateTime70 = mutableDateTime3.toDateTime((org.joda.time.Chronology) gJChronology54);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfMonth(238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 238 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26394 + "'", int13 == 26394);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T00:00:00.101Z" + "'", str19, "2022-02-22T00:00:00.101Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26394 + "'", int33 == 26394);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(gJChronology46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str47, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gJChronology54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str55, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645488026159L + "'", long69 == 1645488026159L);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusDays((int) (short) -1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.Chronology chronology22 = localDateTime20.getChronology();
        java.util.Date date23 = localDateTime20.toDate();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withPeriodAdded(readablePeriod24, (int) (byte) -1);
        java.lang.Object obj27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withField(dateTimeFieldType30, 523);
        java.lang.String str33 = dateTimeFieldType30.getName();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime13.withField(dateTimeFieldType30, 26204);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusDays((int) (short) -1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.Chronology chronology43 = localDateTime41.getChronology();
        java.util.Date date44 = localDateTime41.toDate();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withPeriodAdded(readablePeriod45, (int) (byte) -1);
        java.lang.Object obj48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(obj48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withField(dateTimeFieldType51, 523);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType51.getDurationType();
        boolean boolean55 = localDateTime35.isSupported(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57, (int) (short) 1);
        java.lang.String str60 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.centuryOfEra();
        org.joda.time.DurationField durationField65 = gJChronology59.weeks();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField70 = gJChronology69.millisOfDay();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology69.getZone();
        java.lang.String str74 = dateTimeZone73.getID();
        long long77 = dateTimeZone73.convertLocalToUTC((long) 1, false);
        org.joda.time.Chronology chronology78 = gJChronology59.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField79 = gJChronology59.yearOfEra();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType51.getField((org.joda.time.Chronology) gJChronology59);
        org.joda.time.DurationField durationField81 = gJChronology59.days();
        org.joda.time.DurationField durationField82 = gJChronology59.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant83 = new org.joda.time.Instant((java.lang.Object) gJChronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.GJChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T07:19:54.901" + "'", str21, "2022-02-21T07:19:54.901");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Feb 21 07:19:55 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfDay" + "'", str33, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-21T07:19:54.901" + "'", str42, "2022-02-21T07:19:54.901");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 21 07:19:55 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(gJChronology59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str60, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(gJChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology3);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) '#');
        org.joda.time.DateTime dateTime11 = dateTime7.withWeekyear(26149);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths(1970);
        org.joda.time.DateTime dateTime16 = dateTime7.withDurationAdded(26395200000L, (-627528));
        java.lang.String str17 = dateTime7.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime7.withPeriodAdded(readablePeriod18, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withYearOfCentury(26388);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26388 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str17, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        int int7 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withField(dateTimeFieldType10, (int) (short) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = gJChronology4.halfdays();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology4.year();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology4.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay(611);
        org.joda.time.DateTime dateTime6 = dateTime2.withMillisOfDay(26154);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology11.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) gJChronology11);
        org.joda.time.TimeOfDay timeOfDay18 = dateTime6.toTimeOfDay();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(gJChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        boolean boolean17 = dateTime14.isEqual(36026149L);
        org.joda.time.DateTime.Property property18 = dateTime14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime34 = dateTime30.withPeriodAdded(readablePeriod32, 0);
        int int35 = dateTime30.getSecondOfDay();
        org.joda.time.DateTime.Property property36 = dateTime30.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39, (int) (short) 1);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.era();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.minuteOfDay();
        org.joda.time.DurationField durationField46 = gJChronology41.seconds();
        boolean boolean47 = dateTimeZone26.equals((java.lang.Object) gJChronology41);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology41.era();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology50 = gJChronology41.withZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.lang.String str55 = dateTimeZone52.getShortName((long) 2022, locale54);
        java.lang.String str56 = locale54.getScript();
        java.lang.String str57 = dateTimeZone49.getShortName(0L, locale54);
        java.lang.String str58 = locale54.toLanguageTag();
        java.lang.String str59 = locale54.getDisplayName();
        int int60 = property18.getMaximumShortTextLength(locale54);
        org.joda.time.DateTime dateTime61 = property18.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeFormatter11.print((org.joda.time.ReadableInstant) dateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26395 + "'", int35 == 26395);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(gJChronology41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str42, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh-CN" + "'", str58, "zh-CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinesisch (China)" + "'", str59, "Chinesisch (China)");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 'x');
        org.joda.time.Chronology chronology19 = gJChronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology3.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = gJChronology3.seconds();
        org.joda.time.DurationField durationField23 = gJChronology3.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = gJChronology3.getDateTimeMillis(883, 26339, 44261371, 35, 874, 479, 585);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 120L + "'", long18 == 120L);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("CHN");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("26161757");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.stream();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        boolean boolean13 = strSet12.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "2022-02-22T00:00:00.101Z", "DateTimeField[hourOfHalfday]", "+00:00", "2022-02-22T00:00:00.101Z", "de-DE", "UTC", "Deutsch", "2022-02-21T07:15:52.625" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        boolean boolean25 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        boolean boolean29 = strSet28.isEmpty();
        boolean boolean30 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet28);
        boolean boolean31 = strSet8.retainAll((java.util.Collection<java.lang.String>) strSet12);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(26186);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plus(readableDuration20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.era();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology4.minuteOfDay();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField((org.joda.time.Chronology) gJChronology4);
        org.joda.time.Instant instant10 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology4.millisOfSecond();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 902);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.Chronology chronology12 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField13 = gJChronology3.months();
        org.joda.time.Instant instant14 = gJChronology3.getGregorianCutover();
        long long15 = instant14.getMillis();
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514151595L + "'", long11 == 1645514151595L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-12219292800000L) + "'", long15 == (-12219292800000L));
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 26149);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withPeriodAdded(readablePeriod29, 0);
        int int32 = dateTime27.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime27.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36, (int) (short) 1);
        java.lang.String str39 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.era();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.minuteOfDay();
        org.joda.time.DurationField durationField43 = gJChronology38.seconds();
        boolean boolean44 = dateTimeZone23.equals((java.lang.Object) gJChronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter13.withChronology((org.joda.time.Chronology) gJChronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) gJChronology38);
        java.util.Locale locale47 = dateTimeFormatter46.getLocale();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime51.toDateTimeISO();
        int int53 = mutableDateTime49.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.setSecondOfDay(59);
        mutableDateTime51.addMonths(26149);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime51.getZone();
        java.lang.String str60 = dateTimeZone58.getShortName((long) 51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter46.withZone(dateTimeZone58);
        java.util.Locale locale62 = dateTimeFormatter46.getLocale();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeFormatter46.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26395 + "'", int32 == 26395);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(gJChronology34);
        org.junit.Assert.assertNotNull(gJChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str39, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNull(dateTimeZone63);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology3.clockhourOfDay();
        long long11 = dateTimeField9.roundHalfEven(68794099200000L);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 68794099200000L + "'", long11 == 68794099200000L);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        boolean boolean5 = dateTime2.isEqual(36026149L);
        org.joda.time.DateTime.Property property6 = dateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.withPeriodAdded(readablePeriod20, 0);
        int int23 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime.Property property24 = dateTime18.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27, (int) (short) 1);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.era();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.minuteOfDay();
        org.joda.time.DurationField durationField34 = gJChronology29.seconds();
        boolean boolean35 = dateTimeZone14.equals((java.lang.Object) gJChronology29);
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.era();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology38 = gJChronology29.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = dateTimeZone40.getShortName((long) 2022, locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = dateTimeZone37.getShortName(0L, locale42);
        java.lang.String str46 = locale42.toLanguageTag();
        java.lang.String str47 = locale42.getDisplayName();
        int int48 = property6.getMaximumShortTextLength(locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = property6.addToCopy(764877254400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 764877254400000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26395 + "'", int23 == 26395);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(gJChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str30, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-CN" + "'", str46, "zh-CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinesisch (China)" + "'", str47, "Chinesisch (China)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setSecondOfDay(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean9 = mutableDateTime3.equals((java.lang.Object) dateTimeFieldType8);
        java.lang.Object obj10 = mutableDateTime3.clone();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime3.add(readablePeriod11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.hourOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "2022-02-22T00:00:59.358Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "2022-02-22T00:00:59.358Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "2022-02-22T00:00:59.358Z");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.yearOfCentury();
        org.joda.time.DurationField durationField7 = gJChronology3.days();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology3.centuries();
        org.joda.time.DurationField durationField10 = gJChronology3.centuries();
        org.joda.time.Chronology chronology11 = gJChronology3.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.weeks();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) chronology11, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13, (int) (short) 1);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.monthOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        int int20 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        boolean boolean29 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (short) 10);
        int int34 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTime dateTime36 = property22.addToCopy((long) 26352);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(gJChronology15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str16, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTimeISO();
        boolean boolean10 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        java.lang.String str19 = dateTimeZone18.getID();
        mutableDateTime8.setZoneRetainFields(dateTimeZone18);
        int int21 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime8.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType23.getField((org.joda.time.Chronology) gJChronology27);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime8.property(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime8, "2022-02-21T12:19:26.623", 952);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(gJChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = mutableDateTime3.toDateTimeISO();
        int int5 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = mutableDateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime8.withPeriodAdded(readablePeriod10, 0);
        int int13 = dateTime8.getSecondOfDay();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime8);
        mutableDateTime3.setMillisOfDay((int) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.era();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField25 = gJChronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Chronology chronology37 = gJChronology24.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Chronology chronology48 = gJChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        boolean boolean56 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMonths(100);
        int int63 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withMillisOfDay(8);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        boolean boolean68 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.minuteOfHour();
        int[] intArray70 = localDateTime66.getValues();
        gJChronology24.validate((org.joda.time.ReadablePartial) localDateTime62, intArray70);
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology24.hourOfHalfday();
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getDisplayName();
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str79 = dateTimeField73.getAsText((long) 26152, locale75);
        java.lang.String str80 = locale75.getISO3Country();
        java.lang.String str81 = locale75.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime82 = property17.set("2093-09-24T07:17:26.242Z", locale75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2093-09-24T07:17:26.242Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26395 + "'", int13 == 26395);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 22, 26395652]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italienisch (Italien)" + "'", str76, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ITA" + "'", str80, "ITA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Italienisch (Italien)" + "'", str81, "Italienisch (Italien)");
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DurationField durationField6 = gJChronology3.centuries();
        org.joda.time.DurationField durationField7 = gJChronology3.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField7.getMillis(1645514342615L, (long) 131);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        java.util.Locale locale2 = new java.util.Locale("26", "halfdays");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        java.lang.String[] strArray19 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        int int22 = strSet20.size();
        java.lang.String[] strArray37 = new java.lang.String[] { "de-DE", "+00:00", "Deutsch", "0", "15", "2022-02-21T07:15:50.993", "Heure de Greenwich", "7", "DateTimeField[hourOfHalfday]", "2022-02-22T00:00:00.101Z", "", "DateTimeField[hourOfHalfday]", "+00:00", "DateTimeField[hourOfHalfday]" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        int int40 = strSet38.size();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42, (int) (short) 1);
        java.lang.String str45 = gJChronology44.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        int int52 = localDateTime50.get(dateTimeFieldType51);
        boolean boolean53 = localDateTime48.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.withDayOfWeek(5);
        int int56 = localDateTime50.getYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.withHourOfDay((int) (byte) 1);
        org.joda.time.DateTime dateTime59 = dateTime46.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.DateTime.Property property60 = dateTime46.yearOfCentury();
        java.lang.String str61 = property60.getName();
        boolean boolean62 = strSet38.contains((java.lang.Object) property60);
        boolean boolean63 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet38);
        strSet20.clear();
        boolean boolean65 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.stream.Stream<java.lang.String> strStream66 = strSet3.parallelStream();
        org.junit.Assert.assertEquals(locale2.toString(), "26_HALFDAYS");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertNotNull(gJChronology44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str45, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "yearOfCentury" + "'", str61, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = gJChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.withPeriodAdded(readablePeriod13, 0);
        int int16 = dateTime11.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime11.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.era();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology22.minuteOfDay();
        org.joda.time.DurationField durationField27 = gJChronology22.seconds();
        boolean boolean28 = dateTimeZone7.equals((java.lang.Object) gJChronology22);
        org.joda.time.DateTimeField dateTimeField29 = gJChronology22.era();
        org.joda.time.DurationField durationField30 = gJChronology22.months();
        long long33 = durationField30.subtract(831025207124766L, 26333);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26395 + "'", int16 == 26395);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(gJChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str23, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 761776125524766L + "'", long33 == 761776125524766L);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology3.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = gJChronology3.add(readablePeriod9, 0L, 26164);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.dayOfMonth();
        org.joda.time.DurationField durationField14 = gJChronology3.weeks();
        long long16 = durationField14.getMillis(24L);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 14515200000L + "'", long16 == 14515200000L);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology3.getZone();
        org.joda.time.DurationField durationField6 = gJChronology3.weekyears();
        org.joda.time.DurationField durationField7 = gJChronology3.weekyears();
        long long9 = durationField7.getValueAsLong((long) 26161);
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDayOfWeek(5);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusSeconds(0);
        int int17 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime16);
        java.lang.String str19 = dateTimeField5.getAsShortText((long) 26324);
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale6);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable10, 1645514398397L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        long long10 = gJChronology4.getDateTimeMillis(26151, 11, 15, (int) '#');
        boolean boolean11 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DurationField durationField12 = gJChronology4.halfdays();
        org.joda.time.DurationField durationField13 = gJChronology4.hours();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology4.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField19 = gJChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology18.getZone();
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        int int31 = dateTime26.getSecondOfDay();
        org.joda.time.DateTime.Property property32 = dateTime26.minuteOfHour();
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime35 = dateTime26.withYearOfCentury(51);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long38 = dateTimeZone36.nextTransition(0L);
        org.joda.time.Chronology chronology39 = gJChronology4.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = gJChronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology4.hourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 763106140800035L + "'", long10 == 763106140800035L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26395 + "'", int31 == 26395);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(622);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.yearOfCentury();
        org.joda.time.DurationField durationField14 = gJChronology10.minutes();
        org.joda.time.DurationField durationField15 = gJChronology10.millis();
        org.joda.time.DurationField durationField16 = gJChronology10.millis();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology10.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC((long) (-1), true, (long) (short) 10);
        org.joda.time.Chronology chronology26 = gJChronology10.withZone(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(26311, 44361921, 26181, 26344, 657, 1046607, 26358, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26344 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        java.lang.String str5 = gJChronology4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(0);
        org.joda.time.DateTime dateTime10 = dateTime8.withYear((int) '#');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, 26148);
        org.joda.time.DateTime.Property property14 = dateTime10.era();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str16 = durationFieldType15.getName();
        org.joda.time.DateTime dateTime18 = dateTime10.withFieldAdded(durationFieldType15, 26181);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.yearOfCentury();
        org.joda.time.DurationField durationField26 = gJChronology22.minutes();
        org.joda.time.DurationField durationField27 = gJChronology22.millis();
        org.joda.time.DurationField durationField28 = gJChronology22.millis();
        boolean boolean29 = durationFieldType15.isSupported((org.joda.time.Chronology) gJChronology22);
        org.joda.time.DateTimeField dateTimeField30 = gJChronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology22.weekOfWeekyear();
        long long35 = gJChronology22.add((long) 26220, 13046426155L, 26175);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(3903232622000L, (org.joda.time.Chronology) gJChronology22);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setMillisOfSecond(26182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26182 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str5, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 341490204633345L + "'", long35 == 341490204633345L);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField6 = gJChronology3.seconds();
        org.joda.time.DurationField durationField7 = gJChronology3.halfdays();
        org.junit.Assert.assertNotNull(gJChronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.withPeriodAdded(readablePeriod4, 0);
        org.joda.time.DateTime.Property property7 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        int int9 = dateTime8.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis(262);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear(23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 983);
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType10.getField((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DurationField durationField20 = gJChronology14.hours();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField27 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology26);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusSeconds(26147);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime30.getFieldType((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime36.toDateTimeISO();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime37.withPeriodAdded(readablePeriod39, 0);
        int int42 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property43 = dateTime37.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = property43.getAsText(locale44);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale47.getDisplayScript();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale51);
        java.lang.String str55 = nameProvider50.getName(locale51, "secondOfMinute", "Etc/UTC");
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.lang.String str57 = locale47.getDisplayVariant(locale51);
        java.lang.String str58 = locale44.getDisplayScript(locale47);
        java.lang.String str59 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale47);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime30.minusMillis(26254);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer9, (org.joda.time.ReadablePartial) localDateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26396 + "'", int42 == 26396);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "19" + "'", str46, "19");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Deutsch" + "'", str56, "Deutsch");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1, (int) (short) 1);
        java.lang.String str4 = gJChronology3.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.monthOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = gJChronology3.add(readablePeriod8, 1645514151595L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField12 = gJChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology3.monthOfYear();
        org.joda.time.DurationField durationField14 = gJChronology3.hours();
        org.joda.time.DurationField durationField15 = gJChronology3.halfdays();
        org.joda.time.DurationField durationField16 = gJChronology3.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = gJChronology3.getDateTimeMillis(0, 26226, 13, 8370484);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26226 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(gJChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GJChronology[UTC,mdfw=1]" + "'", str4, "GJChronology[UTC,mdfw=1]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514151595L + "'", long11 == 1645514151595L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField5 = gJChronology4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) gJChronology4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(26147);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusDays(26149);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.era();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundFloor();
        int int18 = mutableDateTime17.getRoundingMode();
        org.joda.time.DateTime dateTime19 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField28 = gJChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology24.dayOfMonth();
        boolean boolean30 = dateTimeFieldType20.isSupported((org.joda.time.Chronology) gJChronology24);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime17.toMutableDateTime((org.joda.time.Chronology) gJChronology24);
        java.util.GregorianCalendar gregorianCalendar32 = mutableDateTime31.toGregorianCalendar();
        org.junit.Assert.assertNotNull(gJChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = dateTimeFormatter5.print((long) 26271);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(24L);
        org.joda.time.DateTime.Property property2 = dateTime1.monthOfYear();
        org.junit.Assert.assertNotNull(property2);
    }
}

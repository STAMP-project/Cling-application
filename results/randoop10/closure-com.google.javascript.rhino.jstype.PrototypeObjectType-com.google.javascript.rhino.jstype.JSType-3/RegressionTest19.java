import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        node57.detachChildren();
        boolean boolean59 = node57.isNew();
        boolean boolean60 = node57.isGetElem();
        com.google.javascript.rhino.Node node61 = node57.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable62 = node61.getAncestors();
        boolean boolean63 = node61.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(ancestorIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getStartLine();
        int int4 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList8 = com.google.common.collect.ImmutableList.of(ternaryValue4, ternaryValue5, ternaryValue6, ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList14 = com.google.common.collect.ImmutableList.of(ternaryValue10, ternaryValue11, ternaryValue12, ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue6.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder17 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue16);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList18 = ternaryValueEnumBuilder17.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList23 = com.google.common.collect.ImmutableList.of(ternaryValue19, ternaryValue20, ternaryValue21, ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList28 = com.google.common.collect.ImmutableList.of(ternaryValue24, ternaryValue25, ternaryValue26, ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue20.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList34 = com.google.common.collect.ImmutableList.of(ternaryValue30, ternaryValue31, ternaryValue32, ternaryValue33);
        java.lang.String str35 = ternaryValue32.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList40 = com.google.common.collect.ImmutableList.of(ternaryValue36, ternaryValue37, ternaryValue38, ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue32.or(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList46 = com.google.common.collect.ImmutableList.of(ternaryValue42, ternaryValue43, ternaryValue44, ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue37.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue29.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        java.lang.String str54 = ternaryValue51.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue51.or(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue56.xor(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList71 = com.google.common.collect.ImmutableList.of(ternaryValue67, ternaryValue68, ternaryValue69, ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue61.xor(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue61.or(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue42.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList81 = com.google.common.collect.ImmutableList.of(ternaryValue77, ternaryValue78, ternaryValue79, ternaryValue80);
        java.lang.String str82 = ternaryValue79.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList87 = com.google.common.collect.ImmutableList.of(ternaryValue83, ternaryValue84, ternaryValue85, ternaryValue86);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue79.or(ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList93 = com.google.common.collect.ImmutableList.of(ternaryValue89, ternaryValue90, ternaryValue91, ternaryValue92);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = ternaryValue84.xor(ternaryValue89);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue95 = ternaryValue73.or(ternaryValue89);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder96 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValueList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValueList14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder17);
        org.junit.Assert.assertNotNull(ternaryValueEnumList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValueList23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValueList28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValueList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "true" + "'", str35, "true");
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValueList40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValueList46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValueList71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValueList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "true" + "'", str82, "true");
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValueList87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValueList93);
        org.junit.Assert.assertNotNull(ternaryValue94);
        org.junit.Assert.assertNotNull(ternaryValue95);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder96);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.Node node76 = node75.cloneTree();
        com.google.javascript.rhino.InputId inputId78 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId80 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId82 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId84 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList85 = com.google.common.collect.ImmutableList.of(inputId78, inputId80, inputId82, inputId84);
        node76.setInputId(inputId82);
        boolean boolean87 = node76.hasChildren();
        com.google.javascript.rhino.Node node88 = node76.getLastSibling();
        int int89 = node88.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = new com.google.javascript.rhino.JSDocInfo();
        int int92 = jSDocInfo91.getImplementedInterfaceCount();
        boolean boolean93 = jSDocInfo91.hasType();
        java.lang.String str94 = jSDocInfo91.toString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility95 = jSDocInfo91.getVisibility();
        java.util.Collection<java.lang.String> strCollection96 = jSDocInfo91.getAuthors();
        java.lang.String str97 = jSDocInfo91.getSourceName();
        boolean boolean98 = jSDocInfo91.isNoAlias();
        node88.putProp((int) (short) 1, (java.lang.Object) jSDocInfo91);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(inputIdList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "JSDocInfo" + "'", str94, "JSDocInfo");
        org.junit.Assert.assertNull(visibility95);
        org.junit.Assert.assertNull(strCollection96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        node1.setLineno((int) (short) 1);
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(51, nodeArray9, 48, 32);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(42, nodeArray9, 32, 12);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(36, nodeArray9);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(12, nodeArray9);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(2, nodeArray9);
        boolean boolean19 = node1.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isDec();
        boolean boolean41 = node38.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node33, node38, node45, 0, (int) (short) 0);
        boolean boolean49 = node38.isDec();
        com.google.javascript.rhino.Node node50 = node38.getParent();
        node18.addChildrenToBack(node50);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean10 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node29.isDec();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        node49.addChildrenToBack(node54);
        boolean boolean65 = node49.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node44.copyInformationFromForTree(node49);
        node49.setSourceEncodedPosition((int) (short) -1);
        boolean boolean69 = node49.isName();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        boolean boolean75 = node49.hasChild(node73);
        com.google.javascript.rhino.Node node76 = node29.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean77 = node29.isName();
        boolean boolean78 = node29.isRegExp();
        boolean boolean79 = node29.isThis();
        jSDocInfo0.setAssociatedNode(node29);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node13.setStaticSourceFile(staticSourceFile14);
        java.lang.Object obj17 = node13.getProp((-2147483648));
        boolean boolean18 = node13.isWith();
        boolean boolean19 = node13.hasMoreThanOneChild();
        boolean boolean20 = node13.isAssignAdd();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        node33.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node53 = node24.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isInstanceOf();
        boolean boolean59 = node57.isComma();
        boolean boolean60 = node24.isEquivalentTo(node57);
        boolean boolean61 = node57.isOr();
        boolean boolean62 = node57.isNoSideEffectsCall();
        boolean boolean63 = node57.isAssign();
        boolean boolean64 = node57.isObjectLit();
        boolean boolean65 = node57.isFunction();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node69.setJSType(jSType71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isContinue();
        com.google.javascript.rhino.Node node78 = node69.clonePropsFrom(node76);
        int int79 = node78.getLineno();
        com.google.javascript.rhino.Node node80 = node78.getNext();
        boolean boolean81 = node78.isThis();
        java.lang.String str82 = node78.getQualifiedName();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(10, node13, node57, node78, 0, 27);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnEndLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(29, 1, 48, 2);
        stringPosition0.setItem("NEW");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId3 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList8 = com.google.common.collect.ImmutableList.of(inputId1, inputId3, inputId5, inputId7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        int int10 = jSDocInfo9.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = null;
        jSDocInfo9.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo9.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo9.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = nodeCollection14.spliterator();
        boolean boolean16 = inputId1.equals((java.lang.Object) nodeSpliterator15);
        java.io.Serializable[] serializableArray33 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList34 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray33);
        boolean boolean35 = serializableList34.isEmpty();
        boolean boolean37 = serializableList34.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream38 = serializableList34.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableList34.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableList34.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator41 = serializableList34.spliterator();
        java.lang.Object[] objArray42 = serializableList34.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator43 = serializableList34.spliterator();
        boolean boolean44 = serializableList34.isEmpty();
        java.io.Serializable[] serializableArray61 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList62 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray61);
        boolean boolean63 = serializableList62.isEmpty();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isQualifiedName();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isContinue();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node77.setJSType(jSType79);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean85 = node84.isContinue();
        com.google.javascript.rhino.Node node86 = node77.clonePropsFrom(node84);
        node72.addChildrenToBack(node77);
        boolean boolean88 = node72.isLocalResultCall();
        com.google.javascript.rhino.Node node89 = node67.copyInformationFromForTree(node72);
        boolean boolean90 = serializableList62.contains((java.lang.Object) node72);
        java.util.Iterator<java.io.Serializable> serializableItor91 = serializableList62.iterator();
        java.lang.Object[] objArray92 = serializableList62.toArray();
        boolean boolean93 = serializableList34.containsAll((java.util.Collection<java.io.Serializable>) serializableList62);
        java.lang.Object[] objArray94 = serializableList62.toArray();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList97 = serializableList62.subList(0, 9);
        boolean boolean98 = inputId1.equals((java.lang.Object) 9);
        java.lang.String str99 = inputId1.toString();
        org.junit.Assert.assertNotNull(inputIdList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableArray33);
        org.junit.Assert.assertNotNull(serializableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(serializableStream38);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertNotNull(serializableSpliterator41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serializableArray61);
        org.junit.Assert.assertNotNull(serializableList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serializableItor91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "InputId: true" + "'", str99, "InputId: true");
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        int int81 = node80.getCharno();
        boolean boolean82 = node80.isDebugger();
        boolean boolean83 = node80.isCall();
        java.util.Set<java.lang.String> strSet84 = node80.getDirectives();
        boolean boolean85 = node80.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node81 = node80.removeFirstChild();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, node37, node80, 53, 50);
        java.lang.String str85 = node37.getQualifiedName();
        boolean boolean86 = node37.isThis();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        boolean boolean26 = node24.isString();
        com.google.javascript.rhino.Node node27 = node11.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.InputId inputId28 = null;
        node27.setInputId(inputId28);
        java.lang.Object obj31 = node27.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.InputId inputId52 = null;
        node51.setInputId(inputId52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isQualifiedName();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        node62.addChildrenToBack(node67);
        boolean boolean78 = node62.isLocalResultCall();
        com.google.javascript.rhino.Node node79 = node57.copyInformationFromForTree(node62);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, node27, node51, node62, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId83 = node62.getInputId();
        boolean boolean84 = node62.isReturn();
        com.google.javascript.rhino.Node node85 = node62.getFirstChild();
        com.google.javascript.rhino.Node node86 = node62.cloneNode();
        boolean boolean87 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean91 = node90.isCase();
        com.google.javascript.rhino.Node node92 = node62.clonePropsFrom(node90);
        boolean boolean93 = node92.isFunction();
        boolean boolean94 = node92.isThrow();
        boolean boolean95 = node92.isSetterDef();
        boolean boolean96 = node92.isAssignAdd();
        com.google.javascript.rhino.Node node97 = node3.copyInformationFromForTree(node92);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        java.lang.String str11 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet12.spliterator();
        boolean boolean14 = strSet12.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isNull();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isFor();
        node3.putBooleanProp(63, true);
        boolean boolean12 = node3.isCase();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node3.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        boolean boolean16 = node14.isTrue();
        boolean boolean17 = node14.isFromExterns();
        boolean boolean18 = node14.isSwitch();
        boolean boolean19 = node14.isUnscopedQualifiedName();
        boolean boolean20 = node14.isQuotedString();
        com.google.javascript.rhino.InputId inputId21 = node14.getInputId();
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean23 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean35 = node8.isEquivalentTo(node34);
        boolean boolean36 = node8.isRegExp();
        boolean boolean37 = node8.isAssign();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(55, "InputId: true", 9, 52);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo0.hasThisType();
        boolean boolean12 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        java.lang.String str14 = jSDocInfo0.getReturnDescription();
        boolean boolean15 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isIn();
        node3.setCharno((int) (short) 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        boolean boolean28 = node26.isString();
        com.google.javascript.rhino.Node node29 = node13.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.InputId inputId30 = null;
        node29.setInputId(inputId30);
        java.lang.Object obj33 = node29.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node29.getJSDocInfo();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isQualifiedName();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        node62.addChildrenToBack(node67);
        boolean boolean78 = node62.isLocalResultCall();
        com.google.javascript.rhino.Node node79 = node57.copyInformationFromForTree(node62);
        boolean boolean80 = serializableList52.contains((java.lang.Object) node62);
        int int81 = node62.getSourcePosition();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isLabelName();
        boolean boolean87 = node85.isDec();
        boolean boolean88 = node85.isNoSideEffectsCall();
        node62.addChildToBack(node85);
        boolean boolean90 = node85.isVoid();
        boolean boolean91 = node85.isEmpty();
        com.google.javascript.rhino.Node node92 = node85.cloneNode();
        boolean boolean93 = node29.hasChild(node85);
        node29.setCharno(49);
        node3.addChildToFront(node29);
        com.google.javascript.rhino.Node node97 = node29.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        node24.putIntProp((int) (short) 1, 38);
        boolean boolean47 = node24.isAssignAdd();
        boolean boolean48 = node24.isContinue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node24.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.hasChildren();
        int int81 = node79.getSideEffectFlags();
        boolean boolean82 = node79.isAnd();
        node79.setOptionalArg(false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        boolean boolean31 = node13.isString();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node13.getAncestors();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean72 = node36.isOnlyModifiesThisCall();
        node36.putBooleanProp(29, false);
        node13.addChildToFront(node36);
        boolean boolean77 = node13.isSetterDef();
        boolean boolean78 = node13.isCall();
        int int79 = node13.getLineno();
        com.google.javascript.rhino.Node node80 = node13.getNext();
        boolean boolean81 = node80.isName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 1, "java.io.IOException: java.io.IOException", 42, 39);
        boolean boolean5 = node4.isReturn();
        boolean boolean6 = node4.isOr();
        com.google.javascript.rhino.jstype.JSType jSType7 = node4.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        java.lang.String str5 = node3.getSourceFileName();
        node3.removeProp(63);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        int int24 = serializableList17.size();
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableList17.stream();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(serializableStream25);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "InputId: java.io.IOException: java.io.IOException");
        boolean boolean3 = node2.isFalse();
        boolean boolean4 = node2.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = new com.google.javascript.rhino.JSTypeExpression(node3, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        boolean boolean8 = jSTypeExpression7.isOptionalArg();
        com.google.javascript.rhino.Node node9 = jSTypeExpression7.getRoot();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException();
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        iOException10.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray18 = iOException16.getSuppressed();
        java.io.IOException iOException20 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray24 = iOException22.getSuppressed();
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.lang.Throwable[] throwableArray31 = iOException29.getSuppressed();
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException38 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException40 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException41 = new java.io.IOException();
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        java.io.IOException iOException43 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException45 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList46 = com.google.common.collect.ImmutableList.of(iOException16, iOException20, iOException22, iOException26, iOException29, iOException33, iOException36, iOException38, iOException40, iOException44, iOException45);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        iOException10.addSuppressed((java.lang.Throwable) iOException48);
        java.io.IOException iOException50 = new java.io.IOException();
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.lang.Throwable[] throwableArray53 = iOException51.getSuppressed();
        java.io.IOException iOException55 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException56 = new java.io.IOException();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException56);
        java.io.IOException iOException58 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.lang.Throwable[] throwableArray59 = iOException57.getSuppressed();
        java.io.IOException iOException60 = new java.io.IOException();
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException61);
        java.io.IOException iOException63 = new java.io.IOException();
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.io.IOException iOException65 = new java.io.IOException((java.lang.Throwable) iOException64);
        java.lang.Throwable[] throwableArray66 = iOException64.getSuppressed();
        java.io.IOException iOException67 = new java.io.IOException();
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException69 = new java.io.IOException((java.lang.Throwable) iOException68);
        java.io.IOException iOException70 = new java.io.IOException((java.lang.Throwable) iOException68);
        java.io.IOException iOException71 = new java.io.IOException();
        java.io.IOException iOException73 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException75 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException76 = new java.io.IOException();
        java.io.IOException iOException77 = new java.io.IOException((java.lang.Throwable) iOException76);
        java.io.IOException iOException78 = new java.io.IOException((java.lang.Throwable) iOException77);
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) iOException77);
        java.io.IOException iOException80 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList81 = com.google.common.collect.ImmutableList.of(iOException51, iOException55, iOException57, iOException61, iOException64, iOException68, iOException71, iOException73, iOException75, iOException79, iOException80);
        iOException48.addSuppressed((java.lang.Throwable) iOException51);
        boolean boolean83 = jSTypeExpression7.equals((java.lang.Object) iOException51);
        boolean boolean84 = jSTypeExpression7.isOptionalArg();
        boolean boolean85 = jSTypeExpression7.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(iOExceptionList46);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(iOExceptionList81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean2 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("(false)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        int int59 = node50.getType();
        node50.setLineno(53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        int int63 = jSDocInfo62.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = null;
        jSDocInfo62.setVisibility(visibility64);
        java.lang.String str66 = jSDocInfo62.getMeaning();
        java.lang.String str67 = jSDocInfo62.getLicense();
        boolean boolean68 = jSDocInfo62.isConstructor();
        java.lang.String str69 = jSDocInfo62.getBlockDescription();
        boolean boolean70 = jSDocInfo62.hasFileOverview();
        node50.setJSDocInfo(jSDocInfo62);
        boolean boolean72 = node50.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(51, nodeArray6, 48, 32);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(42, nodeArray6, 32, 12);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(41, nodeArray6, 0, 53);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, nodeArray6);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6);
        java.lang.String str19 = node18.getSourceFileName();
        node18.setLineno(0);
        com.google.javascript.rhino.Node node22 = node18.getParent();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList71.asList();
        java.util.Iterator<java.io.Serializable> serializableItor73 = serializableList71.iterator();
        java.lang.Object[] objArray74 = serializableList71.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertNotNull(serializableItor73);
        org.junit.Assert.assertNotNull(objArray74);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility8);
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("STRING Unknown class name");
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor24 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor25 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.io.Serializable> serializableItor27 = serializableList17.listIterator(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (40) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(serializableItor25);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.util.Iterator<java.io.Serializable> serializableItor49 = serializableList20.iterator();
        java.lang.Object[] objArray50 = serializableList20.toArray();
        boolean boolean51 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList20);
        boolean boolean52 = strSet2.isEmpty();
        strSet2.clear();
        int int54 = strSet2.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableItor49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Iterator<java.io.Serializable> serializableItor28 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableItor28);
        org.junit.Assert.assertNotNull(serializableItor29);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        boolean boolean9 = jSDocInfo0.isDefine();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasModifies();
        boolean boolean2 = jSDocInfo0.hasBaseType();
        boolean boolean3 = jSDocInfo0.isExport();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.lang.String str8 = jSDocInfo0.getVersion();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4);
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(51, nodeArray12, 48, 32);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(42, nodeArray12, 32, 12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(36, nodeArray12);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList20 = com.google.common.collect.ImmutableList.copyOf(nodeArray12);
        com.google.javascript.rhino.Node[] nodeArray25 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(51, nodeArray25, 48, 32);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(45, nodeArray25);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(40, nodeArray25, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(51, nodeArray40, 48, 32);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(42, nodeArray40, 32, 12);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(36, nodeArray40);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(41, nodeArray40, 0, 53);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(39, nodeArray40);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray40);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(51, nodeArray57, 48, 32);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(45, nodeArray57);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(40, nodeArray57, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray67 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(51, nodeArray67, 48, 32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList71 = com.google.common.collect.ImmutableList.of(nodeArray4, nodeArray12, nodeArray25, nodeArray40, nodeArray57, nodeArray67);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(45, nodeArray4, 16, (int) (byte) 1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(53, nodeArray4, 45, (int) 'a');
        boolean boolean78 = node77.isDec();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertNotNull(nodeList20);
        org.junit.Assert.assertNotNull(nodeArray25);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(nodeArray67);
        org.junit.Assert.assertNotNull(nodeArrayList71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        boolean boolean3 = node1.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.shouldPreserveTry();
        int int13 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node63 = node62.getLastSibling();
        boolean boolean64 = node60.isEquivalentTo(node62);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node73 = node68.srcref(node71);
        com.google.javascript.rhino.Node node74 = node60.copyInformationFrom(node71);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = new com.google.javascript.rhino.JSTypeExpression(node60, "java.io.IOException: Unknown class name");
        boolean boolean77 = jSTypeExpression76.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression76);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeExpression78.evaluate(jSTypeStaticScope79, jSTypeRegistry80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression78);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(51, nodeArray3, 48, 32);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray3);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(51, nodeArray3, 53, (int) (byte) 100);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean35 = node8.isEquivalentTo(node34);
        com.google.javascript.rhino.Node node36 = node8.getLastSibling();
        boolean boolean37 = node8.isIn();
        boolean boolean38 = node8.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(markerCollection6);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        boolean boolean81 = node55.isBlock();
        com.google.javascript.rhino.Node node82 = node55.removeChildren();
        boolean boolean83 = node55.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        int int21 = node20.getLineno();
        jSDocInfo0.setAssociatedNode(node20);
        boolean boolean23 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getParameterType("NAME 51");
        java.util.Set<java.lang.String> strSet26 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        int int28 = jSDocInfo27.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = null;
        jSDocInfo27.setVisibility(visibility29);
        boolean boolean31 = jSDocInfo27.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo27.setVisibility(visibility32);
        jSDocInfo0.setVisibility(visibility32);
        boolean boolean35 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean10 = jSDocInfo0.isDefine();
        jSDocInfo0.setLicense("java.io.IOException: java.io.IOException");
        jSDocInfo0.addSuppression("(Not declared as a type name)");
        jSDocInfo0.addSuppression("InputId: JSDocInfo");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = node17.isTrue();
        boolean boolean20 = node17.isNoSideEffectsCall();
        boolean boolean21 = node17.isCase();
        boolean boolean22 = node17.isIn();
        boolean boolean23 = node4.isEquivalentTo(node17);
        boolean boolean24 = node4.isObjectLit();
        boolean boolean25 = node4.isName();
        boolean boolean26 = node4.wasEmptyNode();
        java.io.Serializable[] serializableArray43 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList44 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray43);
        boolean boolean45 = serializableList44.isEmpty();
        boolean boolean47 = serializableList44.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableList44.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor49 = serializableList44.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor50 = serializableList44.listIterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList44.parallelStream();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition52 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int53 = namePosition52.getPositionOnEndLine();
        int int54 = serializableList44.indexOf((java.lang.Object) int53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isQuotedString();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node62 = node61.getLastSibling();
        int int63 = node61.getSourcePosition();
        com.google.javascript.rhino.Node node64 = node58.srcrefTree(node61);
        boolean boolean65 = node58.isVarArgs();
        node58.setSourceFileForTesting("(Not declared as a type name)");
        boolean boolean68 = serializableList44.equals((java.lang.Object) node58);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(31, node4, node58);
        com.google.javascript.rhino.Node node70 = node4.cloneTree();
        java.lang.String str71 = node70.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(serializableArray43);
        org.junit.Assert.assertNotNull(serializableList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serializableStream48);
        org.junit.Assert.assertNotNull(serializableItor49);
        org.junit.Assert.assertNotNull(serializableItor50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) 'a', "(Unknown class name)", 44, 16);
        node4.setLineno(30);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor28 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        boolean boolean48 = node46.isString();
        boolean boolean49 = node46.isStringKey();
        com.google.javascript.rhino.Node node50 = node33.copyInformationFrom(node46);
        boolean boolean51 = node33.isIn();
        boolean boolean52 = node33.isEmpty();
        boolean boolean53 = serializableList17.equals((java.lang.Object) node33);
        java.util.Iterator<java.io.Serializable> serializableItor54 = serializableList17.iterator();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        node67.setStaticSourceFile(staticSourceFile68);
        com.google.javascript.rhino.Node node70 = node67.getLastSibling();
        boolean boolean71 = node70.hasMoreThanOneChild();
        int int72 = serializableList17.indexOf((java.lang.Object) node70);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableItor28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableItor54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        boolean boolean49 = serializableList46.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableList46.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo53.getParameterNames();
        boolean boolean56 = serializableList46.contains((java.lang.Object) strSet55);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator57 = serializableList46.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList46.iterator();
        boolean boolean59 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList46);
        java.lang.Object[] objArray60 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator61 = serializableList17.spliterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator62 = serializableList17.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator61);
        org.junit.Assert.assertNotNull(serializableSpliterator62);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) 'a', (int) (byte) 0, 43);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        int int49 = node4.getChildCount();
        boolean boolean50 = node4.isContinue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node4.siblings();
        com.google.javascript.rhino.jstype.JSType jSType52 = node4.getJSType();
        boolean boolean54 = node4.getBooleanProp((-2147483648));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(InputId: true)", 12, 38);
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isInstanceOf();
        node3.setString("((Unknown class name))");
        boolean boolean8 = node3.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 38 + "'", int4 == 38);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node3.getLength();
        int int14 = node3.getType();
        boolean boolean15 = node3.isReturn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        node36.putBooleanProp((int) (byte) 1, true);
        boolean boolean40 = node36.isTypeOf();
        boolean boolean41 = node36.isBreak();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51, nodeArray46, 48, 32);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(15, nodeArray46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray46);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node52.getStaticSourceFile();
        node36.addChildrenToFront(node52);
        com.google.javascript.rhino.InputId inputId55 = node52.getInputId();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = node52.checkTreeEquals(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertNull(inputId55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node13.children();
        boolean boolean15 = node13.isNull();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isString();
        com.google.javascript.rhino.Node node35 = node19.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        java.lang.Object obj39 = node35.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(54, node13, node35);
        boolean boolean41 = node35.isUnscopedQualifiedName();
        boolean boolean43 = node35.getBooleanProp((int) (short) 0);
        int int45 = node35.getIntProp(32);
        boolean boolean46 = node35.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        boolean boolean6 = node3.isStringKey();
        int int7 = node3.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        boolean boolean29 = node27.isDec();
        boolean boolean30 = node27.isScript();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node22, node27, node34, 0, (int) (short) 0);
        boolean boolean38 = node34.isLabel();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean41 = node40.isBreak();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        int int81 = node63.getSourcePosition();
        com.google.javascript.rhino.Node node82 = node40.srcref(node63);
        com.google.javascript.rhino.Node node83 = node34.clonePropsFrom(node82);
        int int84 = node3.getIndexOfChild(node83);
        boolean boolean85 = node3.isTypeOf();
        boolean boolean86 = node3.isWhile();
        com.google.javascript.rhino.InputId inputId87 = node3.getInputId();
        com.google.javascript.rhino.jstype.JSType jSType88 = null;
        node3.setJSType(jSType88);
        int int90 = node3.getSourcePosition();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(inputId87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("SHNE", (int) (byte) 10, 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node8.isParamList();
        boolean boolean20 = node8.isAssignAdd();
        boolean boolean21 = node8.isQualifiedName();
        boolean boolean22 = node8.isTry();
        boolean boolean23 = node8.isNumber();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags13.setAllFlags();
        sideEffectFlags13.clearSideEffectFlags();
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.clearSideEffectFlags();
        sideEffectFlags13.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        boolean boolean27 = node25.isString();
        com.google.javascript.rhino.Node node28 = node12.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.InputId inputId29 = null;
        node28.setInputId(inputId29);
        node28.setWasEmptyNode(false);
        int int34 = node28.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isQualifiedName();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node44.addChildrenToBack(node49);
        boolean boolean60 = node44.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = node39.copyInformationFromForTree(node44);
        boolean boolean62 = node44.isParamList();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(38, node44, 51, 38);
        com.google.javascript.rhino.Node node66 = node28.clonePropsFrom(node44);
        com.google.javascript.rhino.Node node67 = node3.copyInformationFromForTree(node28);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = node28.getStaticSourceFile();
        boolean boolean69 = node28.isThrow();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean5 = node4.isAssign();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 42, 9);
        node9.detachChildren();
        boolean boolean11 = node9.isDec();
        boolean boolean12 = node9.isRegExp();
        boolean boolean13 = node9.isFalse();
        java.lang.String str14 = node9.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(44);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        int int8 = node6.getSourcePosition();
        com.google.javascript.rhino.Node node9 = node3.srcrefTree(node6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isLabelName();
        boolean boolean49 = node47.isTrue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 0, node23, node47, node53, node67, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        boolean boolean76 = node74.isDo();
        boolean boolean77 = node67.isEquivalentTo(node74);
        node67.putIntProp(12, 53);
        com.google.javascript.rhino.Node node81 = node67.cloneTree();
        com.google.javascript.rhino.Node node82 = node6.copyInformationFromForTree(node67);
        boolean boolean83 = node6.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        node3.setOptionalArg(true);
        node3.setSourceEncodedPosition(41);
        boolean boolean11 = node3.isDebugger();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(9, 39, 100);
        node15.setLength(35);
        com.google.javascript.rhino.Node node18 = node3.srcrefTree(node15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList4 = ternaryValueEnumBuilder3.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList9 = com.google.common.collect.ImmutableList.of(ternaryValue5, ternaryValue6, ternaryValue7, ternaryValue8);
        java.lang.String str10 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList15 = com.google.common.collect.ImmutableList.of(ternaryValue11, ternaryValue12, ternaryValue13, ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue7.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue12.xor(ternaryValue17);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder23 = ternaryValueEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue17);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>> ternaryValueEnumBuilderList24 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>) ternaryValueEnumBuilder23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList34 = com.google.common.collect.ImmutableList.of(ternaryValue30, ternaryValue31, ternaryValue32, ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue26.xor(ternaryValue32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder36 = ternaryValueEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder38 = ternaryValueEnumBuilder36.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue37.not();
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValueEnumList4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValueList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValueList15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder23);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderList24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValueList34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder38);
        org.junit.Assert.assertNotNull(ternaryValue39);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isConstructor();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str13 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        boolean boolean4 = node2.isBlock();
        boolean boolean5 = node2.isOptionalArg();
        node2.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "InputId: java.io.IOException: java.io.IOException");
        boolean boolean3 = node2.isFalse();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(51, nodeArray9, 48, 32);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(42, nodeArray9, 32, 12);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(36, nodeArray9);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(41, nodeArray9, 0, 53);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray9, 37, 63);
        int int23 = node22.getChildCount();
        com.google.javascript.rhino.Node node24 = node2.useSourceInfoFrom(node22);
        boolean boolean25 = node22.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId3 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList8 = com.google.common.collect.ImmutableList.of(inputId1, inputId3, inputId5, inputId7);
        com.google.javascript.rhino.InputId inputId10 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId14 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId20 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList21 = com.google.common.collect.ImmutableList.of(inputId14, inputId16, inputId18, inputId20);
        com.google.javascript.rhino.InputId inputId23 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId25 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId27 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId29 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList30 = com.google.common.collect.ImmutableList.of(inputId23, inputId25, inputId27, inputId29);
        com.google.javascript.rhino.InputId inputId32 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId34 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId36 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId38 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList39 = com.google.common.collect.ImmutableList.of(inputId32, inputId34, inputId36, inputId38);
        com.google.javascript.rhino.InputId inputId41 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId43 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId45 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId49 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList50 = com.google.common.collect.ImmutableList.of(inputId43, inputId45, inputId47, inputId49);
        com.google.javascript.rhino.InputId inputId52 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId54 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId56 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId58 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList59 = com.google.common.collect.ImmutableList.of(inputId52, inputId54, inputId56, inputId58);
        com.google.javascript.rhino.InputId inputId61 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId63 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId65 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId67 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList68 = com.google.common.collect.ImmutableList.of(inputId61, inputId63, inputId65, inputId67);
        java.lang.String str69 = inputId65.getIdName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList70 = com.google.common.collect.ImmutableList.of(inputId1, inputId10, inputId12, inputId14, inputId23, inputId34, inputId41, inputId43, inputId54, inputId65);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node79.setJSType(jSType81);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean87 = node86.isContinue();
        com.google.javascript.rhino.Node node88 = node79.clonePropsFrom(node86);
        node74.addChildrenToBack(node79);
        boolean boolean90 = node74.isLocalResultCall();
        int int91 = node74.getLength();
        boolean boolean92 = inputId10.equals((java.lang.Object) node74);
        int int93 = node74.getCharno();
        org.junit.Assert.assertNotNull(inputIdList8);
        org.junit.Assert.assertNotNull(inputIdList21);
        org.junit.Assert.assertNotNull(inputIdList30);
        org.junit.Assert.assertNotNull(inputIdList39);
        org.junit.Assert.assertNotNull(inputIdList50);
        org.junit.Assert.assertNotNull(inputIdList59);
        org.junit.Assert.assertNotNull(inputIdList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "true" + "'", str69, "true");
        org.junit.Assert.assertNotNull(inputIdList70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasModifies();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.isConstructor();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("unknown");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getParameterType("(InputId: java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator22 = serializableList17.spliterator();
        java.lang.Object[] objArray23 = serializableList17.toArray();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = serializableList17.subList(37, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (37) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableSpliterator22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        boolean boolean21 = node12.isDefaultCase();
        boolean boolean22 = node12.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        boolean boolean27 = jSDocInfo23.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = jSDocInfo23.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo23.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo23.getVisibility();
        node12.setJSDocInfo(jSDocInfo23);
        // The following exception was thrown during execution in test generation
        try {
            node12.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(visibility30);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId33 = node13.getInputId();
        node13.setOptionalArg(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean40 = node13.isEquivalentTo(node39);
        boolean boolean41 = node13.isRegExp();
        boolean boolean42 = node13.isWhile();
        boolean boolean43 = node13.isCatch();
        jSDocInfo0.setAssociatedNode(node13);
        boolean boolean45 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        boolean boolean86 = node69.isDo();
        boolean boolean87 = node69.isNew();
        boolean boolean88 = node69.isCatch();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node13.children();
        boolean boolean63 = node13.isAssign();
        boolean boolean64 = node13.isObjectLit();
        boolean boolean65 = node13.hasChildren();
        boolean boolean66 = node13.isObjectLit();
        com.google.javascript.rhino.InputId inputId67 = node13.getInputId();
        // The following exception was thrown during execution in test generation
        try {
            node13.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(inputId67);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.lang.Throwable[] throwableArray10 = iOException8.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException();
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException();
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.lang.Throwable[] throwableArray17 = iOException15.getSuppressed();
        java.io.IOException iOException18 = new java.io.IOException();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException31 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList32 = com.google.common.collect.ImmutableList.of(iOException2, iOException6, iOException8, iOException12, iOException15, iOException19, iOException22, iOException24, iOException26, iOException30, iOException31);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException34 = new java.io.IOException("(Unknown class name)", (java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException("SHNE");
        iOException34.addSuppressed((java.lang.Throwable) iOException36);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(iOExceptionList32);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        java.io.Serializable[] serializableArray17 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList18 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray17);
        boolean boolean19 = serializableList18.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        boolean boolean46 = serializableList18.contains((java.lang.Object) node28);
        int int47 = node28.getSourcePosition();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        boolean boolean53 = node51.isDec();
        boolean boolean54 = node51.isNoSideEffectsCall();
        node28.addChildToBack(node51);
        node51.setLineno(4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(38, node51, (-8), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(serializableList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        boolean boolean80 = node55.isAssignAdd();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean84 = node83.isCase();
        com.google.javascript.rhino.Node node85 = node55.clonePropsFrom(node83);
        boolean boolean86 = node85.isFunction();
        node85.putIntProp(54, 10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node85, "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList19 = serializableList17.asList();
        boolean boolean20 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        node33.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node53 = node24.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isInstanceOf();
        boolean boolean59 = node57.isComma();
        boolean boolean60 = node24.isEquivalentTo(node57);
        boolean boolean61 = node57.isComma();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node65.setJSType(jSType67);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isContinue();
        com.google.javascript.rhino.Node node74 = node65.clonePropsFrom(node72);
        boolean boolean75 = node74.isQuotedString();
        int int76 = node74.getCharno();
        boolean boolean77 = node74.isDec();
        com.google.javascript.rhino.Node node78 = node57.useSourceInfoFrom(node74);
        int int80 = node74.getIntProp((int) (byte) 0);
        int int81 = node74.getType();
        boolean boolean82 = serializableList17.equals((java.lang.Object) node74);
        java.util.stream.Stream<java.io.Serializable> serializableStream83 = serializableList17.parallelStream();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(serializableStream83);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        int int2 = typePosition0.getPositionOnEndLine();
        int int3 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        java.lang.String str17 = staticSourceFile16.getName();
        int int19 = staticSourceFile16.getLineOffset(51);
        boolean boolean20 = staticSourceFile16.isExtern();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        boolean boolean66 = typePosition0.hasBrackets();
        int int67 = typePosition0.getPositionOnEndLine();
        int int68 = typePosition0.getStartLine();
        int int69 = typePosition0.getPositionOnStartLine();
        boolean boolean70 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node71 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        boolean boolean9 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        node27.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node47 = node18.clonePropsFrom(node27);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isInstanceOf();
        boolean boolean53 = node51.isComma();
        boolean boolean54 = node18.isEquivalentTo(node51);
        boolean boolean55 = node51.isComma();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', node14, node51, 42, (int) ' ');
        boolean boolean59 = node58.isComma();
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        boolean boolean61 = node58.isWith();
        com.google.javascript.rhino.Node node62 = node3.copyInformationFromForTree(node58);
        boolean boolean63 = node62.isLocalResultCall();
        com.google.javascript.rhino.Node node64 = node62.getNext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        boolean boolean16 = node14.isTrue();
        boolean boolean17 = node14.isFromExterns();
        boolean boolean18 = node14.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node19 = node6.srcrefTree(node14);
        boolean boolean20 = node6.isDefaultCase();
        int int21 = node6.getLineno();
        boolean boolean22 = node6.isComma();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node50 = node41.clonePropsFrom(node48);
        node36.addChildrenToBack(node41);
        boolean boolean52 = node36.isLocalResultCall();
        com.google.javascript.rhino.Node node53 = node31.copyInformationFromForTree(node36);
        node36.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node56 = node27.clonePropsFrom(node36);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        boolean boolean62 = node60.isTrue();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node71.setJSType(jSType73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        com.google.javascript.rhino.Node node80 = node71.clonePropsFrom(node78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 0, node36, node60, node66, node80, 10, (int) (byte) -1);
        boolean boolean84 = node60.isNumber();
        com.google.javascript.rhino.Node node85 = node6.copyInformationFrom(node60);
        typePosition0.setItem(node85);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        node13.setSourceFileForTesting("hi!");
        boolean boolean16 = node13.isIf();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node13);
        boolean boolean18 = node17.isFalse();
        java.util.Set<java.lang.String> strSet19 = node17.getDirectives();
        boolean boolean20 = node17.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = node17.toString(false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Number node not created with Node.newNumber");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        java.lang.String str17 = staticSourceFile16.getName();
        java.lang.String str18 = staticSourceFile16.getName();
        int int20 = staticSourceFile16.getLineOfOffset(29);
        int int22 = staticSourceFile16.getLineOffset(54);
        java.lang.String str23 = staticSourceFile16.getName();
        int int25 = staticSourceFile16.getColumnOfOffset(48);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2147483648) + "'", int22 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.lang.Object obj6 = null;
        boolean boolean7 = strSet5.equals(obj6);
        strSet5.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        node20.setWasEmptyNode(false);
        int int26 = node20.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node50 = node41.clonePropsFrom(node48);
        node36.addChildrenToBack(node41);
        boolean boolean52 = node36.isLocalResultCall();
        com.google.javascript.rhino.Node node53 = node31.copyInformationFromForTree(node36);
        boolean boolean54 = node36.isParamList();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(38, node36, 51, 38);
        com.google.javascript.rhino.Node node58 = node20.clonePropsFrom(node36);
        boolean boolean59 = node36.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(131172, node36, 41011, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor19 = serializableList17.listIterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList25 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue22, ternaryValue23, ternaryValue24);
        java.lang.String str26 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList31 = com.google.common.collect.ImmutableList.of(ternaryValue27, ternaryValue28, ternaryValue29, ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue23.or(ternaryValue28);
        java.lang.String str33 = ternaryValue28.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue20.xor(ternaryValue28);
        int int35 = serializableList17.lastIndexOf((java.lang.Object) ternaryValue20);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean40 = serializableList17.contains((java.lang.Object) node39);
        com.google.javascript.rhino.Node node41 = node39.getLastSibling();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        int int62 = node45.getLength();
        boolean boolean63 = node45.isSwitch();
        com.google.javascript.rhino.Node node64 = node39.useSourceInfoIfMissingFromForTree(node45);
        int int65 = node39.getSourcePosition();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableItor19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValueList31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean5 = node4.isAssign();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 42, 9);
        boolean boolean10 = node4.isDefaultCase();
        java.lang.String str11 = node4.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING [0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30] 32\n" + "'", str11, "STRING [0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30] 32\n");
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        java.lang.String str17 = staticSourceFile16.getName();
        boolean boolean18 = staticSourceFile16.isExtern();
        int int20 = staticSourceFile16.getColumnOfOffset(44);
        int int22 = staticSourceFile16.getColumnOfOffset(15);
        int int24 = staticSourceFile16.getColumnOfOffset(42);
        boolean boolean25 = staticSourceFile16.isExtern();
        int int27 = staticSourceFile16.getColumnOfOffset(51);
        int int29 = staticSourceFile16.getLineOfOffset((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        java.lang.String str9 = jSDocInfo0.getDescription();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(51, nodeArray6, 48, 32);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(48, nodeArray6, 48, 40);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(44, nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) 'a', nodeArray6, 49, 38);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        boolean boolean24 = node22.isDec();
        boolean boolean25 = node22.isNoSideEffectsCall();
        boolean boolean26 = node22.isIf();
        com.google.javascript.rhino.Node node27 = node22.getLastSibling();
        node27.setLineno(45);
        java.lang.String str30 = node27.getQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(32, node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        boolean boolean35 = node33.isDelProp();
        boolean boolean36 = node33.isLocalResultCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(6, node17, node31, node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(35, "", 10, (int) (byte) -1);
        boolean boolean44 = node33.hasChild(node43);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node43.getJsDocBuilderForNode();
        fileLevelJsDocBuilder45.append("");
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        boolean boolean31 = node13.isString();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node13.getAncestors();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean72 = node36.isOnlyModifiesThisCall();
        node36.putBooleanProp(29, false);
        node13.addChildToFront(node36);
        boolean boolean77 = node13.isSetterDef();
        boolean boolean78 = node13.isCall();
        com.google.javascript.rhino.Node node79 = node13.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        node15.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node35 = node6.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node36 = node35.getLastSibling();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean39 = node38.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(0, node35, node38, (-1), 43);
        com.google.javascript.rhino.Node node43 = node1.useSourceInfoIfMissingFrom(node42);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node3.getCharno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node13.setStaticSourceFile(staticSourceFile14);
        java.lang.Object obj17 = node13.getProp((-2147483648));
        boolean boolean18 = node13.isWith();
        boolean boolean19 = node13.isCall();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        boolean boolean25 = node23.isHook();
        int int26 = node23.getLength();
        java.io.Serializable[] serializableArray43 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList44 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray43);
        boolean boolean45 = serializableList44.isEmpty();
        boolean boolean47 = serializableList44.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableList44.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream49 = serializableList44.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList44.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        int int52 = jSDocInfo51.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo51.getParameterNames();
        boolean boolean54 = serializableList44.contains((java.lang.Object) strSet53);
        node23.setDirectives(strSet53);
        node23.setIsSyntheticBlock(false);
        boolean boolean59 = node23.getBooleanProp(47);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(37, node13, node23, 37, (int) (byte) -1);
        boolean boolean63 = node62.isHook();
        node62.setSourceEncodedPosition(46);
        boolean boolean66 = node62.isFor();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(serializableArray43);
        org.junit.Assert.assertNotNull(serializableList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serializableStream48);
        org.junit.Assert.assertNotNull(serializableStream49);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((-1), "", 0, 12);
        com.google.javascript.rhino.Node node5 = null;
        boolean boolean6 = node4.hasChild(node5);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        int int68 = typePosition0.getPositionOnEndLine();
        int int69 = typePosition0.getPositionOnStartLine();
        boolean boolean70 = typePosition0.hasBrackets();
        int int71 = typePosition0.getEndLine();
        int int72 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.isParamList();
        boolean boolean27 = node8.isQualifiedName();
        boolean boolean28 = node8.isFunction();
        com.google.javascript.rhino.Node node29 = node8.getNext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker3.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker3.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker3.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker3.getAnnotation();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition17);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setDeprecated(true);
        boolean boolean11 = jSDocInfo0.hasBaseType();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        java.lang.String str13 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        int int15 = jSDocInfo14.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo14.getParameterNames();
        java.lang.String str17 = jSDocInfo14.getSourceName();
        boolean boolean18 = jSDocInfo14.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo14.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo14.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        boolean boolean27 = jSDocInfo23.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo23.setVisibility(visibility28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = null;
        jSDocInfo30.setVisibility(visibility32);
        boolean boolean34 = jSDocInfo30.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo30.setVisibility(visibility35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        int int38 = jSDocInfo37.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = null;
        jSDocInfo37.setVisibility(visibility39);
        boolean boolean41 = jSDocInfo37.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo37.setVisibility(visibility42);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList49 = com.google.common.collect.ImmutableList.of(visibility21, visibility22, visibility28, visibility35, visibility42, visibility44, visibility45, visibility46, visibility47, visibility48);
        jSDocInfo14.setVisibility(visibility45);
        jSDocInfo0.setVisibility(visibility45);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility46 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility46.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList49);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.lang.String str28 = serializableList17.toString();
        java.lang.Object[] objArray29 = serializableList17.toArray();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str28, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet11.union(booleanLiteralSet29);
        boolean boolean32 = booleanLiteralSet29.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isConstructor();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("");
        boolean boolean11 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.io.Serializable[] serializableArray29 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList30 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray29);
        boolean boolean31 = serializableList30.isEmpty();
        boolean boolean33 = serializableList30.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableList30.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableList30.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream36 = serializableList30.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        int int38 = jSDocInfo37.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo37.getParameterNames();
        boolean boolean40 = serializableList30.contains((java.lang.Object) strSet39);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator41 = serializableList30.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor42 = serializableList30.iterator();
        java.io.Serializable[] serializableArray59 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList60 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray59);
        boolean boolean61 = serializableList60.isEmpty();
        boolean boolean63 = serializableList60.contains((java.lang.Object) 52);
        boolean boolean65 = serializableList60.contains((java.lang.Object) (byte) 0);
        boolean boolean66 = serializableList30.containsAll((java.util.Collection<java.io.Serializable>) serializableList60);
        int int67 = serializableList60.size();
        java.util.ListIterator<java.io.Serializable> serializableItor68 = serializableList60.listIterator();
        int int69 = serializableList60.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        int int71 = jSDocInfo70.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = null;
        jSDocInfo70.setVisibility(visibility72);
        java.lang.String str74 = jSDocInfo70.getMeaning();
        java.lang.String str75 = jSDocInfo70.getVersion();
        boolean boolean76 = jSDocInfo70.isNoSideEffects();
        boolean boolean77 = serializableList60.contains((java.lang.Object) jSDocInfo70);
        boolean boolean78 = strSet12.removeAll((java.util.Collection<java.io.Serializable>) serializableList60);
        java.util.stream.Stream<java.io.Serializable> serializableStream79 = serializableList60.parallelStream();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(serializableArray29);
        org.junit.Assert.assertNotNull(serializableList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertNotNull(serializableStream36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator41);
        org.junit.Assert.assertNotNull(serializableItor42);
        org.junit.Assert.assertNotNull(serializableArray59);
        org.junit.Assert.assertNotNull(serializableList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 16 + "'", int67 == 16);
        org.junit.Assert.assertNotNull(serializableItor68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 16 + "'", int69 == 16);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(serializableStream79);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "TYPEOF 10\n", 43, (-1));
        com.google.javascript.rhino.Node node5 = node4.cloneNode();
        boolean boolean6 = node4.isInc();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        node2.removeProp(4095);
        java.util.Set<java.lang.String> strSet6 = node2.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getStartLine();
        stringPosition0.setItem("NAME 51");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        boolean boolean31 = node13.isString();
        boolean boolean32 = node13.isAnd();
        com.google.javascript.rhino.Node node33 = node13.getLastChild();
        java.io.Serializable[] serializableArray50 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList51 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray50);
        boolean boolean52 = serializableList51.isEmpty();
        boolean boolean54 = serializableList51.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream55 = serializableList51.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor56 = serializableList51.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor57 = serializableList51.listIterator();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isQualifiedName();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node71.setJSType(jSType73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        com.google.javascript.rhino.Node node80 = node71.clonePropsFrom(node78);
        node66.addChildrenToBack(node71);
        boolean boolean82 = node66.isLocalResultCall();
        com.google.javascript.rhino.Node node83 = node61.copyInformationFromForTree(node66);
        node66.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId86 = node66.getInputId();
        node66.setLineno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable89 = node66.getAncestors();
        int int90 = serializableList51.indexOf((java.lang.Object) node66);
        boolean boolean91 = node66.isSyntheticBlock();
        boolean boolean92 = node66.isFunction();
        // The following exception was thrown during execution in test generation
        try {
            node33.addChildrenToBack(node66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(serializableArray50);
        org.junit.Assert.assertNotNull(serializableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableStream55);
        org.junit.Assert.assertNotNull(serializableItor56);
        org.junit.Assert.assertNotNull(serializableItor57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(inputId86);
        org.junit.Assert.assertNotNull(ancestorIterable89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.toString();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker10.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker10.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = marker10.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(typePosition16);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.isNoAlias();
        boolean boolean13 = jSDocInfo10.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean14 = jSDocInfo10.isExterns();
        boolean boolean15 = jSDocInfo10.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getBaseType();
        java.lang.String str17 = jSDocInfo10.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo10.getBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        int int20 = jSDocInfo19.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = null;
        jSDocInfo19.setVisibility(visibility21);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection23 = jSDocInfo19.getMarkers();
        boolean boolean24 = jSDocInfo19.isNoCompile();
        java.lang.String str25 = jSDocInfo19.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        int int30 = jSDocInfo29.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = null;
        jSDocInfo29.setVisibility(visibility31);
        boolean boolean33 = jSDocInfo29.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo29.setVisibility(visibility34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        int int37 = jSDocInfo36.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = null;
        jSDocInfo36.setVisibility(visibility38);
        boolean boolean40 = jSDocInfo36.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo36.setVisibility(visibility41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo43.setVisibility(visibility48);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList55 = com.google.common.collect.ImmutableList.of(visibility27, visibility28, visibility34, visibility41, visibility48, visibility50, visibility51, visibility52, visibility53, visibility54);
        jSDocInfo19.setVisibility(visibility50);
        jSDocInfo10.setVisibility(visibility50);
        jSDocInfo0.setVisibility(visibility50);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(markerCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList55);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList16 = com.google.common.collect.ImmutableList.of(ternaryValue12, ternaryValue13, ternaryValue14, ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList22 = com.google.common.collect.ImmutableList.of(ternaryValue18, ternaryValue19, ternaryValue20, ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue19.xor(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        java.lang.String str34 = ternaryValue31.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue31.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList45 = com.google.common.collect.ImmutableList.of(ternaryValue41, ternaryValue42, ternaryValue43, ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue36.xor(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue28.xor(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue17.and(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        java.lang.String str54 = ternaryValue51.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue51.or(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue56.xor(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList71 = com.google.common.collect.ImmutableList.of(ternaryValue67, ternaryValue68, ternaryValue69, ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue61.xor(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue61.or(ternaryValue73);
        boolean boolean76 = ternaryValue74.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue17.xor(ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue17.not();
        boolean boolean80 = ternaryValue78.toBoolean(false);
        boolean boolean82 = ternaryValue78.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValueList16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValueList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueList45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValueList71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQuotedString();
        boolean boolean6 = node4.isUnscopedQualifiedName();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isInstanceOf();
        boolean boolean47 = node45.isComma();
        boolean boolean48 = node12.isEquivalentTo(node45);
        boolean boolean49 = node45.isComma();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        boolean boolean63 = node62.isQuotedString();
        int int64 = node62.getCharno();
        boolean boolean65 = node62.isDec();
        com.google.javascript.rhino.Node node66 = node45.useSourceInfoFrom(node62);
        boolean boolean67 = node66.isDefaultCase();
        boolean boolean68 = node66.isStringKey();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        boolean boolean74 = node72.isDec();
        boolean boolean75 = node72.isNoSideEffectsCall();
        boolean boolean76 = node72.isLocalResultCall();
        com.google.javascript.rhino.Node node78 = node72.getAncestor(4095);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(47, node4, node66, node72, 44, (int) (short) 1);
        int int82 = node66.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        boolean boolean9 = jSDocInfo5.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        boolean boolean44 = node43.isVoid();
        boolean boolean45 = node43.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node18.isDec();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        boolean boolean58 = node38.isName();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node38.hasChild(node62);
        com.google.javascript.rhino.Node node65 = node18.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean66 = node65.isBreak();
        boolean boolean67 = node65.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node65.setJSType(jSType68);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (short) 0);
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        node71.setJSType(jSType72);
        node71.removeProp(54);
        boolean boolean76 = node65.hasChild(node71);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: NUMBER -1.0 12");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(54);
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(visibility9);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 27, 38, 4095);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, 44, (int) (short) 100);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        boolean boolean8 = strSet4.equals((java.lang.Object) 12);
        java.util.Iterator<java.lang.String> strItor9 = strSet4.iterator();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        boolean boolean55 = serializableList27.contains((java.lang.Object) node37);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor56 = serializableList27.iterator();
        boolean boolean57 = strSet4.retainAll((java.util.Collection<java.io.Serializable>) serializableList27);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor58 = serializableList27.listIterator();
        java.lang.Object obj59 = null;
        boolean boolean60 = serializableList27.equals(obj59);
        java.util.Collection<java.io.Serializable> serializableCollection61 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = serializableList27.retainAll(serializableCollection61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = staticSourceFile63.getName();
        boolean boolean65 = staticSourceFile63.isExtern();
        node45.setStaticSourceFile(staticSourceFile63);
        int int67 = node45.getSourcePosition();
        boolean boolean68 = node45.isDec();
        boolean boolean69 = node45.isString();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean74 = node73.hasChildren();
        boolean boolean75 = node73.isReturn();
        java.lang.String str76 = node45.checkTreeEquals(node73);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(staticSourceFile63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.hasOneChild();
        node3.setIsSyntheticBlock(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        boolean boolean46 = node44.isTrue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node20, node44, node50, node64, 10, (int) (byte) -1);
        boolean boolean68 = node64.isGetProp();
        jSDocInfo0.setAssociatedNode(node64);
        boolean boolean70 = jSDocInfo0.isExport();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection71 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isInstanceOf();
        boolean boolean77 = node75.isComma();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node75.setStaticSourceFile(staticSourceFile78);
        node75.setOptionalArg(false);
        jSDocInfo0.setAssociatedNode(node75);
        boolean boolean83 = jSDocInfo0.hasType();
        jSDocInfo0.setLicense("(java.io.IOException: java.io.IOException)");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList86 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean87 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeCollection71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TernaryValue[][]> ternaryValueArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(ternaryValueArrayBuilder0);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        boolean boolean7 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        boolean boolean13 = node11.isString();
        boolean boolean14 = node11.isStringKey();
        int int15 = node11.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node11.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        boolean boolean31 = node30.isQuotedString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        boolean boolean37 = node35.isDec();
        boolean boolean38 = node35.isScript();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, node30, node35, node42, 0, (int) (short) 0);
        boolean boolean46 = node42.isLabel();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean49 = node48.isBreak();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        boolean boolean55 = node53.isBlock();
        node53.removeProp(12);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node62.setJSType(jSType64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node62.clonePropsFrom(node69);
        boolean boolean72 = node71.isQuotedString();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        boolean boolean78 = node76.isDec();
        boolean boolean79 = node76.isScript();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(0, node71, node76, node83, 0, (int) (short) 0);
        boolean boolean87 = node71.isTrue();
        com.google.javascript.rhino.Node node88 = node53.useSourceInfoIfMissingFromForTree(node71);
        int int89 = node71.getSourcePosition();
        com.google.javascript.rhino.Node node90 = node48.srcref(node71);
        com.google.javascript.rhino.Node node91 = node42.clonePropsFrom(node90);
        int int92 = node11.getIndexOfChild(node91);
        com.google.javascript.rhino.Node node93 = node3.copyInformationFromForTree(node91);
        com.google.javascript.rhino.Node node95 = com.google.javascript.rhino.Node.newString("java.io.IOException: Unknown class name");
        com.google.javascript.rhino.Node node96 = node91.useSourceInfoIfMissingFrom(node95);
        boolean boolean97 = node91.isCatch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node37.isNumber();
        boolean boolean62 = node37.isString();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        boolean boolean69 = node67.isDec();
        boolean boolean70 = node67.isAssign();
        boolean boolean71 = node67.isIn();
        node67.setCharno((int) (short) 0);
        node37.putProp(32, (java.lang.Object) node67);
        node37.setIsSyntheticBlock(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(51, nodeArray1, 48, 32);
        boolean boolean5 = node4.isFalse();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str8 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId52 = node32.getInputId();
        node32.setLineno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node32.getAncestors();
        int int56 = serializableList17.indexOf((java.lang.Object) node32);
        boolean boolean57 = node32.isSyntheticBlock();
        boolean boolean58 = node32.isNoSideEffectsCall();
        boolean boolean59 = node32.isQualifiedName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        boolean boolean5 = node4.isExprResult();
        boolean boolean6 = node4.isIf();
        boolean boolean7 = node4.isGetterDef();
        boolean boolean8 = node4.isFunction();
        com.google.javascript.rhino.Node node9 = node4.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node9.getExistingIntProp(24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(51, nodeArray1, 48, 32);
        java.lang.String str5 = node4.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = node4.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node12.getLineno();
        com.google.javascript.rhino.Node node14 = node12.getNext();
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId20 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId22 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList23 = com.google.common.collect.ImmutableList.of(inputId16, inputId18, inputId20, inputId22);
        node12.setInputId(inputId16);
        java.lang.String str25 = inputId16.getIdName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(inputIdList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isExpose();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        int int14 = node12.getCharno();
        boolean boolean15 = node12.isDec();
        boolean boolean16 = node12.isTry();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isQualifiedName();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node30.clonePropsFrom(node37);
        node25.addChildrenToBack(node30);
        boolean boolean41 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node42 = node20.copyInformationFromForTree(node25);
        boolean boolean43 = node12.isEquivalentToTyped(node25);
        boolean boolean44 = node12.hasMoreThanOneChild();
        boolean boolean45 = node12.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.lang.String str24 = serializableList17.toString();
        java.io.Serializable serializable26 = serializableList17.get((int) (short) 1);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = serializableList17.reverse();
        boolean boolean28 = serializableList17.isEmpty();
        java.lang.String str29 = serializableList17.toString();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str24, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + 10.0f + "'", serializable26, 10.0f);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str29, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean9 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker9.getName();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(stringPosition14);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node44.setSourceFileForTesting("hi!");
        boolean boolean47 = node44.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        int int50 = staticSourceFile48.getLineOffset(31);
        java.lang.String str51 = staticSourceFile48.getName();
        node30.setStaticSourceFile(staticSourceFile48);
        int int54 = node30.getIntProp(48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node30.siblings();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(nodeIterable55);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node57.isGetProp();
        boolean boolean62 = node57.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node57.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean68 = node67.isLocalResultCall();
        boolean boolean69 = node67.isDebugger();
        boolean boolean70 = node67.isNull();
        node57.addChildrenToFront(node67);
        java.lang.String str72 = node67.toStringTree();
        node67.putBooleanProp(47, true);
        boolean boolean76 = node67.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "TYPEOF 10\n" + "'", str72, "TYPEOF 10\n");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        boolean boolean8 = node3.isFalse();
        int int9 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isLabelName();
        boolean boolean49 = node47.isTrue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 0, node23, node47, node53, node67, 10, (int) (byte) -1);
        int int71 = node70.getLength();
        java.lang.Object obj73 = node70.getProp(29);
        boolean boolean74 = node3.isEquivalentToTyped(node70);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isInstanceOf();
        boolean boolean84 = node82.isComma();
        boolean boolean85 = node49.isEquivalentTo(node82);
        boolean boolean86 = node82.isComma();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node82, node90, (int) (short) 10, (int) ' ');
        int int94 = serializableList17.lastIndexOf((java.lang.Object) node93);
        java.lang.Object[] objArray95 = serializableList17.toArray();
        java.lang.String str96 = serializableList17.toString();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList97 = serializableList17.reverse();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str96, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableList97);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node62.isTrue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node62, node68, node82, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node86 = node19.srcrefTree(node38);
        node38.putBooleanProp(37, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NAME 51");
        boolean boolean2 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.lang.String str28 = serializableList17.toString();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor30 = serializableList17.iterator();
        com.google.common.collect.ImmutableList.Builder<java.lang.AutoCloseable> autoCloseableBuilder31 = new com.google.common.collect.ImmutableList.Builder<java.lang.AutoCloseable>();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = serializableList17.remove((java.lang.Object) autoCloseableBuilder31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str28, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableItor30);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        int int25 = node19.getIntProp((int) (short) 100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isQualifiedName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        node35.addChildrenToBack(node40);
        boolean boolean51 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = node30.copyInformationFromForTree(node35);
        boolean boolean53 = node35.isParamList();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(38, node35, 51, 38);
        com.google.javascript.rhino.Node node57 = node19.clonePropsFrom(node35);
        com.google.javascript.rhino.InputId inputId58 = node57.getInputId();
        boolean boolean59 = node57.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(inputId58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "unknown");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str12 = jSDocInfo0.getVersion();
        boolean boolean13 = jSDocInfo0.containsDeclaration();
        boolean boolean14 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("true");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        jSDocInfo0.addSuppression("java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        boolean boolean14 = node12.isTrue();
        boolean boolean15 = node12.isNoSideEffectsCall();
        boolean boolean16 = node12.isCase();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node49 = node20.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isInstanceOf();
        boolean boolean55 = node53.isComma();
        boolean boolean56 = node20.isEquivalentTo(node53);
        boolean boolean57 = node53.isComma();
        com.google.javascript.rhino.Node node58 = node12.clonePropsFrom(node53);
        int int59 = node53.getLineno();
        boolean boolean60 = node53.isDelProp();
        jSDocInfo0.setAssociatedNode(node53);
        boolean boolean62 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        boolean boolean19 = node16.isStringKey();
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node16);
        boolean boolean21 = node3.isIn();
        boolean boolean22 = node3.isEmpty();
        node3.setWasEmptyNode(true);
        int int25 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        boolean boolean31 = node29.isString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        boolean boolean37 = node35.isDec();
        boolean boolean38 = node35.isAssign();
        boolean boolean39 = node29.isEquivalentTo(node35);
        boolean boolean40 = node35.isThis();
        node35.addSuppression("Named type with empty name component");
        com.google.javascript.rhino.Node node43 = node3.useSourceInfoFromForTree(node35);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node25.setType(42);
        boolean boolean31 = node25.isGetProp();
        node25.setLineno((-1));
        boolean boolean34 = node25.isNot();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean42 = node41.isBreak();
        com.google.javascript.rhino.Node node43 = node38.srcref(node41);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        int int51 = node47.getSourcePosition();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        int int72 = node55.getLength();
        com.google.javascript.rhino.Node node73 = node55.getFirstChild();
        boolean boolean74 = node55.isRegExp();
        node55.setType(42);
        com.google.javascript.rhino.Node node77 = node47.useSourceInfoFromForTree(node55);
        boolean boolean78 = node41.isEquivalentToTyped(node55);
        node41.setQuotedString();
        boolean boolean80 = node41.isQuotedString();
        int int82 = node41.getIntProp(6);
        boolean boolean83 = node25.hasChild(node41);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        com.google.javascript.rhino.Node node52 = node49.getNext();
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node49.getIndexOfChild(node53);
        java.lang.String str55 = node49.getQualifiedName();
        java.lang.String str56 = node49.getQualifiedName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(27, "java.io.IOException: Not declared as a type name");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isQualifiedName();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node25 = node16.clonePropsFrom(node23);
        node11.addChildrenToBack(node16);
        boolean boolean27 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = node6.copyInformationFromForTree(node11);
        node11.setSourceEncodedPosition((int) (short) -1);
        boolean boolean31 = node11.isName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        boolean boolean37 = node35.isDec();
        boolean boolean38 = node35.isNoSideEffectsCall();
        boolean boolean39 = node35.isIf();
        com.google.javascript.rhino.Node node40 = node35.getLastSibling();
        com.google.javascript.rhino.Node node41 = node11.srcref(node35);
        boolean boolean42 = node11.isParamList();
        boolean boolean43 = node11.isFor();
        com.google.javascript.rhino.Node node44 = node2.useSourceInfoIfMissingFromForTree(node11);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setLicense("NUMBER -1.0 12");
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = jSDocInfo58.getTypeNodes();
        java.lang.String str61 = jSDocInfo58.getDescription();
        boolean boolean62 = jSDocInfo58.hasModifies();
        boolean boolean63 = jSDocInfo58.isConstant();
        int int64 = serializableList24.indexOf((java.lang.Object) jSDocInfo58);
        boolean boolean65 = jSDocInfo58.isInterface();
        int int66 = jSDocInfo58.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo58.getModifies();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo58.getParameterNames();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strSet68);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node25.setType(42);
        boolean boolean31 = node25.isFor();
        com.google.javascript.rhino.Node node32 = node25.getParent();
        com.google.javascript.rhino.Node node33 = node25.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isInstanceOf();
        boolean boolean46 = node44.isComma();
        boolean boolean47 = node11.isEquivalentTo(node44);
        boolean boolean48 = node44.isComma();
        com.google.javascript.rhino.Node node49 = node3.clonePropsFrom(node44);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable51 = node49.getAncestors();
        boolean boolean52 = node49.isDefaultCase();
        boolean boolean53 = node49.isCase();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(ancestorIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 3);
        boolean boolean3 = node2.isSyntheticBlock();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(30, node2, 6, 41013);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        boolean boolean32 = node9.isStringKey();
        java.lang.String str33 = node3.checkTreeEquals(node9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = null;
        node3.setJSDocInfo(jSDocInfo34);
        int int36 = node3.getChildCount();
        com.google.javascript.rhino.Node node37 = node3.cloneNode();
        boolean boolean38 = node3.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.hasParameterType("Unknown class name");
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 213092);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.hasChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean32 = node31.isAssign();
        com.google.javascript.rhino.Node node33 = node31.getLastSibling();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node31, 42, 9);
        node36.detachChildren();
        boolean boolean38 = node36.isDec();
        boolean boolean39 = node36.isRegExp();
        com.google.javascript.rhino.Node node40 = node8.srcref(node36);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isQualifiedName();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        node53.addChildrenToBack(node58);
        boolean boolean69 = node53.isLocalResultCall();
        com.google.javascript.rhino.Node node70 = node48.copyInformationFromForTree(node53);
        node53.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node73 = node44.clonePropsFrom(node53);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isInstanceOf();
        boolean boolean79 = node77.isComma();
        boolean boolean80 = node44.isEquivalentTo(node77);
        boolean boolean81 = node40.isEquivalentToTyped(node77);
        int int82 = node77.getLineno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(39, "java.io.IOException: [0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) (short) 100, 131172);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isString();
        com.google.javascript.rhino.Node node24 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.InputId inputId25 = null;
        node24.setInputId(inputId25);
        node24.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node41.setStaticSourceFile(staticSourceFile42);
        com.google.javascript.rhino.Node node44 = node41.getLastSibling();
        com.google.javascript.rhino.Node node45 = node24.srcrefTree(node41);
        boolean boolean46 = node41.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder47 = node41.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        boolean boolean53 = node51.isTry();
        boolean boolean54 = node51.isUnscopedQualifiedName();
        int int55 = node51.getSourceOffset();
        boolean boolean56 = node51.isNumber();
        com.google.javascript.rhino.Node node57 = node41.srcref(node51);
        boolean boolean58 = node57.isRegExp();
        boolean boolean59 = node57.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node57.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node57.children();
        com.google.javascript.rhino.Node node62 = node4.useSourceInfoFromForTree(node57);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isIn();
        node3.setVarArgs(false);
        boolean boolean11 = node3.isExprResult();
        boolean boolean12 = node3.isComma();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        boolean boolean25 = node20.hasMoreThanOneChild();
        boolean boolean26 = node20.isOr();
        boolean boolean27 = node20.isVarArgs();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(43, node20, (-2147483648), 30);
        // The following exception was thrown during execution in test generation
        try {
            node20.setSideEffectFlags(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isNull();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isGetProp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node3, "");
        boolean boolean11 = jSTypeExpression10.isVarArgs();
        boolean boolean12 = jSTypeExpression10.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.lang.String str8 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.hasParameterType("()");
        int int11 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.isOverride();
        boolean boolean9 = jSDocInfo0.hasParameterType("(Unknown class name)");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.InputId inputId12 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId14 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList19 = com.google.common.collect.ImmutableList.of(inputId12, inputId14, inputId16, inputId18);
        com.google.javascript.rhino.InputId inputId21 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId23 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId25 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId27 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId29 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList32 = com.google.common.collect.ImmutableList.of(inputId25, inputId27, inputId29, inputId31);
        com.google.javascript.rhino.InputId inputId34 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId36 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId38 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId40 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList41 = com.google.common.collect.ImmutableList.of(inputId34, inputId36, inputId38, inputId40);
        com.google.javascript.rhino.InputId inputId43 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId45 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId49 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList50 = com.google.common.collect.ImmutableList.of(inputId43, inputId45, inputId47, inputId49);
        com.google.javascript.rhino.InputId inputId52 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId54 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId56 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId58 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId60 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList61 = com.google.common.collect.ImmutableList.of(inputId54, inputId56, inputId58, inputId60);
        com.google.javascript.rhino.InputId inputId63 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId65 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId67 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId69 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList70 = com.google.common.collect.ImmutableList.of(inputId63, inputId65, inputId67, inputId69);
        com.google.javascript.rhino.InputId inputId72 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId74 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId76 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId78 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList79 = com.google.common.collect.ImmutableList.of(inputId72, inputId74, inputId76, inputId78);
        java.lang.String str80 = inputId76.getIdName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList81 = com.google.common.collect.ImmutableList.of(inputId12, inputId21, inputId23, inputId25, inputId34, inputId45, inputId52, inputId54, inputId65, inputId76);
        boolean boolean82 = strSet10.remove((java.lang.Object) inputId65);
        java.lang.Object[] objArray83 = strSet10.toArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(inputIdList19);
        org.junit.Assert.assertNotNull(inputIdList32);
        org.junit.Assert.assertNotNull(inputIdList41);
        org.junit.Assert.assertNotNull(inputIdList50);
        org.junit.Assert.assertNotNull(inputIdList61);
        org.junit.Assert.assertNotNull(inputIdList70);
        org.junit.Assert.assertNotNull(inputIdList79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "true" + "'", str80, "true");
        org.junit.Assert.assertNotNull(inputIdList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator26 = serializableList17.spliterator();
        boolean boolean27 = serializableList17.isEmpty();
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        boolean boolean73 = serializableList45.contains((java.lang.Object) node55);
        java.util.Iterator<java.io.Serializable> serializableItor74 = serializableList45.iterator();
        java.lang.Object[] objArray75 = serializableList45.toArray();
        boolean boolean76 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList45);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator77 = serializableList17.spliterator();
        java.lang.Object[] objArray78 = serializableList17.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        boolean boolean48 = serializableList45.contains((java.lang.Object) 52);
        int int50 = serializableList45.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor51 = serializableList45.iterator();
        java.util.List<java.io.Serializable> serializableList54 = serializableList45.subList((int) (short) 10, 16);
        int int55 = serializableList17.lastIndexOf((java.lang.Object) serializableList54);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags57 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags57.clearAllFlags();
        boolean boolean59 = serializableList54.equals((java.lang.Object) sideEffectFlags57);
        int int60 = sideEffectFlags57.valueOf();
        sideEffectFlags57.clearAllFlags();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(serializableItor51);
        org.junit.Assert.assertNotNull(serializableList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 31 + "'", int60 == 31);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        node3.setLineno(31);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node19 = node10.clonePropsFrom(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node19.children();
        boolean boolean21 = node19.isNull();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        boolean boolean40 = node38.isString();
        com.google.javascript.rhino.Node node41 = node25.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.InputId inputId42 = null;
        node41.setInputId(inputId42);
        java.lang.Object obj45 = node41.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(54, node19, node41);
        com.google.javascript.rhino.Node node47 = node3.clonePropsFrom(node41);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isSyntheticBlock();
        com.google.javascript.rhino.Node node62 = node13.removeFirstChild();
        node62.setType((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        jSDocInfo5.addSuppression("(InputId: true)");
        java.lang.String str77 = jSDocInfo5.getReturnDescription();
        boolean boolean78 = jSDocInfo5.hasModifies();
        java.lang.String str79 = jSDocInfo5.getDescription();
        boolean boolean80 = jSDocInfo5.isExterns();
        java.lang.String str81 = jSDocInfo5.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = null;
        jSDocInfo30.setVisibility(visibility32);
        boolean boolean34 = jSDocInfo30.hasFileOverview();
        boolean boolean35 = jSDocInfo30.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo30.getImplementedInterfaces();
        boolean boolean37 = jSDocInfo30.hasTypedefType();
        node19.setJSDocInfo(jSDocInfo30);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo30.getThrownTypes();
        java.lang.String str40 = jSDocInfo30.getMeaning();
        boolean boolean41 = jSDocInfo30.hasType();
        boolean boolean43 = jSDocInfo30.hasParameterType("(TYPEOF 10\n)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        boolean boolean8 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = strSet9.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        boolean boolean4 = node2.isBlock();
        com.google.javascript.rhino.Node node5 = node2.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.hasChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node20.isTrue();
        node20.putBooleanProp((int) (byte) 0, false);
        boolean boolean80 = node20.isFunction();
        node20.setLength(45);
        boolean boolean83 = node20.isParamList();
        boolean boolean84 = node20.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet4.spliterator();
        java.lang.Object obj81 = null;
        boolean boolean82 = strSet4.equals(obj81);
        java.util.Iterator<java.lang.String> strItor83 = strSet4.iterator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strItor83);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node18.isDec();
        boolean boolean30 = node18.isExprResult();
        boolean boolean31 = node18.isHook();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        boolean boolean37 = node35.isDo();
        node35.setSourceEncodedPosition(2);
        boolean boolean40 = node35.isFunction();
        boolean boolean41 = node35.isOptionalArg();
        boolean boolean42 = node35.isInc();
        boolean boolean43 = node35.isNumber();
        boolean boolean44 = node35.isWith();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isNull();
        com.google.javascript.rhino.Node node51 = node35.clonePropsFrom(node48);
        boolean boolean52 = node18.isEquivalentToTyped(node51);
        com.google.javascript.rhino.Node[] nodeArray59 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(51, nodeArray59, 48, 32);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, nodeArray59, 32, 12);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(36, nodeArray59);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(41, nodeArray59, 0, 53);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(39, nodeArray59);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) ' ', nodeArray59, (int) 'a', 35);
        java.lang.String str74 = node73.toStringTree();
        int int75 = node73.getType();
        com.google.javascript.rhino.Node node76 = node18.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean77 = node18.isOr();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeArray59);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "TYPEOF 97\n" + "'", str74, "TYPEOF 97\n");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.lang.Object[] objArray66 = serializableList36.toArray();
        boolean boolean67 = serializableList36.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList36.reverse();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator69 = serializableList36.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList72 = serializableList36.subList(39, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (39) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertNotNull(serializableSpliterator69);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(jSTypeExpression4);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        jSDocInfo5.addSuppression("(InputId: true)");
        int int77 = jSDocInfo5.getImplementedInterfaceCount();
        int int78 = jSDocInfo5.getImplementedInterfaceCount();
        boolean boolean79 = jSDocInfo5.hasModifies();
        boolean boolean80 = jSDocInfo5.hasModifies();
        boolean boolean81 = jSDocInfo5.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isVar();
        boolean boolean9 = node3.isFromExterns();
        boolean boolean10 = node3.isNew();
        boolean boolean11 = node3.isSetterDef();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        boolean boolean21 = node19.isDec();
        boolean boolean22 = node19.isNoSideEffectsCall();
        boolean boolean23 = node19.isIf();
        boolean boolean24 = node19.isFalse();
        boolean boolean25 = node19.isObjectLit();
        node15.addChildToFront(node19);
        node15.removeProp(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection32 = jSDocInfo30.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo30.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo30.getBaseType();
        int int35 = jSDocInfo30.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo30.getTypedefType();
        java.lang.String str37 = jSDocInfo30.getLendsName();
        node15.putProp(53, (java.lang.Object) str37);
        boolean boolean39 = node15.isNumber();
        node3.addChildToFront(node15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(nodeCollection32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node4.isVar();
        boolean boolean15 = node4.isCase();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(10, node4, node17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        node27.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId47 = node27.getInputId();
        node27.setOptionalArg(false);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean54 = node27.isEquivalentTo(node53);
        boolean boolean55 = node27.isRegExp();
        node4.addChildToBack(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node4.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = null;
        jSDocInfo58.setVisibility(visibility60);
        java.util.Set<java.lang.String> strSet62 = jSDocInfo58.getParameterNames();
        java.lang.String str63 = jSDocInfo58.getLendsName();
        boolean boolean64 = jSDocInfo58.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo58.getEnumParameterType();
        boolean boolean66 = jSDocInfo58.hasModifies();
        node4.setJSDocInfo(jSDocInfo58);
        boolean boolean68 = jSDocInfo58.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.hasParameter("true");
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "NUMBER 8.0\n", 46, (int) (byte) -1);
        boolean boolean5 = node4.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean4 = node3.isArrayLit();
        boolean boolean5 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        boolean boolean28 = serializableList26.equals((java.lang.Object) 10.0d);
        java.io.Serializable serializable30 = serializableList26.get(0);
        java.lang.Object[] objArray31 = serializableList26.toArray();
        java.io.Serializable[] serializableArray48 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList49 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray48);
        boolean boolean50 = serializableList49.isEmpty();
        boolean boolean52 = serializableList49.contains((java.lang.Object) 52);
        int int54 = serializableList49.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor55 = serializableList49.iterator();
        java.util.List<java.io.Serializable> serializableList58 = serializableList49.subList((int) (short) 10, 16);
        java.io.Serializable[] serializableArray75 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList76 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray75);
        int int77 = serializableList76.size();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor78 = serializableList76.iterator();
        boolean boolean79 = serializableList49.containsAll((java.util.Collection<java.io.Serializable>) serializableList76);
        boolean boolean80 = serializableList49.isEmpty();
        java.util.List<java.io.Serializable> serializableList83 = serializableList49.subList((int) (byte) 10, 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = serializableList26.removeAll((java.util.Collection<java.io.Serializable>) serializableList49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 1.0d + "'", serializable30, 1.0d);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray48);
        org.junit.Assert.assertNotNull(serializableList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertNotNull(serializableList58);
        org.junit.Assert.assertNotNull(serializableArray75);
        org.junit.Assert.assertNotNull(serializableList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16 + "'", int77 == 16);
        org.junit.Assert.assertNotNull(serializableItor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(serializableList83);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(51, nodeArray5, 48, 32);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray5, 32, 12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(36, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(41, nodeArray5, 0, 53);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray5, 37, 63);
        com.google.javascript.rhino.Node node19 = node18.removeChildren();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        boolean boolean46 = node28.isParamList();
        boolean boolean47 = node28.isCatch();
        boolean boolean48 = node28.isNew();
        com.google.javascript.rhino.Node node49 = node28.getFirstChild();
        boolean boolean50 = node28.isCatch();
        node28.setIsSyntheticBlock(false);
        int int53 = node18.getIndexOfChild(node28);
        int int54 = node18.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node18.children();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(nodeIterable55);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        int int3 = node1.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        boolean boolean10 = node8.isDo();
        node8.setSourceEncodedPosition(2);
        int int13 = node8.getSideEffectFlags();
        node1.addChildToFront(node8);
        java.lang.String str15 = node1.toString();
        java.lang.String str16 = node1.toString();
        boolean boolean17 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING Unknown class name" + "'", str15, "STRING Unknown class name");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING Unknown class name" + "'", str16, "STRING Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        boolean boolean52 = serializableList17.isEmpty();
        int int53 = serializableList17.size();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str5 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        java.lang.String str4 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) (short) 1, (int) (short) -1, 45, 45);
        int int10 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int12 = stringPosition11.getStartLine();
        com.google.javascript.rhino.InputId inputId14 = new com.google.javascript.rhino.InputId("true");
        java.lang.String[] strArray18 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.Object[] objArray21 = strSet19.toArray();
        boolean boolean22 = inputId14.equals((java.lang.Object) strSet19);
        boolean boolean23 = strSet19.isEmpty();
        boolean boolean25 = strSet19.add("InputId: true");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int27 = stringPosition26.getStartLine();
        int int28 = stringPosition26.getPositionOnEndLine();
        int int29 = stringPosition26.getPositionOnEndLine();
        int int30 = stringPosition26.getPositionOnEndLine();
        int int31 = stringPosition26.getPositionOnStartLine();
        stringPosition26.setItem("Not declared as a type name");
        int int34 = stringPosition26.getPositionOnEndLine();
        java.lang.String str35 = stringPosition26.getItem();
        boolean boolean36 = strSet19.equals((java.lang.Object) stringPosition26);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList37 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition11, stringPosition26);
        int int38 = stringPosition0.getPositionOnEndLine();
        java.lang.String str39 = stringPosition0.getItem();
        stringPosition0.setItem("java.io.IOException: (GT)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Not declared as a type name" + "'", str35, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(stringPositionList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 45 + "'", int38 == 45);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        boolean boolean47 = jSDocInfo0.hasFileOverview();
        java.lang.String str48 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        boolean boolean76 = node58.isParamList();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(38, node58, 51, 38);
        boolean boolean80 = node79.isStringKey();
        jSDocInfo0.setAssociatedNode(node79);
        boolean boolean82 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        boolean boolean27 = node25.isDo();
        node25.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        node43.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node63 = node34.clonePropsFrom(node43);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        boolean boolean69 = node67.isTrue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (byte) 0, node43, node67, node73, node87, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node91 = node25.useSourceInfoIfMissingFrom(node73);
        boolean boolean92 = node25.isGetterDef();
        node3.addChildrenToBack(node25);
        java.util.Set<java.lang.String> strSet94 = node3.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(strSet94);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.Node node3 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.addSuppression("java.io.IOException: java.io.IOException: java.io.IOException: Unknown class name");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        boolean boolean46 = serializableList17.isEmpty();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator47 = serializableList17.spliterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList48 = serializableList17.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        int int50 = jSDocInfo49.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = null;
        jSDocInfo49.setVisibility(visibility51);
        boolean boolean53 = jSDocInfo49.isNoAlias();
        boolean boolean54 = jSDocInfo49.isHidden();
        boolean boolean55 = serializableList48.contains((java.lang.Object) jSDocInfo49);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        node59.addChildrenToBack(node64);
        boolean boolean75 = node64.isParamList();
        boolean boolean76 = node64.isAssignAdd();
        boolean boolean77 = node64.isQualifiedName();
        boolean boolean78 = node64.isTry();
        boolean boolean79 = node64.isIn();
        boolean boolean80 = node64.isWhile();
        int int81 = serializableList48.lastIndexOf((java.lang.Object) node64);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        int int83 = jSDocInfo82.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet84 = jSDocInfo82.getParameterNames();
        java.lang.String str85 = jSDocInfo82.getSourceName();
        boolean boolean86 = jSDocInfo82.isConsistentIdGenerator();
        boolean boolean87 = jSDocInfo82.isNoTypeCheck();
        boolean boolean88 = jSDocInfo82.isExpose();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = serializableList48.remove((java.lang.Object) boolean88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator47);
        org.junit.Assert.assertNotNull(serializableList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.isExpose();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        boolean boolean11 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        node57.detachChildren();
        boolean boolean59 = node57.isNew();
        boolean boolean60 = node57.isGetElem();
        com.google.javascript.rhino.Node node61 = node57.getLastSibling();
        boolean boolean62 = node57.isContinue();
        boolean boolean63 = node57.isNew();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        int int54 = serializableList47.size();
        java.util.ListIterator<java.io.Serializable> serializableItor55 = serializableList47.listIterator();
        int int56 = serializableList47.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = null;
        jSDocInfo58.setVisibility(visibility60);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo58.getEnumParameterType();
        java.lang.String str63 = jSDocInfo58.getReturnDescription();
        boolean boolean64 = jSDocInfo58.isImplicitCast();
        boolean boolean65 = jSDocInfo58.isImplicitCast();
        boolean boolean66 = jSDocInfo58.isNoCompile();
        java.util.Collection<java.lang.String> strCollection67 = jSDocInfo58.getReferences();
        boolean boolean68 = jSDocInfo58.isExport();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable69 = serializableList47.set(38, (java.io.Serializable) boolean68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        node10.addChildrenToBack(node15);
        com.google.javascript.rhino.InputId inputId26 = node10.getInputId();
        boolean boolean27 = node10.isAdd();
        boolean boolean28 = node10.isBlock();
        boolean boolean29 = node10.isCatch();
        jSDocInfo0.setAssociatedNode(node10);
        java.util.Set<java.lang.String> strSet31 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray32 = strSet31.toArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        boolean boolean19 = node16.isStringKey();
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node16);
        boolean boolean21 = node3.isIn();
        node3.setType(42);
        node3.setLength((int) (byte) 0);
        int int27 = node3.getIntProp((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: THIS is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        node36.putBooleanProp((int) (byte) 1, true);
        boolean boolean40 = node36.isTypeOf();
        boolean boolean41 = node36.isBreak();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51, nodeArray46, 48, 32);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(15, nodeArray46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray46);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node52.getStaticSourceFile();
        node36.addChildrenToFront(node52);
        int int55 = node36.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node12.children();
        boolean boolean14 = node12.isAssign();
        com.google.javascript.rhino.Node node15 = node12.getLastSibling();
        boolean boolean16 = node12.isLabelName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        boolean boolean41 = node19.isDebugger();
        boolean boolean42 = node19.isTypeOf();
        com.google.javascript.rhino.Node node43 = node19.cloneNode();
        boolean boolean44 = node19.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node19.getStaticSourceFile();
        boolean boolean46 = node19.isHook();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        jSDocInfo5.addSuppression("(InputId: true)");
        int int77 = jSDocInfo5.getImplementedInterfaceCount();
        int int78 = jSDocInfo5.getImplementedInterfaceCount();
        boolean boolean79 = jSDocInfo5.hasModifies();
        boolean boolean80 = jSDocInfo5.hasModifies();
        java.lang.String str81 = jSDocInfo5.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.toString();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node13.children();
        boolean boolean63 = node13.isFor();
        boolean boolean64 = node13.isAdd();
        boolean boolean65 = node13.isReturn();
        boolean boolean66 = node13.isFor();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1L), (int) (byte) 10, 53);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        boolean boolean25 = node20.hasMoreThanOneChild();
        boolean boolean26 = node20.isOr();
        boolean boolean27 = node20.isVarArgs();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(43, node20, (-2147483648), 30);
        node30.setCharno((int) 'a');
        boolean boolean33 = node30.isVoid();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList8 = com.google.common.collect.ImmutableList.of(ternaryValue4, ternaryValue5, ternaryValue6, ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList14 = com.google.common.collect.ImmutableList.of(ternaryValue10, ternaryValue11, ternaryValue12, ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue6.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder17 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder19 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue18);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList21 = ternaryValueEnumBuilder20.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray22 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder23 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder24 = ternaryValueEnumBuilder19.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder27 = ternaryValueEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue26);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder28 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList29 = ternaryValueEnumBuilder28.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray30 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder31 = ternaryValueEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList36 = com.google.common.collect.ImmutableList.of(ternaryValue32, ternaryValue33, ternaryValue34, ternaryValue35);
        java.lang.String str37 = ternaryValue34.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList42 = com.google.common.collect.ImmutableList.of(ternaryValue38, ternaryValue39, ternaryValue40, ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue34.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue43.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder45 = ternaryValueEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder46 = ternaryValueEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValueList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValueList14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder19);
        org.junit.Assert.assertNotNull(ternaryValueEnumList21);
        org.junit.Assert.assertNotNull(ternaryValueArray22);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder23);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder27);
        org.junit.Assert.assertNotNull(ternaryValueEnumList29);
        org.junit.Assert.assertNotNull(ternaryValueArray30);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValueList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "true" + "'", str37, "true");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValueList42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder45);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder46);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        boolean boolean81 = node55.isBlock();
        com.google.javascript.rhino.Node node82 = node55.removeChildren();
        boolean boolean83 = node82.isNot();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        java.lang.String str3 = stringPosition0.getItem();
        int int4 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean11 = jSDocInfo0.hasParameterType("java.io.IOException: NUMBER -1.0 12");
        boolean boolean12 = jSDocInfo0.isConstructor();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("()");
        java.lang.String str16 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("()");
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        boolean boolean6 = node3.isIn();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node19 = node10.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        boolean boolean25 = node23.isString();
        com.google.javascript.rhino.Node node26 = node10.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.InputId inputId27 = null;
        node26.setInputId(inputId27);
        java.lang.Object obj30 = node26.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node26.getJSDocInfo();
        node26.setVarArgs(true);
        boolean boolean34 = node26.isFor();
        node26.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        boolean boolean55 = node53.isString();
        com.google.javascript.rhino.Node node56 = node40.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.InputId inputId57 = null;
        node56.setInputId(inputId57);
        java.lang.Object obj60 = node56.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node56.getJSDocInfo();
        node56.setVarArgs(true);
        boolean boolean64 = node56.isFor();
        node56.setWasEmptyNode(false);
        com.google.javascript.rhino.InputId inputId67 = node56.getInputId();
        boolean boolean68 = node56.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node56.siblings();
        node26.addChildrenToFront(node56);
        com.google.javascript.rhino.Node node71 = node3.srcrefTree(node26);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isContinue();
        com.google.javascript.rhino.Node node84 = node75.clonePropsFrom(node82);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean89 = node88.isContinue();
        boolean boolean90 = node88.isString();
        com.google.javascript.rhino.Node node91 = node75.useSourceInfoFromForTree(node88);
        com.google.javascript.rhino.InputId inputId92 = null;
        node91.setInputId(inputId92);
        java.lang.Object obj95 = node91.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType96 = node91.getJSType();
        boolean boolean97 = node91.isRegExp();
        boolean boolean98 = node91.isDo();
        int int99 = node71.getIndexOfChild(node91);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.lang.String str24 = serializableList17.toString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        boolean boolean30 = node29.isDo();
        boolean boolean31 = serializableList17.equals((java.lang.Object) node29);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str24, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        int int18 = node8.getLength();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(45, node8, 54, 39);
        boolean boolean22 = node8.isNew();
        typePosition0.setItem(node8);
        boolean boolean24 = node8.isInc();
        boolean boolean25 = node8.isAdd();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        boolean boolean49 = serializableList46.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableList46.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo53.getParameterNames();
        boolean boolean56 = serializableList46.contains((java.lang.Object) strSet55);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator57 = serializableList46.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList46.iterator();
        boolean boolean59 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList46);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        boolean boolean73 = node72.isScript();
        int int74 = serializableList46.lastIndexOf((java.lang.Object) boolean73);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor75 = serializableList46.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(serializableItor75);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node13.children();
        boolean boolean15 = node13.isNull();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isString();
        com.google.javascript.rhino.Node node35 = node19.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        java.lang.Object obj39 = node35.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(54, node13, node35);
        boolean boolean41 = node35.isAssignAdd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getEndLine();
        int int4 = namePosition0.getPositionOnStartLine();
        int int5 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        int int21 = node20.getLineno();
        jSDocInfo0.setAssociatedNode(node20);
        boolean boolean23 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getParameterType("NAME 51");
        java.util.Set<java.lang.String> strSet26 = jSDocInfo0.getParameterNames();
        java.lang.String str27 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("JSDocInfo");
        java.lang.String[] strArray7 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of(strArray7);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]", "(Unknown class name)", "java.io.IOException: java.io.IOException: Unknown class name" };
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "Unknown class name", "" };
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList28 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "true", (java.lang.CharSequence) "true", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "true", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", charSequenceArray27);
        java.lang.String[] strArray34 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of(strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        java.lang.Object[] objArray42 = strSet40.toArray();
        boolean boolean44 = strSet40.equals((java.lang.Object) 12);
        java.lang.String[] strArray50 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of(strArray50);
        java.lang.Comparable<java.lang.String>[] strComparableArray52 = strSet40.toArray((java.lang.Comparable<java.lang.String>[]) strArray50);
        com.google.common.collect.ImmutableList<java.lang.CharSequence[]> charSequenceArrayList53 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence[]) strArray7, charSequenceArray12, charSequenceArray27, (java.lang.CharSequence[]) strArray34, (java.lang.CharSequence[]) strArray50);
        boolean boolean54 = inputId1.equals((java.lang.Object) charSequenceArray27);
        java.lang.String str55 = inputId1.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertNotNull(charSequenceList28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strComparableArray52);
        org.junit.Assert.assertNotNull(charSequenceArrayList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "InputId: JSDocInfo" + "'", str55, "InputId: JSDocInfo");
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = node63.removeFirstChild();
        boolean boolean67 = node66.isBlock();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isFromExterns();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        boolean boolean24 = node22.isString();
        com.google.javascript.rhino.Node node25 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.InputId inputId26 = null;
        node25.setInputId(inputId26);
        java.lang.Object obj29 = node25.getProp((int) (short) 10);
        boolean boolean30 = node25.hasMoreThanOneChild();
        boolean boolean31 = node25.isOr();
        boolean boolean32 = node25.isVarArgs();
        com.google.javascript.rhino.Node node33 = node3.clonePropsFrom(node25);
        boolean boolean34 = node3.isDo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility8);
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("STRING true\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.isNoAlias();
        boolean boolean5 = strSet2.equals((java.lang.Object) jSDocInfo3);
        strSet2.clear();
        java.util.Iterator<java.lang.String> strItor7 = strSet2.iterator();
        boolean boolean8 = strSet2.isEmpty();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        boolean boolean14 = node12.isString();
        boolean boolean15 = node12.isStringKey();
        int int16 = node12.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        boolean boolean32 = node31.isQuotedString();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        boolean boolean38 = node36.isDec();
        boolean boolean39 = node36.isScript();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(0, node31, node36, node43, 0, (int) (short) 0);
        boolean boolean47 = node43.isLabel();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean50 = node49.isBreak();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isContinue();
        boolean boolean56 = node54.isBlock();
        node54.removeProp(12);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        boolean boolean73 = node72.isQuotedString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isLabelName();
        boolean boolean79 = node77.isDec();
        boolean boolean80 = node77.isScript();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(0, node72, node77, node84, 0, (int) (short) 0);
        boolean boolean88 = node72.isTrue();
        com.google.javascript.rhino.Node node89 = node54.useSourceInfoIfMissingFromForTree(node72);
        int int90 = node72.getSourcePosition();
        com.google.javascript.rhino.Node node91 = node49.srcref(node72);
        com.google.javascript.rhino.Node node92 = node43.clonePropsFrom(node91);
        int int93 = node12.getIndexOfChild(node92);
        boolean boolean94 = node92.isThis();
        boolean boolean95 = strSet2.contains((java.lang.Object) node92);
        java.util.Iterator<java.lang.String> strItor96 = strSet2.iterator();
        boolean boolean97 = strSet2.isEmpty();
        java.lang.Object obj98 = null;
        boolean boolean99 = strSet2.equals(obj98);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int6 = sideEffectFlags5.valueOf();
        sideEffectFlags5.setReturnsTainted();
        sideEffectFlags5.setMutatesGlobalState();
        sideEffectFlags5.setThrows();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags((int) 'a');
        sideEffectFlags11.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags14.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean18 = sideEffectFlags17.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean21 = sideEffectFlags20.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags23 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags23.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags26 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags28.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags31 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList32 = com.google.common.collect.ImmutableList.of(sideEffectFlags14, sideEffectFlags17, sideEffectFlags20, sideEffectFlags23, sideEffectFlags26, sideEffectFlags28, sideEffectFlags31);
        sideEffectFlags23.setReturnsTainted();
        sideEffectFlags23.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags36 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags36.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean40 = sideEffectFlags39.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags42 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean43 = sideEffectFlags42.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags45 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags45.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags50 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags50.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags53 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList54 = com.google.common.collect.ImmutableList.of(sideEffectFlags36, sideEffectFlags39, sideEffectFlags42, sideEffectFlags45, sideEffectFlags48, sideEffectFlags50, sideEffectFlags53);
        int int55 = sideEffectFlags39.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList56 = com.google.common.collect.ImmutableList.of(sideEffectFlags0, sideEffectFlags5, sideEffectFlags11, sideEffectFlags23, sideEffectFlags39);
        sideEffectFlags39.setThrows();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(sideEffectFlagsList56);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        java.lang.String str11 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        java.lang.String str13 = jSDocInfo0.toString();
        boolean boolean14 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        java.io.Serializable serializable24 = serializableList17.get(2);
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableList17.parallelStream();
        java.lang.Object[] objArray26 = serializableList17.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor27 = serializableList17.listIterator();
        java.lang.String str28 = serializableList17.toString();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator29 = serializableList17.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 100 + "'", serializable24, (short) 100);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str28, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator29);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.hasChildren();
        com.google.javascript.rhino.jstype.JSType jSType27 = node8.getJSType();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        boolean boolean33 = node31.isHook();
        int int34 = node31.getLength();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        boolean boolean55 = serializableList52.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream58 = serializableList52.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo59.getParameterNames();
        boolean boolean62 = serializableList52.contains((java.lang.Object) strSet61);
        node31.setDirectives(strSet61);
        node31.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node66 = node8.useSourceInfoFromForTree(node31);
        boolean boolean67 = node8.isNE();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableStream56);
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertNotNull(serializableStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        node3.setSourceEncodedPosition((int) (short) 0);
        boolean boolean10 = node3.isDebugger();
        node3.setCharno(0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node21.isParamList();
        boolean boolean33 = node21.isGetProp();
        com.google.javascript.rhino.Node node34 = node21.getNext();
        com.google.javascript.rhino.Node node35 = node3.srcref(node21);
        node35.putIntProp(16, (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isAssign();
        boolean boolean33 = node29.isIn();
        boolean boolean34 = node29.isThis();
        boolean boolean35 = node29.isOr();
        com.google.javascript.rhino.Node node36 = node3.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node node37 = node29.getLastSibling();
        boolean boolean38 = node37.isGetterDef();
        boolean boolean39 = node37.isOr();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = node37.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node20.isTrue();
        boolean boolean77 = node20.isDec();
        node20.putBooleanProp(8, false);
        boolean boolean81 = node20.isAdd();
        boolean boolean82 = node20.isSwitch();
        boolean boolean83 = node20.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 52, (int) (byte) 100, 4);
        boolean boolean5 = node4.isDo();
        node4.putIntProp((int) (byte) 1, 35);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        boolean boolean14 = node12.isHook();
        int int15 = node12.getLength();
        java.io.Serializable[] serializableArray32 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList33 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray32);
        boolean boolean34 = serializableList33.isEmpty();
        boolean boolean36 = serializableList33.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream37 = serializableList33.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream38 = serializableList33.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream39 = serializableList33.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        int int41 = jSDocInfo40.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo40.getParameterNames();
        boolean boolean43 = serializableList33.contains((java.lang.Object) strSet42);
        node12.setDirectives(strSet42);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(39, node4, node12);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(serializableArray32);
        org.junit.Assert.assertNotNull(serializableList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serializableStream37);
        org.junit.Assert.assertNotNull(serializableStream38);
        org.junit.Assert.assertNotNull(serializableStream39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        boolean boolean8 = node4.isIf();
        boolean boolean9 = node4.isFalse();
        boolean boolean10 = node4.isObjectLit();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        boolean boolean30 = node28.isString();
        com.google.javascript.rhino.Node node31 = node15.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.InputId inputId32 = null;
        node31.setInputId(inputId32);
        java.lang.Object obj35 = node31.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        boolean boolean54 = node52.isString();
        com.google.javascript.rhino.Node node55 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.InputId inputId56 = null;
        node55.setInputId(inputId56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isQualifiedName();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node71.setJSType(jSType73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        com.google.javascript.rhino.Node node80 = node71.clonePropsFrom(node78);
        node66.addChildrenToBack(node71);
        boolean boolean82 = node66.isLocalResultCall();
        com.google.javascript.rhino.Node node83 = node61.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(0, node31, node55, node66, (int) (short) 10, 53);
        com.google.javascript.rhino.Node node87 = node86.cloneTree();
        boolean boolean88 = node86.isScript();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) '#', node4, node86, (int) (byte) -1, 8);
        node86.addSuppression("InputId: true");
        boolean boolean94 = node86.isQuotedString();
        node86.setCharno((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        boolean boolean13 = jSDocInfo0.isNoTypeCheck();
        boolean boolean14 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo0.getThrownTypes();
        boolean boolean16 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean6 = sideEffectFlags4.areAllFlagsSet();
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean8 = strSet2.remove((java.lang.Object) sideEffectFlags4);
        sideEffectFlags4.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList4 = ternaryValueEnumBuilder3.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder7 = ternaryValueEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue6);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder8 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList9 = ternaryValueEnumBuilder8.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray10 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder11 = ternaryValueEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray10);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList12 = ternaryValueEnumBuilder11.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList17 = com.google.common.collect.ImmutableList.of(ternaryValue13, ternaryValue14, ternaryValue15, ternaryValue16);
        java.lang.String str18 = ternaryValue15.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList23 = com.google.common.collect.ImmutableList.of(ternaryValue19, ternaryValue20, ternaryValue21, ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue15.or(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue20.xor(ternaryValue25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder31 = ternaryValueEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray32 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder33 = ternaryValueEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder34 = ternaryValueEnumBuilder7.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder35 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList36 = ternaryValueEnumBuilder35.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList41 = com.google.common.collect.ImmutableList.of(ternaryValue37, ternaryValue38, ternaryValue39, ternaryValue40);
        java.lang.String str42 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue39.or(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue44.xor(ternaryValue49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder55 = ternaryValueEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue54);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList57 = ternaryValueEnumBuilder56.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray58 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder59 = ternaryValueEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray58);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder60 = ternaryValueEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray58);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder61 = ternaryValueEnumBuilder7.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray58);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValueEnumList4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder7);
        org.junit.Assert.assertNotNull(ternaryValueEnumList9);
        org.junit.Assert.assertNotNull(ternaryValueArray10);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder11);
        org.junit.Assert.assertNotNull(ternaryValueEnumList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "true" + "'", str18, "true");
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValueList23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder31);
        org.junit.Assert.assertNotNull(ternaryValueArray32);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder33);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder34);
        org.junit.Assert.assertNotNull(ternaryValueEnumList36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder55);
        org.junit.Assert.assertNotNull(ternaryValueEnumList57);
        org.junit.Assert.assertNotNull(ternaryValueArray58);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder59);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder60);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder61);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node58.setSourceFileForTesting("hi!");
        boolean boolean61 = node58.isIf();
        boolean boolean62 = node27.isEquivalentToTyped(node58);
        boolean boolean63 = node27.isThrow();
        boolean boolean64 = node27.isVarArgs();
        node27.setWasEmptyNode(true);
        boolean boolean67 = node27.isSwitch();
        boolean boolean68 = node27.isVoid();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        int int45 = node1.getIntProp(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isContinue();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node59.setJSType(jSType61);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node68 = node59.clonePropsFrom(node66);
        node54.addChildrenToBack(node59);
        boolean boolean70 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node71 = node49.copyInformationFromForTree(node54);
        boolean boolean72 = node54.isParamList();
        boolean boolean73 = node54.isCatch();
        boolean boolean74 = node54.isNew();
        com.google.javascript.rhino.Node node75 = node54.getFirstChild();
        boolean boolean76 = node54.isCatch();
        com.google.javascript.rhino.Node node77 = node1.useSourceInfoIfMissingFrom(node54);
        boolean boolean78 = node77.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node62.isTrue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node62, node68, node82, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node86 = node19.srcrefTree(node38);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node89 = node19.useSourceInfoFromForTree(node88);
        node89.setLength(29);
        boolean boolean92 = node89.isAdd();
        boolean boolean93 = node89.isString();
        java.lang.Object obj95 = node89.getProp((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.isOverride();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        int int7 = node3.getCharno();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node41 = node40.getLastSibling();
        node3.addChildToBack(node41);
        int int43 = node41.getLength();
        boolean boolean44 = node41.isNot();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker3.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker3.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition16 = marker3.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker3.getDescription();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(nodeSourcePosition16);
        org.junit.Assert.assertNull(stringPosition17);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean8 = jSDocInfo0.hasParameterType("java.io.IOException");
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 41013);
        boolean boolean2 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(java.io.IOException: Unknown class name)");
        int int6 = stringPosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(38, 55, 3, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 38?end-line: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node12, "true");
        boolean boolean35 = jSTypeExpression34.isOptionalArg();
        boolean boolean36 = jSTypeExpression34.isOptionalArg();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isBlock();
        node41.removeProp(12);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        boolean boolean60 = node59.isQuotedString();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        boolean boolean66 = node64.isDec();
        boolean boolean67 = node64.isScript();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(0, node59, node64, node71, 0, (int) (short) 0);
        boolean boolean75 = node59.isTrue();
        com.google.javascript.rhino.Node node76 = node41.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean77 = node41.isInc();
        boolean boolean78 = node41.isLabel();
        boolean boolean79 = node41.isCall();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(50, node41);
        boolean boolean81 = node41.isDebugger();
        java.util.Set<java.lang.String> strSet82 = node41.getDirectives();
        boolean boolean83 = jSTypeExpression34.equals((java.lang.Object) node41);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        boolean boolean79 = node55.isNumber();
        com.google.javascript.rhino.Node node80 = node55.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(100.0d, 36, 97);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet1.intersection(booleanLiteralSet5);
        boolean boolean8 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean12 = booleanLiteralSet10.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean16 = booleanLiteralSet14.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet14.intersection(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet10.intersection(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet20.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        boolean boolean26 = booleanLiteralSet24.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet22.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet5.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean31 = booleanLiteralSet29.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean35 = booleanLiteralSet33.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean39 = booleanLiteralSet37.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet37.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet33.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet43.union(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet29.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean50 = booleanLiteralSet48.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet47.union(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet5.intersection(booleanLiteralSet47);
        boolean boolean54 = booleanLiteralSet52.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet52.union(booleanLiteralSet55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        java.lang.String str3 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        jSDocInfo0.setLicense("(Unknown class name)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        node4.addChildrenToBack(node9);
        boolean boolean20 = node4.isLocalResultCall();
        int int21 = node4.getLength();
        com.google.javascript.rhino.Node node22 = node4.getFirstChild();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        node35.setStaticSourceFile(staticSourceFile36);
        com.google.javascript.rhino.Node node38 = node35.getLastSibling();
        int int39 = node35.getLength();
        boolean boolean40 = node22.isEquivalentToTyped(node35);
        boolean boolean41 = node35.isLabelName();
        boolean boolean42 = node35.isAdd();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = node46.isWith();
        boolean boolean70 = node46.isDebugger();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 100, node35, node46, 44, 9);
        boolean boolean74 = node35.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node12.getLineno();
        com.google.javascript.rhino.Node node14 = node12.getNext();
        boolean boolean15 = node12.isString();
        java.lang.String str16 = node12.getQualifiedName();
        boolean boolean17 = node12.isWith();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.isExterns();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        boolean boolean4 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        boolean boolean47 = node27.isGetProp();
        boolean boolean48 = node27.isHook();
        node27.setSourceEncodedPosition(41011);
        java.lang.String str51 = node27.getSourceFileName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        boolean boolean14 = node12.isOptionalArg();
        boolean boolean15 = node12.isThis();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        boolean boolean21 = node19.isDo();
        node19.setSourceEncodedPosition(2);
        int int24 = node19.getType();
        boolean boolean25 = node12.isEquivalentTo(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node12.children();
        boolean boolean27 = node12.isVar();
        boolean boolean28 = node12.isStringKey();
        boolean boolean29 = node12.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        int int59 = node50.getType();
        node50.setLineno(53);
        boolean boolean62 = node50.isWhile();
        boolean boolean63 = node50.isComma();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node3.isArrayLit();
        com.google.javascript.rhino.Node node40 = node3.cloneNode();
        node40.setCharno(40);
        boolean boolean43 = node40.isQualifiedName();
        node40.setLineno(27);
        boolean boolean46 = node40.isNE();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isWhile();
        boolean boolean18 = node12.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker9.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker23.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker25.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker27 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker27.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker30 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker31 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker33 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker34 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList35 = com.google.common.collect.ImmutableList.of(marker22, marker23, marker25, marker27, marker29, marker30, marker31, marker32, marker33, marker34);
        com.google.javascript.rhino.JSDocInfo.Marker marker36 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition38 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker39 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker40 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker40.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = marker42.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker44 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker44.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker47 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker48 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker49 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker50 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList52 = com.google.common.collect.ImmutableList.of(marker39, marker40, marker42, marker44, marker46, marker47, marker48, marker49, marker50, marker51);
        com.google.javascript.rhino.JSDocInfo.Marker marker53 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker54 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition55 = marker54.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker56 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = marker56.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker58 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = marker58.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker60 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker61 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker62 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker63 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker64 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker65 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList66 = com.google.common.collect.ImmutableList.of(marker53, marker54, marker56, marker58, marker60, marker61, marker62, marker63, marker64, marker65);
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker68 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker68.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker70 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker70.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker75 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker76 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker77 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker79 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList80 = com.google.common.collect.ImmutableList.of(marker67, marker68, marker70, marker72, marker74, marker75, marker76, marker77, marker78, marker79);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = marker78.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition84 = marker83.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker85 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition86 = marker85.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker87 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition88 = marker87.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker89 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker90 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker91 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker92 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker93 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker94 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList95 = com.google.common.collect.ImmutableList.of(marker82, marker83, marker85, marker87, marker89, marker90, marker91, marker92, marker93, marker94);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList96 = com.google.common.collect.ImmutableList.of(marker9, marker16, marker19, marker25, marker36, marker44, marker56, marker78, marker89);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition97 = marker25.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition98 = marker25.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition99 = marker25.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(typePosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNotNull(markerList35);
        org.junit.Assert.assertNull(stringPosition37);
        org.junit.Assert.assertNull(stringPosition38);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(stringPosition43);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertNotNull(markerList52);
        org.junit.Assert.assertNull(stringPosition55);
        org.junit.Assert.assertNull(stringPosition57);
        org.junit.Assert.assertNull(stringPosition59);
        org.junit.Assert.assertNotNull(markerList66);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNotNull(markerList80);
        org.junit.Assert.assertNull(stringPosition81);
        org.junit.Assert.assertNull(stringPosition84);
        org.junit.Assert.assertNull(stringPosition86);
        org.junit.Assert.assertNull(stringPosition88);
        org.junit.Assert.assertNotNull(markerList95);
        org.junit.Assert.assertNotNull(markerList96);
        org.junit.Assert.assertNull(nodeSourcePosition97);
        org.junit.Assert.assertNull(typePosition98);
        org.junit.Assert.assertNull(typePosition99);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        int int68 = typePosition0.getStartLine();
        boolean boolean69 = typePosition0.hasBrackets();
        int int70 = typePosition0.getEndLine();
        int int71 = typePosition0.getPositionOnStartLine();
        int int72 = typePosition0.getStartLine();
        int int73 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList25 = serializableList17.asList();
        int int26 = serializableList17.size();
        java.lang.Object[] objArray27 = serializableList17.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(serializableList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssign();
        boolean boolean6 = node3.isStringKey();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getBaseType();
        node10.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isQuotedString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        boolean boolean39 = node37.isString();
        com.google.javascript.rhino.Node node40 = node24.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.InputId inputId41 = null;
        node40.setInputId(inputId41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int49 = node47.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        int int51 = jSDocInfo50.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = null;
        jSDocInfo50.setVisibility(visibility52);
        boolean boolean54 = jSDocInfo50.hasFileOverview();
        boolean boolean55 = jSDocInfo50.isJavaDispatch();
        boolean boolean56 = jSDocInfo50.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo50.getExtendedInterfaces();
        java.lang.String str58 = jSDocInfo50.getLicense();
        boolean boolean59 = jSDocInfo50.hasBaseType();
        boolean boolean60 = jSDocInfo50.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        int int62 = jSDocInfo61.getImplementedInterfaceCount();
        boolean boolean63 = jSDocInfo61.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        int int66 = jSDocInfo65.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isQualifiedName();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        boolean boolean77 = node75.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList78 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo12, (java.io.Serializable) boolean20, (java.io.Serializable) node40, (java.io.Serializable) int49, (java.io.Serializable) boolean60, (java.io.Serializable) boolean63, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo65, (java.io.Serializable) node70, (java.io.Serializable) boolean77);
        boolean boolean79 = node70.isCatch();
        int int80 = node70.getSourcePosition();
        com.google.javascript.rhino.Node node81 = node3.srcref(node70);
        boolean boolean82 = node81.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(serializableList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        java.lang.String str3 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        boolean boolean33 = node3.isReturn();
        node3.addSuppression("");
        com.google.javascript.rhino.Node node36 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildToBack(node36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker9.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = marker9.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker9.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(typePosition17);
        org.junit.Assert.assertNull(typePosition18);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("JSDocInfo");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("");
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.hasParameterType("((java.io.IOException: NUMBER -1.0 12))");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        java.util.Set<java.lang.String> strSet72 = node33.getDirectives();
        com.google.javascript.rhino.Node node74 = node33.getAncestor((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        boolean boolean41 = node19.isDebugger();
        boolean boolean42 = node19.isTypeOf();
        com.google.javascript.rhino.Node node43 = node19.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = node43.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        node15.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node35 = node6.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isTrue();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 0, node15, node39, node45, node59, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, node62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        node67.addChildrenToBack(node72);
        boolean boolean83 = node67.isLocalResultCall();
        int int84 = node67.getLength();
        com.google.javascript.rhino.Node node85 = node67.getFirstChild();
        int int86 = node63.getIndexOfChild(node67);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(41, node67);
        boolean boolean88 = node87.isWith();
        boolean boolean89 = node87.isInc();
        java.lang.Class<?> wildcardClass90 = node87.getClass();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        boolean boolean41 = node36.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        boolean boolean48 = node46.isTry();
        boolean boolean49 = node46.isUnscopedQualifiedName();
        int int50 = node46.getSourceOffset();
        boolean boolean51 = node46.isNumber();
        com.google.javascript.rhino.Node node52 = node36.srcref(node46);
        boolean boolean53 = node52.isParamList();
        java.lang.String str54 = node52.getQualifiedName();
        boolean boolean55 = node52.isTrue();
        boolean boolean56 = node52.isAnd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.hasMoreThanOneChild();
        boolean boolean25 = node19.isOr();
        boolean boolean26 = node19.isCatch();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isQualifiedName();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        node40.addChildrenToBack(node45);
        boolean boolean56 = node40.isLocalResultCall();
        com.google.javascript.rhino.Node node57 = node35.copyInformationFromForTree(node40);
        node40.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node60 = node31.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        boolean boolean66 = node64.isTrue();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isContinue();
        com.google.javascript.rhino.Node node84 = node75.clonePropsFrom(node82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 0, node40, node64, node70, node84, 10, (int) (byte) -1);
        node40.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile91 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node92 = node19.useSourceInfoFrom(node40);
        java.lang.Object obj94 = node40.getProp(54);
        com.google.javascript.rhino.Node node95 = node40.cloneTree();
        java.lang.Object obj97 = node40.getProp((-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(staticSourceFile91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        boolean boolean23 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator22 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        boolean boolean28 = node27.isThrow();
        int int29 = serializableList17.lastIndexOf((java.lang.Object) boolean28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        boolean boolean32 = jSDocInfo30.isExterns();
        boolean boolean33 = jSDocInfo30.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo30.getExtendedInterfaces();
        java.lang.String str35 = jSDocInfo30.getVersion();
        int int36 = serializableList17.indexOf((java.lang.Object) jSDocInfo30);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator37 = serializableList17.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableSpliterator22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(serializableSpliterator37);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        node4.addChildrenToBack(node9);
        com.google.javascript.rhino.InputId inputId20 = node4.getInputId();
        boolean boolean21 = node4.isAdd();
        boolean boolean22 = node4.isBlock();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '#', node4);
        boolean boolean24 = node23.isNew();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node23.children();
        boolean boolean26 = node23.isLabelName();
        int int28 = node23.getIntProp(50);
        node23.setLineno((-8));
        node23.putIntProp(44, 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        boolean boolean66 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isQualifiedName();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node80.clonePropsFrom(node87);
        node75.addChildrenToBack(node80);
        boolean boolean91 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node92 = node70.copyInformationFromForTree(node75);
        typePosition0.setItem(node75);
        com.google.javascript.rhino.Node node94 = typePosition0.getItem();
        com.google.javascript.rhino.Node node95 = typePosition0.getItem();
        int int96 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isWhile();
        java.lang.Object obj83 = node79.getProp(53);
        node79.setLength(42);
        boolean boolean86 = node79.isVarArgs();
        int int87 = node79.getLineno();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        boolean boolean9 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isAssign();
        node22.setLength(0);
        com.google.javascript.rhino.Node node26 = node22.getNext();
        boolean boolean27 = node3.isEquivalentTo(node22);
        com.google.javascript.rhino.Node node28 = node22.getLastSibling();
        java.util.Set<java.lang.String> strSet29 = node28.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet29);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(38, "OR 41\n", 45, 9);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getPositionOnStartLine();
        int int7 = stringPosition5.getPositionOnEndLine();
        stringPosition5.setItem("java.io.IOException: JSDocInfo");
        java.lang.String str10 = stringPosition5.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int12 = stringPosition11.getStartLine();
        int int13 = stringPosition11.getEndLine();
        int int14 = stringPosition11.getPositionOnEndLine();
        stringPosition11.setItem("JSDocInfo");
        int int17 = stringPosition11.getEndLine();
        int int18 = stringPosition11.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int20 = stringPosition19.getStartLine();
        int int21 = stringPosition19.getEndLine();
        int int22 = stringPosition19.getPositionOnEndLine();
        stringPosition19.setItem("JSDocInfo");
        int int25 = stringPosition19.getEndLine();
        int int26 = stringPosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        int int28 = jSDocInfo27.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo27.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoAlias();
        boolean boolean32 = strSet29.equals((java.lang.Object) jSDocInfo30);
        strSet29.clear();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int35 = stringPosition34.getStartLine();
        int int36 = stringPosition34.getPositionOnEndLine();
        stringPosition34.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int42 = stringPosition34.getEndLine();
        int int43 = stringPosition34.getPositionOnStartLine();
        boolean boolean44 = strSet29.remove((java.lang.Object) stringPosition34);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int46 = stringPosition45.getPositionOnStartLine();
        int int47 = stringPosition45.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int49 = stringPosition48.getPositionOnStartLine();
        int int50 = stringPosition48.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int52 = stringPosition51.getStartLine();
        int int53 = stringPosition51.getPositionOnEndLine();
        stringPosition51.setPositionInformation(0, 51, 31, 48);
        stringPosition51.setItem("java.io.IOException");
        java.lang.String str61 = stringPosition51.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList62 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition5, stringPosition11, stringPosition19, stringPosition34, stringPosition45, stringPosition48, stringPosition51);
        stringPosition0.setItem("(false)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: JSDocInfo" + "'", str10, "java.io.IOException: JSDocInfo");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.io.IOException" + "'", str61, "java.io.IOException");
        org.junit.Assert.assertNotNull(stringPositionList62);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        int int20 = staticSourceFile16.getColumnOfOffset(0);
        boolean boolean21 = staticSourceFile16.isExtern();
        java.lang.String str22 = staticSourceFile16.getName();
        int int24 = staticSourceFile16.getColumnOfOffset(2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray70);
        boolean boolean72 = serializableList71.isEmpty();
        boolean boolean74 = serializableList71.contains((java.lang.Object) 52);
        boolean boolean76 = serializableList71.contains((java.lang.Object) (byte) 0);
        boolean boolean77 = serializableList47.containsAll((java.util.Collection<java.io.Serializable>) serializableList71);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator78 = serializableList47.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor79 = serializableList47.iterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator80 = serializableList47.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator78);
        org.junit.Assert.assertNotNull(serializableItor79);
        org.junit.Assert.assertNotNull(serializableSpliterator80);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(13, 55, (int) ' ');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isContinue();
        boolean boolean9 = node7.isString();
        boolean boolean10 = node7.isStringKey();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node7.siblings();
        node7.setOptionalArg(true);
        node7.setType(41011);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node16 = node3.removeChildAfter(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isStringKey();
        java.lang.String[] strArray34 = new java.lang.String[] { "java.io.IOException: java.io.IOException", "true", "Named type with empty name component", "hi!", "Named type with empty name component", "hi!", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = node3.isWith();
        boolean boolean39 = node3.isCatch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        com.google.javascript.rhino.Node node22 = node3.getLastChild();
        com.google.javascript.rhino.Node node23 = node3.cloneTree();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        int int6 = node3.getType();
        boolean boolean7 = node3.isDec();
        boolean boolean8 = node3.isAnd();
        boolean boolean9 = node3.isCall();
        boolean boolean10 = node3.isParamList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node3.isOnlyModifiesThisCall();
        boolean boolean40 = node3.isScript();
        boolean boolean41 = node3.hasChildren();
        com.google.javascript.rhino.Node node42 = node3.cloneNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        node13.putIntProp((int) (short) 0, (int) (byte) -1);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node13.children();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable65 = node13.getAncestors();
        int int66 = node13.getChildCount();
        node13.detachChildren();
        boolean boolean68 = node13.isBlock();
        boolean boolean69 = node13.isQuotedString();
        boolean boolean70 = node13.isCase();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertNotNull(ancestorIterable65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasModifies();
        jSDocInfo0.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = strSet5.isEmpty();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.lang.Object[] objArray20 = strSet18.toArray();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String[] strArray30 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.lang.String[] strArray36 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object[] objArray39 = strSet37.toArray();
        java.lang.String[] strArray43 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray67 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        java.lang.Object[] objArray70 = strSet68.toArray();
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.lang.String[] strArray80 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.util.AbstractCollection[] abstractCollectionArray84 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray85 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray84;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList86 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strSet18, (java.util.AbstractCollection<java.lang.String>) strList25, (java.util.AbstractCollection<java.lang.String>) strList31, (java.util.AbstractCollection<java.lang.String>) strSet37, (java.util.AbstractCollection<java.lang.String>) strList44, (java.util.AbstractCollection<java.lang.String>) strList48, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strSet68, (java.util.AbstractCollection<java.lang.String>) strList76, (java.util.AbstractCollection<java.lang.String>) strList81, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray84);
        boolean boolean87 = strSet5.contains((java.lang.Object) strList31);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray84);
        org.junit.Assert.assertNotNull(strCollectionArray85);
        org.junit.Assert.assertNotNull(strCollectionList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        boolean boolean28 = serializableList26.equals((java.lang.Object) 10.0d);
        java.io.Serializable serializable30 = serializableList26.get(0);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int32 = stringPosition31.getStartLine();
        int int33 = stringPosition31.getEndLine();
        int int34 = stringPosition31.getPositionOnEndLine();
        stringPosition31.setItem("JSDocInfo");
        boolean boolean37 = serializableList26.contains((java.lang.Object) "JSDocInfo");
        java.lang.Throwable throwable39 = null;
        java.io.IOException iOException40 = new java.io.IOException("TYPEOF 10\n", throwable39);
        java.lang.Throwable[] throwableArray41 = iOException40.getSuppressed();
        boolean boolean42 = serializableList26.contains((java.lang.Object) iOException40);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator43 = serializableList26.spliterator();
        java.util.ListIterator<java.io.Serializable> serializableItor44 = serializableList26.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 1.0d + "'", serializable30, 1.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator43);
        org.junit.Assert.assertNotNull(serializableItor44);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(51, nodeArray8, 48, 32);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(42, nodeArray8, 32, 12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(36, nodeArray8);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(12, nodeArray8);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(0, nodeArray8, 0, 36);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(9, nodeArray8, 0, (int) 'a');
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(24, nodeArray8);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(41013, nodeArray8);
        boolean boolean25 = node24.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        java.lang.String str3 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        int int16 = node10.getChildCount();
        boolean boolean17 = node10.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.copyOf(visibilityArray1);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList3 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        int int5 = jSDocInfo4.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = null;
        jSDocInfo4.setVisibility(visibility6);
        boolean boolean8 = jSDocInfo4.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo4.setVisibility(visibility9);
        java.lang.String str11 = jSDocInfo4.getVersion();
        boolean boolean12 = jSDocInfo4.hasModifies();
        int int13 = jSDocInfo4.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        int int17 = jSDocInfo16.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = null;
        jSDocInfo16.setVisibility(visibility18);
        boolean boolean20 = jSDocInfo16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo16.setVisibility(visibility21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        boolean boolean27 = jSDocInfo23.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo23.setVisibility(visibility28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = null;
        jSDocInfo30.setVisibility(visibility32);
        boolean boolean34 = jSDocInfo30.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo30.setVisibility(visibility35);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList42 = com.google.common.collect.ImmutableList.of(visibility14, visibility15, visibility21, visibility28, visibility35, visibility37, visibility38, visibility39, visibility40, visibility41);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        int int46 = jSDocInfo45.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = null;
        jSDocInfo45.setVisibility(visibility47);
        boolean boolean49 = jSDocInfo45.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo45.setVisibility(visibility50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        int int53 = jSDocInfo52.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = null;
        jSDocInfo52.setVisibility(visibility54);
        boolean boolean56 = jSDocInfo52.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = null;
        jSDocInfo59.setVisibility(visibility61);
        boolean boolean63 = jSDocInfo59.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo59.setVisibility(visibility64);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList71 = com.google.common.collect.ImmutableList.of(visibility43, visibility44, visibility50, visibility57, visibility64, visibility66, visibility67, visibility68, visibility69, visibility70);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList72 = com.google.common.collect.ImmutableList.of(visibility21, visibility57);
        jSDocInfo4.setVisibility(visibility21);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray74 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility21 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility[]> visibilityArrayList75 = com.google.common.collect.ImmutableList.of(visibilityArray1, visibilityArray74);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray77 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility76 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList78 = com.google.common.collect.ImmutableList.copyOf(visibilityArray77);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList79 = com.google.common.collect.ImmutableList.of(visibilityArray77);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray81 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility80 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList82 = com.google.common.collect.ImmutableList.copyOf(visibilityArray81);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList83 = com.google.common.collect.ImmutableList.of(visibilityArray81);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility[]> visibilityArrayList84 = com.google.common.collect.ImmutableList.of(visibilityArray74, visibilityArray77, visibilityArray81);
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityList3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList42);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + visibility64 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility64.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList71);
        org.junit.Assert.assertNotNull(visibilityList72);
        org.junit.Assert.assertNotNull(visibilityArray74);
        org.junit.Assert.assertNotNull(visibilityArrayList75);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray77);
        org.junit.Assert.assertNotNull(visibilityList78);
        org.junit.Assert.assertNotNull(visibilityList79);
        org.junit.Assert.assertTrue("'" + visibility80 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility80.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray81);
        org.junit.Assert.assertNotNull(visibilityList82);
        org.junit.Assert.assertNotNull(visibilityList83);
        org.junit.Assert.assertNotNull(visibilityArrayList84);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = serializableList41.contains((java.lang.Object) node51);
        java.util.Iterator<java.io.Serializable> serializableItor70 = serializableList41.iterator();
        boolean boolean71 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        java.lang.Object obj72 = null;
        boolean boolean73 = serializableList41.contains(obj72);
        java.util.ListIterator<java.io.Serializable> serializableItor74 = serializableList41.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor75 = serializableList41.listIterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream76 = serializableList41.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            serializableList41.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(serializableItor75);
        org.junit.Assert.assertNotNull(serializableStream76);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList8 = com.google.common.collect.ImmutableList.of(ternaryValue4, ternaryValue5, ternaryValue6, ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList14 = com.google.common.collect.ImmutableList.of(ternaryValue10, ternaryValue11, ternaryValue12, ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue6.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder17 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder19 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList24 = com.google.common.collect.ImmutableList.of(ternaryValue20, ternaryValue21, ternaryValue22, ternaryValue23);
        java.lang.String str25 = ternaryValue22.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue22.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList36 = com.google.common.collect.ImmutableList.of(ternaryValue32, ternaryValue33, ternaryValue34, ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue27.xor(ternaryValue32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder38 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValueList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValueList14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValueList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValueList36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder38);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        node3.setWasEmptyNode(true);
        boolean boolean8 = node3.isObjectLit();
        boolean boolean9 = node3.isNew();
        boolean boolean10 = node3.isAnd();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isString();
        com.google.javascript.rhino.Node node30 = node14.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.InputId inputId31 = null;
        node30.setInputId(inputId31);
        node30.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        node47.setStaticSourceFile(staticSourceFile48);
        com.google.javascript.rhino.Node node50 = node47.getLastSibling();
        com.google.javascript.rhino.Node node51 = node30.srcrefTree(node47);
        boolean boolean52 = node47.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node47.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        boolean boolean59 = node57.isTry();
        boolean boolean60 = node57.isUnscopedQualifiedName();
        int int61 = node57.getSourceOffset();
        boolean boolean62 = node57.isNumber();
        com.google.javascript.rhino.Node node63 = node47.srcref(node57);
        node47.putIntProp(49, 3);
        boolean boolean67 = node47.isOr();
        com.google.javascript.rhino.Node node68 = node3.useSourceInfoIfMissingFrom(node47);
        boolean boolean69 = node3.isThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(15, "java.io.IOException: java.io.IOException: Unknown class name");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        int int10 = node6.getSourceOffset();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node38 = node29.clonePropsFrom(node36);
        node24.addChildrenToBack(node29);
        boolean boolean40 = node24.isLocalResultCall();
        com.google.javascript.rhino.Node node41 = node19.copyInformationFromForTree(node24);
        node24.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node44 = node15.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        boolean boolean50 = node48.isTrue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isContinue();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node59.setJSType(jSType61);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node68 = node59.clonePropsFrom(node66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 0, node24, node48, node54, node68, 10, (int) (byte) -1);
        node24.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node75 = node6.useSourceInfoFrom(node24);
        node6.setSourceEncodedPosition(30);
        com.google.javascript.rhino.Node node78 = node2.copyInformationFromForTree(node6);
        boolean boolean79 = node6.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        boolean boolean48 = node27.isIf();
        boolean boolean49 = node27.isLabelName();
        boolean boolean50 = node27.isScript();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isComma();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(51, node37, node45, (int) (short) 10, (int) ' ');
        java.lang.String str49 = node37.getSourceFileName();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        boolean boolean55 = node53.isTrue();
        node53.setWasEmptyNode(true);
        boolean boolean58 = node53.isFalse();
        com.google.javascript.rhino.Node node59 = node37.srcrefTree(node53);
        boolean boolean60 = node53.isThis();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isQualifiedName();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        node73.addChildrenToBack(node78);
        boolean boolean89 = node73.isLocalResultCall();
        com.google.javascript.rhino.Node node90 = node68.copyInformationFromForTree(node73);
        node73.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node93 = node64.clonePropsFrom(node73);
        boolean boolean94 = node73.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node53.removeChild(node73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("(InputId: true)");
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "JSDocInfo");
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node16 = node7.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        boolean boolean22 = node20.isString();
        com.google.javascript.rhino.Node node23 = node7.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.InputId inputId24 = null;
        node23.setInputId(inputId24);
        java.lang.Object obj27 = node23.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isString();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.InputId inputId48 = null;
        node47.setInputId(inputId48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node23, node47, node58, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId79 = node58.getInputId();
        boolean boolean80 = node58.isReturn();
        boolean boolean81 = node58.isLabelName();
        com.google.javascript.rhino.Node node82 = node2.clonePropsFrom(node58);
        int int83 = node82.getSourceOffset();
        boolean boolean84 = node82.isFunction();
        boolean boolean85 = node82.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(inputId79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isComma();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(51, node37, node45, (int) (short) 10, (int) ' ');
        boolean boolean49 = node37.isReturn();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId52 = node32.getInputId();
        node32.setLineno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node32.getAncestors();
        int int56 = serializableList17.indexOf((java.lang.Object) node32);
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableList17.stream();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int59 = stringPosition58.getPositionOnStartLine();
        int int60 = stringPosition58.getStartLine();
        int int61 = stringPosition58.getPositionOnStartLine();
        java.lang.String str62 = stringPosition58.getItem();
        int int63 = stringPosition58.getPositionOnEndLine();
        int int64 = stringPosition58.getPositionOnEndLine();
        int int65 = stringPosition58.getPositionOnEndLine();
        boolean boolean66 = serializableList17.equals((java.lang.Object) stringPosition58);
        int int67 = stringPosition58.getPositionOnEndLine();
        int int68 = stringPosition58.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList9 = com.google.common.collect.ImmutableList.of(ternaryValue5, ternaryValue6, ternaryValue7, ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue1.xor(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList15 = com.google.common.collect.ImmutableList.of(ternaryValue11, ternaryValue12, ternaryValue13, ternaryValue14);
        java.lang.String str16 = ternaryValue13.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue13.or(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue22.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue1.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList41 = com.google.common.collect.ImmutableList.of(ternaryValue37, ternaryValue38, ternaryValue39, ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue32.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue37.xor(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue1.xor(ternaryValue48);
        java.lang.String str50 = ternaryValue1.toString();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder51 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList52 = ternaryValueEnumBuilder51.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray53 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder54 = ternaryValueEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        java.lang.String str60 = ternaryValue57.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue57.or(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList71 = com.google.common.collect.ImmutableList.of(ternaryValue67, ternaryValue68, ternaryValue69, ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue62.xor(ternaryValue67);
        boolean boolean74 = ternaryValue67.toBoolean(false);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder75 = ternaryValueEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue67.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList81 = com.google.common.collect.ImmutableList.of(ternaryValue77, ternaryValue78, ternaryValue79, ternaryValue80);
        java.lang.String str82 = ternaryValue79.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList87 = com.google.common.collect.ImmutableList.of(ternaryValue83, ternaryValue84, ternaryValue85, ternaryValue86);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue79.or(ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = ternaryValue88.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = ternaryValue88.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = ternaryValue67.xor(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue1.and(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValueList9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValueList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "true" + "'", str16, "true");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueList41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "true" + "'", str50, "true");
        org.junit.Assert.assertNotNull(ternaryValueEnumList52);
        org.junit.Assert.assertNotNull(ternaryValueArray53);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "true" + "'", str60, "true");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValueList71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValueList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "true" + "'", str82, "true");
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValueList87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node15 = node6.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        boolean boolean21 = node19.isString();
        com.google.javascript.rhino.Node node22 = node6.useSourceInfoFromForTree(node19);
        namePosition0.setItem(node22);
        boolean boolean24 = node22.isCall();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        java.util.Iterator<java.io.Serializable>[][] serializableItorArray0 = null;
        java.util.Iterator[] iteratorArray2 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.io.Serializable>[] serializableItorArray3 = (java.util.Iterator<java.io.Serializable>[]) iteratorArray2;
        java.util.Iterator[] iteratorArray5 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.io.Serializable>[] serializableItorArray6 = (java.util.Iterator<java.io.Serializable>[]) iteratorArray5;
        java.util.Iterator[][] iteratorArray8 = new java.util.Iterator[2][];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.io.Serializable>[][] serializableItorArray9 = (java.util.Iterator<java.io.Serializable>[][]) iteratorArray8;
        serializableItorArray9[0] = iteratorArray2;
        serializableItorArray9[1] = iteratorArray5;
        com.google.common.collect.ImmutableList<java.util.Iterator<java.io.Serializable>[]> serializableItorArrayList14 = com.google.common.collect.ImmutableList.copyOf(serializableItorArray9);
        com.google.common.collect.ImmutableList<java.util.Iterator<java.io.Serializable>[]> serializableItorArrayList15 = com.google.common.collect.ImmutableList.of(serializableItorArray9);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.util.Iterator<java.io.Serializable>[][]> serializableItorArrayList16 = com.google.common.collect.ImmutableList.of(serializableItorArray0, serializableItorArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iteratorArray2);
        org.junit.Assert.assertNotNull(serializableItorArray3);
        org.junit.Assert.assertNotNull(iteratorArray5);
        org.junit.Assert.assertNotNull(serializableItorArray6);
        org.junit.Assert.assertNotNull(iteratorArray8);
        org.junit.Assert.assertNotNull(serializableItorArray9);
        org.junit.Assert.assertNotNull(serializableItorArrayList14);
        org.junit.Assert.assertNotNull(serializableItorArrayList15);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        boolean boolean57 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.reverse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor60 = serializableList58.listIterator(16431);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (16431) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableList58);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isExpose();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        boolean boolean25 = node19.isRegExp();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        node34.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId54 = node34.getInputId();
        node34.setLineno(54);
        boolean boolean57 = node34.isVoid();
        boolean boolean58 = node34.isFromExterns();
        boolean boolean59 = node34.isSwitch();
        int int60 = node19.getIndexOfChild(node34);
        boolean boolean61 = node34.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(inputId54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        boolean boolean2 = node1.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList71.asList();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList73 = serializableList71.reverse();
        java.lang.Object[] objArray74 = serializableList71.toArray();
        boolean boolean75 = serializableList71.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertNotNull(serializableList73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList16 = com.google.common.collect.ImmutableList.of(ternaryValue12, ternaryValue13, ternaryValue14, ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList19 = ternaryValueEnumBuilder18.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList24 = com.google.common.collect.ImmutableList.of(ternaryValue20, ternaryValue21, ternaryValue22, ternaryValue23);
        java.lang.String str25 = ternaryValue22.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue22.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList36 = com.google.common.collect.ImmutableList.of(ternaryValue32, ternaryValue33, ternaryValue34, ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue27.xor(ternaryValue32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder38 = ternaryValueEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue37);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder39 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList40 = ternaryValueEnumBuilder39.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList45 = com.google.common.collect.ImmutableList.of(ternaryValue41, ternaryValue42, ternaryValue43, ternaryValue44);
        java.lang.String str46 = ternaryValue43.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList51 = com.google.common.collect.ImmutableList.of(ternaryValue47, ternaryValue48, ternaryValue49, ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue43.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList57 = com.google.common.collect.ImmutableList.of(ternaryValue53, ternaryValue54, ternaryValue55, ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue48.xor(ternaryValue53);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder59 = ternaryValueEnumBuilder39.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue58);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder60 = ternaryValueEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue58);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList61 = ternaryValueEnumBuilder38.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder62 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList63 = ternaryValueEnumBuilder62.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList68 = com.google.common.collect.ImmutableList.of(ternaryValue64, ternaryValue65, ternaryValue66, ternaryValue67);
        java.lang.String str69 = ternaryValue66.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList74 = com.google.common.collect.ImmutableList.of(ternaryValue70, ternaryValue71, ternaryValue72, ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue66.or(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList80 = com.google.common.collect.ImmutableList.of(ternaryValue76, ternaryValue77, ternaryValue78, ternaryValue79);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue71.xor(ternaryValue76);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder82 = ternaryValueEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue81);
        java.lang.String str83 = ternaryValue81.toString();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder84 = ternaryValueEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = ternaryValue12.xor(ternaryValue81);
        java.lang.String str86 = ternaryValue12.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValueList16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueEnumList19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValueList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValueList36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder38);
        org.junit.Assert.assertNotNull(ternaryValueEnumList40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueList45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "true" + "'", str46, "true");
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValueList51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValueList57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder59);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder60);
        org.junit.Assert.assertNotNull(ternaryValueEnumList61);
        org.junit.Assert.assertNotNull(ternaryValueEnumList63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValueList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "true" + "'", str69, "true");
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValueList74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValueList80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "false" + "'", str83, "false");
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "true" + "'", str86, "true");
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = serializableList41.contains((java.lang.Object) node51);
        java.util.Iterator<java.io.Serializable> serializableItor70 = serializableList41.iterator();
        boolean boolean71 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        java.lang.Object obj72 = null;
        boolean boolean73 = serializableList41.contains(obj72);
        java.util.ListIterator<java.io.Serializable> serializableItor74 = serializableList41.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor75 = serializableList41.listIterator();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isInstanceOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node79, "Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        int int84 = jSDocInfo83.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection85 = jSDocInfo83.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = jSDocInfo83.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo83.getBaseType();
        boolean boolean88 = jSTypeExpression82.equals((java.lang.Object) jSDocInfo83);
        boolean boolean89 = jSTypeExpression82.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression82);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = serializableList41.remove((java.lang.Object) jSTypeExpression90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(serializableItor75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(nodeCollection85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression90);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId49 = node29.getInputId();
        com.google.javascript.rhino.Node node50 = node12.srcref(node29);
        node12.putBooleanProp((int) (short) 1, false);
        boolean boolean54 = node12.isVarArgs();
        boolean boolean55 = node12.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.lang.String str7 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.lang.String[] strArray83 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        java.lang.Object[] objArray86 = strSet84.toArray();
        java.lang.Object[] objArray87 = strSet47.toArray(objArray86);
        int int88 = strSet47.size();
        java.lang.Object[] objArray89 = strSet47.toArray();
        boolean boolean91 = strSet47.add("TYPEOF 10\n");
        strSet47.clear();
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList93 = com.google.common.collect.ImmutableList.of((java.util.Set<java.lang.String>) strSet47);
        java.util.Iterator<java.lang.String> strItor94 = strSet47.iterator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strSetList93);
        org.junit.Assert.assertNotNull(strItor94);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.hasParameter("true");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        java.lang.String str6 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getBaseType();
        node8.setJSDocInfo(jSDocInfo10);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        boolean boolean37 = node35.isString();
        com.google.javascript.rhino.Node node38 = node22.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.InputId inputId39 = null;
        node38.setInputId(inputId39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int47 = node45.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        int int49 = jSDocInfo48.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = null;
        jSDocInfo48.setVisibility(visibility50);
        boolean boolean52 = jSDocInfo48.hasFileOverview();
        boolean boolean53 = jSDocInfo48.isJavaDispatch();
        boolean boolean54 = jSDocInfo48.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo48.getExtendedInterfaces();
        java.lang.String str56 = jSDocInfo48.getLicense();
        boolean boolean57 = jSDocInfo48.hasBaseType();
        boolean boolean58 = jSDocInfo48.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        boolean boolean61 = jSDocInfo59.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        int int64 = jSDocInfo63.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isQualifiedName();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        boolean boolean75 = node73.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList76 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo10, (java.io.Serializable) boolean18, (java.io.Serializable) node38, (java.io.Serializable) int47, (java.io.Serializable) boolean58, (java.io.Serializable) boolean61, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo63, (java.io.Serializable) node68, (java.io.Serializable) boolean75);
        java.util.Set<java.lang.String> strSet77 = node38.getDirectives();
        boolean boolean78 = node38.hasOneChild();
        boolean boolean79 = node38.isObjectLit();
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(51, nodeArray81, 48, 32);
        boolean boolean85 = node84.isSetterDef();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder86 = node84.getJsDocBuilderForNode();
        node38.addChildrenToBack(node84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = node3.checkTreeEquals(node84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serializableList76);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder86);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node25.isLocalResultCall();
        boolean boolean27 = node25.isDec();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        int int29 = jSDocInfo28.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = null;
        jSDocInfo28.setVisibility(visibility30);
        boolean boolean32 = jSDocInfo28.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo28.setVisibility(visibility33);
        java.lang.String str35 = jSDocInfo28.getVersion();
        boolean boolean36 = jSDocInfo28.isExterns();
        node25.setJSDocInfo(jSDocInfo28);
        com.google.javascript.rhino.Node node38 = node25.getLastChild();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isContinue();
        com.google.javascript.rhino.Node node56 = node47.clonePropsFrom(node54);
        node42.addChildrenToBack(node47);
        boolean boolean58 = node42.isLocalResultCall();
        int int59 = node42.getLength();
        com.google.javascript.rhino.Node node60 = node42.getFirstChild();
        com.google.javascript.rhino.Node node61 = node42.getFirstChild();
        node25.addChildrenToFront(node42);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isLabelName();
        boolean boolean68 = node66.isTrue();
        boolean boolean69 = node66.isNoSideEffectsCall();
        boolean boolean70 = node66.isCase();
        boolean boolean71 = node66.isVar();
        boolean boolean72 = node66.isFromExterns();
        boolean boolean73 = node66.isReturn();
        node42.addChildrenToFront(node66);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("(InputId: true)");
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException();
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException30);
        iOException28.addSuppressed((java.lang.Throwable) iOException30);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException30);
        java.io.IOException iOException34 = new java.io.IOException("false", (java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.lang.Throwable[] throwableArray39 = iOException38.getSuppressed();
        iOException33.addSuppressed((java.lang.Throwable) iOException38);
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.add(49, (java.io.Serializable) iOException38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        int int19 = serializableList17.size();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        node33.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node53 = node24.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isLabelName();
        boolean boolean59 = node57.isTrue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node68.setJSType(jSType70);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node77 = node68.clonePropsFrom(node75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 0, node33, node57, node63, node77, 10, (int) (byte) -1);
        boolean boolean81 = serializableList17.equals((java.lang.Object) (byte) 0);
        boolean boolean82 = serializableList17.isEmpty();
        int int83 = serializableList17.size();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition84 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int85 = stringPosition84.getStartLine();
        int int86 = stringPosition84.getPositionOnEndLine();
        int int87 = stringPosition84.getPositionOnEndLine();
        int int88 = stringPosition84.getPositionOnEndLine();
        int int89 = stringPosition84.getPositionOnStartLine();
        stringPosition84.setItem("Not declared as a type name");
        int int92 = stringPosition84.getPositionOnEndLine();
        java.lang.String str93 = stringPosition84.getItem();
        boolean boolean94 = serializableList17.equals((java.lang.Object) stringPosition84);
        int int95 = stringPosition84.getStartLine();
        int int96 = stringPosition84.getPositionOnStartLine();
        java.lang.String str97 = stringPosition84.getItem();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 16 + "'", int83 == 16);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Not declared as a type name" + "'", str93, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Not declared as a type name" + "'", str97, "Not declared as a type name");
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(56, "NAME 51", 8, (int) '4');
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        boolean boolean2 = node1.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(51, nodeArray7, 48, 32);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray7);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(48, nodeArray7, 48, 40);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(44, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7, 49, 38);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(51, nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(131172, nodeArray7);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        jSDocInfo5.addSuppression("(InputId: true)");
        int int77 = jSDocInfo5.getImplementedInterfaceCount();
        int int78 = jSDocInfo5.getImplementedInterfaceCount();
        jSDocInfo5.setLicense("(NAME 51)");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo5.getImplementedInterfaces();
        java.lang.String str82 = jSDocInfo5.toString();
        java.lang.String str83 = jSDocInfo5.getVersion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "JSDocInfo" + "'", str82, "JSDocInfo");
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean5 = node4.isAssign();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 42, 9);
        boolean boolean10 = node9.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        boolean boolean8 = node4.isAdd();
        boolean boolean9 = node4.isObjectLit();
        boolean boolean10 = node4.isSetterDef();
        int int11 = node4.getSideEffectFlags();
        java.io.Serializable[] serializableArray28 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList29 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray28);
        boolean boolean30 = serializableList29.isEmpty();
        boolean boolean32 = serializableList29.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream33 = serializableList29.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableList29.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableList29.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        int int37 = jSDocInfo36.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet38 = jSDocInfo36.getParameterNames();
        boolean boolean39 = serializableList29.contains((java.lang.Object) strSet38);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor40 = serializableList29.iterator();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor41 = serializableList29.iterator();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        boolean boolean60 = node58.isString();
        boolean boolean61 = node58.isStringKey();
        com.google.javascript.rhino.Node node62 = node45.copyInformationFrom(node58);
        boolean boolean63 = node45.isIn();
        boolean boolean64 = node45.isEmpty();
        boolean boolean65 = serializableList29.equals((java.lang.Object) node45);
        com.google.javascript.rhino.Node node66 = node4.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 100, node45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(serializableArray28);
        org.junit.Assert.assertNotNull(serializableList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableStream33);
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serializableItor40);
        org.junit.Assert.assertNotNull(serializableItor41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(51, nodeArray1, 48, 32);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        boolean boolean32 = node9.isStringKey();
        java.lang.String[] strArray40 = new java.lang.String[] { "java.io.IOException: java.io.IOException", "true", "Named type with empty name component", "hi!", "Named type with empty name component", "hi!", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet41);
        boolean boolean45 = strSet41.add("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        node4.setDirectives((java.util.Set<java.lang.String>) strSet41);
        int int48 = node4.getIntProp(47);
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags13.setAllFlags();
        sideEffectFlags13.clearSideEffectFlags();
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        boolean boolean24 = sideEffectFlags13.areAllFlagsSet();
        sideEffectFlags13.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        com.google.javascript.rhino.Node node21 = node3.getFirstChild();
        boolean boolean22 = node21.isTypeOf();
        boolean boolean23 = node21.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        node13.setSourceFileForTesting("hi!");
        boolean boolean16 = node13.isIf();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, node20, 52, (int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        boolean boolean30 = node28.isTrue();
        node28.setWasEmptyNode(true);
        boolean boolean33 = node28.isObjectLit();
        boolean boolean34 = node28.isNew();
        com.google.javascript.rhino.Node node35 = node24.useSourceInfoIfMissingFrom(node28);
        int int36 = node24.getLength();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        boolean boolean49 = serializableList46.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableList46.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo53.getParameterNames();
        boolean boolean56 = serializableList46.contains((java.lang.Object) strSet55);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator57 = serializableList46.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList46.iterator();
        boolean boolean59 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList46);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList60 = serializableList17.asList();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList61 = serializableList17.asList();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(serializableList60);
        org.junit.Assert.assertNotNull(serializableList61);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        int int49 = node4.getChildCount();
        boolean boolean50 = node4.isContinue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node4.siblings();
        com.google.javascript.rhino.jstype.JSType jSType52 = node4.getJSType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = null;
        jSDocInfo53.setVisibility(visibility55);
        boolean boolean57 = jSDocInfo53.isJavaDispatch();
        java.lang.String str59 = jSDocInfo53.getDescriptionForParameter("hi!");
        boolean boolean60 = jSDocInfo53.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo53.getParameterNames();
        java.util.Iterator<java.lang.String> strItor62 = strSet61.iterator();
        node4.setDirectives(strSet61);
        java.lang.Object[] objArray64 = strSet61.toArray();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(44);
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        jSDocInfo0.setAssociatedNode(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node25 = node16.clonePropsFrom(node23);
        boolean boolean26 = node25.isScript();
        int int27 = node25.getLength();
        boolean boolean28 = node25.isFromExterns();
        com.google.javascript.rhino.Node node29 = node25.getNext();
        com.google.javascript.rhino.Node node30 = node25.getLastSibling();
        com.google.javascript.rhino.Node node31 = node11.useSourceInfoIfMissingFrom(node25);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "(java.io.IOException: Unknown class name)");
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isFalse();
        java.io.Serializable[] serializableArray22 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList23 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray22);
        boolean boolean24 = serializableList23.isEmpty();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        boolean boolean51 = serializableList23.contains((java.lang.Object) node33);
        int int52 = node33.getSourcePosition();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        boolean boolean58 = node56.isDec();
        boolean boolean59 = node56.isNoSideEffectsCall();
        node33.addChildToBack(node56);
        boolean boolean61 = node33.hasChildren();
        com.google.javascript.rhino.Node node62 = node3.srcrefTree(node33);
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node33.setJSType(jSType63);
        boolean boolean65 = node33.isIn();
        boolean boolean66 = node33.isParamList();
        boolean boolean67 = node33.isParamList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableArray22);
        org.junit.Assert.assertNotNull(serializableList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet1.intersection(booleanLiteralSet5);
        boolean boolean8 = booleanLiteralSet5.contains(false);
        boolean boolean10 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean14 = booleanLiteralSet12.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet12.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean21 = booleanLiteralSet19.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet19.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean28 = booleanLiteralSet26.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean32 = booleanLiteralSet30.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet30.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet26.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet36.union(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet17, booleanLiteralSet24, booleanLiteralSet39, booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet5.union(booleanLiteralSet17);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        node31.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isComma();
        boolean boolean58 = node22.isEquivalentTo(node55);
        boolean boolean59 = node55.isComma();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) '#', node18, node55, 42, (int) ' ');
        boolean boolean63 = node62.isComma();
        com.google.javascript.rhino.Node node64 = node62.cloneTree();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(16, node12, node62);
        boolean boolean66 = node65.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node67 = node65.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        int int88 = node71.getLength();
        com.google.javascript.rhino.Node node89 = node71.getFirstChild();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node4, node67, node71, 4, 31);
        int int93 = node67.getSideEffectFlags();
        node67.setVarArgs(true);
        com.google.javascript.rhino.Node node96 = node67.cloneTree();
        boolean boolean97 = node67.isHook();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node38 = node29.clonePropsFrom(node36);
        node24.addChildrenToBack(node29);
        boolean boolean40 = node24.isLocalResultCall();
        com.google.javascript.rhino.Node node41 = node19.copyInformationFromForTree(node24);
        node24.setSourceEncodedPosition((int) (short) -1);
        boolean boolean44 = node24.isName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        boolean boolean50 = node48.isDec();
        boolean boolean51 = node48.isNoSideEffectsCall();
        boolean boolean52 = node48.isIf();
        com.google.javascript.rhino.Node node53 = node48.getLastSibling();
        com.google.javascript.rhino.Node node54 = node24.srcref(node48);
        com.google.javascript.rhino.Node node55 = node3.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean56 = node55.isThis();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        boolean boolean71 = node70.isQuotedString();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        boolean boolean77 = node75.isDec();
        boolean boolean78 = node75.isScript();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(0, node70, node75, node82, 0, (int) (short) 0);
        boolean boolean86 = node75.isDec();
        boolean boolean87 = node75.isAssign();
        boolean boolean88 = node55.isEquivalentTo(node75);
        int int89 = node55.getSourcePosition();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        java.lang.Comparable<java.lang.String> strComparable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList5 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "OR 41\n", (java.lang.Comparable<java.lang.String>) "java.io.IOException: java.io.IOException", strComparable2, (java.lang.Comparable<java.lang.String>) "", (java.lang.Comparable<java.lang.String>) "CALL hi! 100");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 2");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker1.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker1.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = marker1.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(typePosition16);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((-8), 31, 48);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        com.google.javascript.rhino.Node node21 = node3.getFirstChild();
        boolean boolean22 = node3.isRegExp();
        node3.setType(42);
        boolean boolean25 = node3.isParamList();
        boolean boolean26 = node3.isWith();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(100.0d, (int) (byte) 0, 37);
        com.google.javascript.rhino.Node node5 = node3.getAncestor(36);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("unknown", 27, 213092);
        boolean boolean4 = node3.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10L, 213092, 39);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("hi!");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node3.isAssign();
        boolean boolean40 = node3.isTrue();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node3.setJSType(jSType41);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isWhile();
        java.lang.Object obj83 = node79.getProp(53);
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        node79.setJSType(jSType84);
        boolean boolean86 = node79.isTrue();
        boolean boolean87 = node79.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(typePairList0);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("");
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        java.io.Serializable[] serializableArray28 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList29 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray28);
        boolean boolean30 = serializableList29.isEmpty();
        boolean boolean32 = serializableList29.contains((java.lang.Object) 52);
        boolean boolean33 = strSet11.containsAll((java.util.Collection<java.io.Serializable>) serializableList29);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList34 = serializableList29.reverse();
        // The following exception was thrown during execution in test generation
        try {
            serializableList29.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(serializableArray28);
        org.junit.Assert.assertNotNull(serializableList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(serializableList34);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        boolean boolean7 = node5.isTrue();
        node5.setWasEmptyNode(true);
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        boolean boolean24 = node23.isQuotedString();
        int int25 = node23.getCharno();
        com.google.javascript.rhino.Node node26 = node5.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node27 = null;
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = node1.srcrefTree(node23);
        boolean boolean31 = node29.getBooleanProp(15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        boolean boolean48 = serializableList45.contains((java.lang.Object) 52);
        int int50 = serializableList45.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor51 = serializableList45.iterator();
        java.util.List<java.io.Serializable> serializableList54 = serializableList45.subList((int) (short) 10, 16);
        int int55 = serializableList17.lastIndexOf((java.lang.Object) serializableList54);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator56 = serializableList17.spliterator();
        boolean boolean57 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList17.asList();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(serializableItor51);
        org.junit.Assert.assertNotNull(serializableList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(serializableSpliterator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableList58);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) 'a', (int) (byte) 0, 43);
        boolean boolean4 = node3.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean8 = jSDocInfo0.hasParameterType("");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        node30.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node50 = node21.clonePropsFrom(node30);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isInstanceOf();
        boolean boolean56 = node54.isComma();
        boolean boolean57 = node21.isEquivalentTo(node54);
        boolean boolean58 = node54.isComma();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) '#', node17, node54, 42, (int) ' ');
        boolean boolean62 = node61.isComma();
        com.google.javascript.rhino.Node node63 = node61.cloneTree();
        boolean boolean64 = node63.isWith();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isTry();
        com.google.javascript.rhino.Node node71 = node63.clonePropsFrom(node68);
        int int72 = node68.getSideEffectFlags();
        jSDocInfo0.setAssociatedNode(node68);
        java.lang.Class<?> wildcardClass74 = jSDocInfo0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.InputId inputId30 = node19.getInputId();
        boolean boolean31 = node19.hasChildren();
        boolean boolean32 = node19.isTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet11.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean33 = booleanLiteralSet31.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet29.union(booleanLiteralSet31);
        boolean boolean36 = booleanLiteralSet31.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean40 = booleanLiteralSet38.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean44 = booleanLiteralSet42.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet42.intersection(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet38.intersection(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet48.union(booleanLiteralSet50);
        boolean boolean53 = booleanLiteralSet51.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean57 = booleanLiteralSet55.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean61 = booleanLiteralSet59.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = booleanLiteralSet59.intersection(booleanLiteralSet63);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = booleanLiteralSet55.intersection(booleanLiteralSet63);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet65.union(booleanLiteralSet67);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean72 = booleanLiteralSet70.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean76 = booleanLiteralSet74.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = booleanLiteralSet74.intersection(booleanLiteralSet78);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet70.intersection(booleanLiteralSet78);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet80.union(booleanLiteralSet82);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = booleanLiteralSet65.union(booleanLiteralSet83);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet85 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean87 = booleanLiteralSet85.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet83.union(booleanLiteralSet85);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet90 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean92 = booleanLiteralSet90.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet95 = booleanLiteralSet90.intersection(booleanLiteralSet94);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList96 = com.google.common.collect.ImmutableList.of(booleanLiteralSet51, booleanLiteralSet88, booleanLiteralSet94);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = booleanLiteralSet31.union(booleanLiteralSet88);
        boolean boolean99 = booleanLiteralSet97.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet85 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet85.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet90 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet90.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet95 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet95.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList96);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        boolean boolean25 = node19.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = node19.getChildAtIndex(42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        boolean boolean5 = node3.isAnd();
        boolean boolean6 = node3.isWhile();
        int int7 = node3.getLineno();
        boolean boolean8 = node3.isFunction();
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node62.isTrue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node62, node68, node82, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node86 = node19.srcrefTree(node38);
        boolean boolean87 = node86.isTypeOf();
        boolean boolean88 = node86.isInstanceOf();
        boolean boolean89 = node86.isReturn();
        node86.setWasEmptyNode(false);
        boolean boolean92 = node86.isReturn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isIn();
        boolean boolean9 = node3.isString();
        boolean boolean10 = node3.isRegExp();
        boolean boolean11 = node3.isLabelName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isDo();
        boolean boolean30 = node27.isVar();
        boolean boolean31 = node27.isNew();
        boolean boolean32 = serializableList17.equals((java.lang.Object) node27);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        boolean boolean38 = node36.isDec();
        boolean boolean39 = node36.isAssign();
        boolean boolean40 = node36.isIn();
        boolean boolean41 = node36.isThis();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        boolean boolean60 = node58.isString();
        com.google.javascript.rhino.Node node61 = node45.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.InputId inputId62 = null;
        node61.setInputId(inputId62);
        node61.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node66 = node36.useSourceInfoIfMissingFrom(node61);
        int int67 = serializableList17.indexOf((java.lang.Object) node66);
        boolean boolean68 = node66.isFor();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node66.siblings();
        boolean boolean70 = node66.isDo();
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node66.setJSType(jSType71);
        boolean boolean73 = node66.isExprResult();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getPositionOnEndLine();
        int int5 = typePosition0.getEndLine();
        int int6 = typePosition0.getStartLine();
        int int7 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.isConstructor();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.isConstant();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(1, 12, (int) (short) 1, 100);
        stringPosition0.setPositionInformation(31, 41, 51, 15);
        int int13 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        boolean boolean46 = serializableList17.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.lang.Throwable[] throwableArray35 = iOException33.getSuppressed();
        java.io.IOException iOException37 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException38 = new java.io.IOException();
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException38);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.lang.Throwable[] throwableArray41 = iOException39.getSuppressed();
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException43 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.lang.Throwable[] throwableArray48 = iOException46.getSuppressed();
        java.io.IOException iOException49 = new java.io.IOException();
        java.io.IOException iOException50 = new java.io.IOException((java.lang.Throwable) iOException49);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException53 = new java.io.IOException();
        java.io.IOException iOException55 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException57 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException58 = new java.io.IOException();
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.io.IOException iOException62 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList63 = com.google.common.collect.ImmutableList.of(iOException33, iOException37, iOException39, iOException43, iOException46, iOException50, iOException53, iOException55, iOException57, iOException61, iOException62);
        iOException30.addSuppressed((java.lang.Throwable) iOException61);
        java.io.IOException iOException66 = new java.io.IOException("(Unknown class name)");
        iOException61.addSuppressed((java.lang.Throwable) iOException66);
        java.lang.String str68 = iOException61.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(iOExceptionList63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.io.IOException: java.io.IOException: java.io.IOException" + "'", str68, "java.io.IOException: java.io.IOException: java.io.IOException");
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        int int8 = node3.getSideEffectFlags();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        int int30 = node13.getLength();
        boolean boolean31 = node13.isSwitch();
        node13.putBooleanProp(32, false);
        boolean boolean35 = node13.isNull();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        boolean boolean43 = node39.isIn();
        boolean boolean44 = node39.isThis();
        boolean boolean45 = node39.isOr();
        com.google.javascript.rhino.Node node46 = node13.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoIfMissingFromForTree(node46);
        boolean boolean48 = node3.isDelProp();
        boolean boolean49 = node3.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        boolean boolean36 = node34.isBlock();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = node40.copyInformationFromForTree(node45);
        boolean boolean63 = node40.isStringKey();
        java.lang.String str64 = node34.checkTreeEquals(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = null;
        node34.setJSDocInfo(jSDocInfo65);
        int int67 = node34.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        int int69 = jSDocInfo68.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = null;
        jSDocInfo68.setVisibility(visibility70);
        boolean boolean72 = jSDocInfo68.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo68.setVisibility(visibility73);
        java.lang.String str75 = jSDocInfo68.getVersion();
        boolean boolean76 = jSDocInfo68.isConstructor();
        node34.setJSDocInfo(jSDocInfo68);
        node13.addChildrenToBack(node34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = node13.getChildAtIndex(47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator24);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        boolean boolean28 = node8.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        boolean boolean34 = node32.isDec();
        boolean boolean35 = node32.isNoSideEffectsCall();
        boolean boolean36 = node32.isIf();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        com.google.javascript.rhino.Node node38 = node8.srcref(node32);
        boolean boolean39 = node32.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isAssign();
        boolean boolean8 = node4.isIn();
        boolean boolean9 = node4.isThis();
        boolean boolean10 = node4.isOr();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isString();
        com.google.javascript.rhino.Node node30 = node14.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.InputId inputId31 = null;
        node30.setInputId(inputId31);
        java.lang.Object obj34 = node30.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node30.getJSDocInfo();
        node30.setVarArgs(true);
        boolean boolean38 = node30.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isNoAlias();
        boolean boolean42 = jSDocInfo39.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo39.getEnumParameterType();
        jSDocInfo39.setDeprecated(false);
        boolean boolean46 = jSDocInfo39.isImplicitCast();
        node30.setJSDocInfo(jSDocInfo39);
        node30.setSourceEncodedPositionForTree(8);
        com.google.javascript.rhino.InputId inputId50 = node30.getInputId();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(31, node4, node30, (int) (short) 0, 3);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        boolean boolean60 = node58.isBlock();
        node58.removeProp(12);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((-1), node58, (int) (short) 100, 0);
        boolean boolean66 = node65.isNull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = node53.checkTreeEquals(node65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setLineno(54);
        boolean boolean31 = node8.isParamList();
        boolean boolean32 = node8.isNoSideEffectsCall();
        boolean boolean33 = node8.isSetterDef();
        boolean boolean34 = node8.isHook();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        boolean boolean25 = node20.isVoid();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQualifiedName();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node44.setJSType(jSType46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node53 = node44.clonePropsFrom(node51);
        node39.addChildrenToBack(node44);
        boolean boolean55 = node39.isLocalResultCall();
        com.google.javascript.rhino.Node node56 = node34.copyInformationFromForTree(node39);
        node39.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node59 = node30.clonePropsFrom(node39);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        boolean boolean65 = node63.isTrue();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 0, node39, node63, node69, node83, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node87 = node20.srcrefTree(node39);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node90 = node20.useSourceInfoFromForTree(node89);
        int int91 = node90.getChildCount();
        boolean boolean92 = node90.isQualifiedName();
        boolean boolean93 = node90.isDec();
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(0, node90, 10, 26);
        boolean boolean97 = node96.isComma();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 38, (int) (short) 1);
        boolean boolean4 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        int int7 = node3.getCharno();
        boolean boolean8 = node3.hasMoreThanOneChild();
        boolean boolean9 = node3.isThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor27 = serializableList17.iterator();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node36.isParamList();
        boolean boolean48 = node36.isGetProp();
        boolean boolean49 = node36.isNumber();
        boolean boolean50 = serializableList17.contains((java.lang.Object) boolean49);
        java.util.List<java.io.Serializable> serializableList53 = serializableList17.subList((int) (byte) 0, 0);
        java.util.stream.Stream<java.io.Serializable> serializableStream54 = serializableList53.parallelStream();
        boolean boolean55 = serializableList53.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertNotNull(serializableItor27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(serializableList53);
        org.junit.Assert.assertNotNull(serializableStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node12.children();
        boolean boolean14 = node12.isAssign();
        boolean boolean15 = node12.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray70);
        boolean boolean72 = serializableList71.isEmpty();
        boolean boolean74 = serializableList71.contains((java.lang.Object) 52);
        boolean boolean76 = serializableList71.contains((java.lang.Object) (byte) 0);
        boolean boolean77 = serializableList47.containsAll((java.util.Collection<java.io.Serializable>) serializableList71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        int int79 = jSDocInfo78.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = null;
        jSDocInfo78.setVisibility(visibility80);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection82 = jSDocInfo78.getMarkers();
        boolean boolean83 = serializableList47.contains((java.lang.Object) markerCollection82);
        int int84 = serializableList47.size();
        boolean boolean85 = serializableList47.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream86 = serializableList47.parallelStream();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(markerCollection82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 16 + "'", int84 == 16);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(serializableStream86);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isQualifiedName();
        boolean boolean71 = node69.isHook();
        int int72 = node69.getLength();
        boolean boolean73 = node69.isThis();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = serializableList17.remove((java.lang.Object) boolean73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.isConstant();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        boolean boolean46 = node44.isTrue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node20, node44, node50, node64, 10, (int) (byte) -1);
        boolean boolean68 = node64.isGetProp();
        jSDocInfo0.setAssociatedNode(node64);
        boolean boolean70 = jSDocInfo0.isExport();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection71 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isInstanceOf();
        boolean boolean77 = node75.isComma();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node75.setStaticSourceFile(staticSourceFile78);
        node75.setOptionalArg(false);
        jSDocInfo0.setAssociatedNode(node75);
        boolean boolean83 = jSDocInfo0.hasType();
        jSDocInfo0.setLicense("(java.io.IOException: java.io.IOException)");
        java.lang.String str86 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet87 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeCollection71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strSet87);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getBaseType();
        node13.setJSDocInfo(jSDocInfo15);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        boolean boolean42 = node40.isString();
        com.google.javascript.rhino.Node node43 = node27.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.InputId inputId44 = null;
        node43.setInputId(inputId44);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int52 = node50.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = null;
        jSDocInfo53.setVisibility(visibility55);
        boolean boolean57 = jSDocInfo53.hasFileOverview();
        boolean boolean58 = jSDocInfo53.isJavaDispatch();
        boolean boolean59 = jSDocInfo53.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList60 = jSDocInfo53.getExtendedInterfaces();
        java.lang.String str61 = jSDocInfo53.getLicense();
        boolean boolean62 = jSDocInfo53.hasBaseType();
        boolean boolean63 = jSDocInfo53.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        int int65 = jSDocInfo64.getImplementedInterfaceCount();
        boolean boolean66 = jSDocInfo64.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        int int69 = jSDocInfo68.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isQualifiedName();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        boolean boolean80 = node78.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList81 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo15, (java.io.Serializable) boolean23, (java.io.Serializable) node43, (java.io.Serializable) int52, (java.io.Serializable) boolean63, (java.io.Serializable) boolean66, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo68, (java.io.Serializable) node73, (java.io.Serializable) boolean80);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor82 = serializableList81.iterator();
        boolean boolean83 = strSet9.removeAll((java.util.Collection<java.io.Serializable>) serializableList81);
        int int84 = strSet9.size();
        java.lang.Object[] objArray85 = strSet9.toArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(serializableList81);
        org.junit.Assert.assertNotNull(serializableItor82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        boolean boolean9 = node3.isQuotedString();
        com.google.javascript.rhino.InputId inputId10 = node3.getInputId();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node23.setStaticSourceFile(staticSourceFile24);
        boolean boolean26 = node23.isTrue();
        boolean boolean27 = node23.isOptionalArg();
        boolean boolean28 = node3.isEquivalentTo(node23);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node30 = node23.getChildAtIndex((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isIn();
        node3.setVarArgs(false);
        boolean boolean11 = node3.isComma();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        boolean boolean17 = node15.isDec();
        boolean boolean18 = node15.isAssign();
        boolean boolean19 = node15.isIn();
        node15.setCharno((int) (short) 0);
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node23 = node15.getFirstChild();
        boolean boolean24 = node15.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        java.io.IOException iOException1 = new java.io.IOException("true");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException3.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException8 = new java.io.IOException();
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.lang.Throwable[] throwableArray11 = iOException9.getSuppressed();
        java.io.IOException iOException12 = new java.io.IOException();
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray18 = iOException16.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException();
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException27 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException32 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList33 = com.google.common.collect.ImmutableList.of(iOException3, iOException7, iOException9, iOException13, iOException16, iOException20, iOException23, iOException25, iOException27, iOException31, iOException32);
        java.io.IOException iOException35 = new java.io.IOException("CALL hi!");
        iOException7.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException35);
        iOException1.addSuppressed((java.lang.Throwable) iOException37);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(iOExceptionList33);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) -1);
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        node3.setOptionalArg(false);
        java.util.Set<java.lang.String> strSet75 = node3.getDirectives();
        boolean boolean76 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isFalse();
        java.io.Serializable[] serializableArray22 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList23 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray22);
        boolean boolean24 = serializableList23.isEmpty();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        boolean boolean51 = serializableList23.contains((java.lang.Object) node33);
        int int52 = node33.getSourcePosition();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        boolean boolean58 = node56.isDec();
        boolean boolean59 = node56.isNoSideEffectsCall();
        node33.addChildToBack(node56);
        boolean boolean61 = node33.hasChildren();
        com.google.javascript.rhino.Node node62 = node3.srcrefTree(node33);
        com.google.javascript.rhino.Node node63 = node33.getLastChild();
        boolean boolean64 = node63.isFalse();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 46, (int) (byte) 0, 35);
        boolean boolean69 = node63.hasChild(node68);
        node63.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableArray22);
        org.junit.Assert.assertNotNull(serializableList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        java.io.Serializable[] serializableArray43 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList44 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray43);
        int int45 = serializableList44.size();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList44.iterator();
        boolean boolean47 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList44);
        java.io.Serializable[] serializableArray64 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray64);
        boolean boolean66 = serializableList65.isEmpty();
        boolean boolean68 = serializableList65.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream69 = serializableList65.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor70 = serializableList65.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor71 = serializableList65.listIterator();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.io.Serializable>> serializableCollectionList72 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection<java.io.Serializable>) serializableList65);
        boolean boolean73 = serializableList65.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = serializableList17.retainAll((java.util.Collection<java.io.Serializable>) serializableList65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertNotNull(serializableArray43);
        org.junit.Assert.assertNotNull(serializableList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(serializableItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(serializableArray64);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(serializableStream69);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertNotNull(serializableItor71);
        org.junit.Assert.assertNotNull(serializableCollectionList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        int int16 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node10.children();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node30.setSourceFileForTesting("hi!");
        boolean boolean33 = node30.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        int int36 = staticSourceFile34.getLineOffset(31);
        boolean boolean37 = staticSourceFile34.isExtern();
        boolean boolean38 = staticSourceFile34.isExtern();
        java.lang.String str39 = staticSourceFile34.getName();
        int int41 = staticSourceFile34.getColumnOfOffset(1);
        node10.setStaticSourceFile(staticSourceFile34);
        int int44 = staticSourceFile34.getLineOffset(46);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2147483648) + "'", int36 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-2147483648) + "'", int44 == (-2147483648));
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.isDefine();
        boolean boolean12 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isDec();
        boolean boolean53 = node50.isNoSideEffectsCall();
        node27.addChildToBack(node50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node50.new FileLevelJsDocBuilder();
        boolean boolean56 = node50.isOptionalArg();
        boolean boolean57 = node50.isFor();
        boolean boolean58 = node50.isString();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        int int39 = node21.getSourceOffset();
        int int40 = node21.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        boolean boolean8 = jSDocInfo0.hasThisType();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isWith();
        boolean boolean27 = node3.isDebugger();
        boolean boolean29 = node3.getBooleanProp((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node16 = node7.clonePropsFrom(node14);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node16.children();
        node2.putProp(50, (java.lang.Object) node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        boolean boolean20 = node16.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.hasParameterType("Named type with empty name component");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        boolean boolean14 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.setLicense("InputId: JSDocInfo");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<java.io.Serializable>[]> serializableItorArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(serializableItorArrayBuilder0);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.lang.String str24 = serializableList17.toString();
        java.io.Serializable serializable26 = serializableList17.get((int) (short) 1);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = serializableList17.reverse();
        int int28 = serializableList27.size();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("InputId: Unknown class name");
        boolean boolean31 = node30.isDo();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node30.getJsDocBuilderForNode();
        fileLevelJsDocBuilder32.append("(GT)");
        boolean boolean35 = serializableList27.contains((java.lang.Object) "(GT)");
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str24, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + 10.0f + "'", serializable26, 10.0f);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        boolean boolean16 = node3.isIn();
        boolean boolean17 = node3.isOr();
        int int18 = node3.getType();
        boolean boolean20 = node3.getBooleanProp(4);
        com.google.javascript.rhino.InputId inputId21 = node3.getInputId();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node34.setSourceFileForTesting("hi!");
        boolean boolean37 = node34.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node34.getStaticSourceFile();
        java.lang.String str39 = staticSourceFile38.getName();
        boolean boolean40 = staticSourceFile38.isExtern();
        int int42 = staticSourceFile38.getColumnOfOffset(44);
        int int44 = staticSourceFile38.getLineOffset(38);
        int int46 = staticSourceFile38.getLineOfOffset(39);
        java.lang.String str47 = staticSourceFile38.getName();
        node3.setStaticSourceFile(staticSourceFile38);
        boolean boolean49 = node3.isAdd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(staticSourceFile38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-2147483648) + "'", int44 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean4 = booleanLiteralSet2.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet2.intersection(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet9.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList32 = com.google.common.collect.ImmutableList.of(booleanLiteralSet7, booleanLiteralSet14, booleanLiteralSet29, booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet0.union(booleanLiteralSet29);
        boolean boolean35 = booleanLiteralSet0.contains(true);
        boolean boolean37 = booleanLiteralSet0.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList32);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        java.lang.String str32 = node30.getSourceFileName();
        int int33 = node30.getType();
        boolean boolean34 = node30.isInc();
        boolean boolean35 = node30.isBlock();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 38 + "'", int33 == 38);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "(Unknown class name)", (int) 'a', (int) (byte) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        int int7 = jSDocInfo6.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo6.getModifies();
        boolean boolean9 = jSDocInfo6.hasBaseType();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        node33.addChildrenToBack(node38);
        boolean boolean49 = node33.isLocalResultCall();
        com.google.javascript.rhino.Node node50 = node28.copyInformationFromForTree(node33);
        node33.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node53 = node24.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isInstanceOf();
        boolean boolean59 = node57.isComma();
        boolean boolean60 = node24.isEquivalentTo(node57);
        boolean boolean61 = node57.isComma();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) '#', node20, node57, 42, (int) ' ');
        boolean boolean65 = node64.isComma();
        com.google.javascript.rhino.Node node66 = node64.cloneTree();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(16, node14, node64);
        node67.detachChildren();
        jSDocInfo6.setAssociatedNode(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        int int72 = jSDocInfo71.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = null;
        jSDocInfo71.setVisibility(visibility73);
        boolean boolean75 = jSDocInfo71.hasFileOverview();
        boolean boolean76 = jSDocInfo71.isJavaDispatch();
        boolean boolean77 = jSDocInfo71.hasType();
        boolean boolean79 = jSDocInfo71.hasDescriptionForParameter("");
        boolean boolean80 = jSDocInfo71.isNoCompile();
        node67.putProp((-1), (java.lang.Object) boolean80);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        boolean boolean86 = node67.hasChild(node85);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(31, node5, node67, 30, 45);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node67, "THIS");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor19 = serializableList17.listIterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList25 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue22, ternaryValue23, ternaryValue24);
        java.lang.String str26 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList31 = com.google.common.collect.ImmutableList.of(ternaryValue27, ternaryValue28, ternaryValue29, ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue23.or(ternaryValue28);
        java.lang.String str33 = ternaryValue28.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue20.xor(ternaryValue28);
        int int35 = serializableList17.lastIndexOf((java.lang.Object) ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue20.not();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableItor19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValueList31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue36);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        boolean boolean80 = strSet30.isEmpty();
        int int81 = strSet30.size();
        java.lang.Object obj82 = null;
        boolean boolean83 = strSet30.equals(obj82);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = strSet8.isEmpty();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        int int30 = jSDocInfo29.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection31 = jSDocInfo29.getTypeNodes();
        boolean boolean32 = serializableList27.equals((java.lang.Object) jSDocInfo29);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo29.getEnumParameterType();
        boolean boolean34 = strSet8.equals((java.lang.Object) jSDocInfo29);
        boolean boolean35 = jSDocInfo29.isDefine();
        boolean boolean37 = jSDocInfo29.hasParameter("NUMBER 41.0 51");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(nodeCollection31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        int int11 = jSDocInfo10.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = null;
        jSDocInfo10.setVisibility(visibility12);
        boolean boolean14 = jSDocInfo10.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo10.setVisibility(visibility15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        int int18 = jSDocInfo17.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = null;
        jSDocInfo17.setVisibility(visibility19);
        boolean boolean21 = jSDocInfo17.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo17.setVisibility(visibility22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = null;
        jSDocInfo24.setVisibility(visibility26);
        boolean boolean28 = jSDocInfo24.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo24.setVisibility(visibility29);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList36 = com.google.common.collect.ImmutableList.of(visibility8, visibility9, visibility15, visibility22, visibility29, visibility31, visibility32, visibility33, visibility34, visibility35);
        jSDocInfo0.setVisibility(visibility31);
        boolean boolean38 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo0.getThrownTypes();
        java.lang.String str40 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection42 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertNotNull(markerCollection42);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        int int60 = node57.getCharno();
        node57.setIsSyntheticBlock(true);
        boolean boolean63 = node57.isLabel();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isExterns();
        java.lang.String str10 = jSDocInfo0.getVersion();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(1, 12, (int) (short) 1, 100);
        stringPosition0.setPositionInformation(31, 41, 51, 15);
        int int13 = stringPosition0.getEndLine();
        int int14 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        java.io.IOException iOException1 = new java.io.IOException("Named type with empty name component");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        int int8 = node6.getSourcePosition();
        com.google.javascript.rhino.Node node9 = node3.srcrefTree(node6);
        boolean boolean10 = node3.isWhile();
        boolean boolean11 = node3.isWith();
        node3.setOptionalArg(true);
        boolean boolean14 = node3.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node60.isContinue();
        node60.setCharno((int) (short) 100);
        boolean boolean64 = node60.isScript();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        boolean boolean5 = node2.isArrayLit();
        boolean boolean6 = node2.isContinue();
        node2.setOptionalArg(false);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        boolean boolean14 = node12.isBlock();
        node12.removeProp(12);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        boolean boolean31 = node30.isQuotedString();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        boolean boolean37 = node35.isDec();
        boolean boolean38 = node35.isScript();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, node30, node35, node42, 0, (int) (short) 0);
        boolean boolean46 = node30.isTrue();
        com.google.javascript.rhino.Node node47 = node12.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean48 = node12.isAssign();
        boolean boolean49 = node12.isTrue();
        int int50 = node12.getType();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(49, 42, 0);
        com.google.javascript.rhino.Node node56 = node54.getAncestor(35);
        int int57 = node54.getCharno();
        com.google.javascript.rhino.Node node58 = node12.useSourceInfoIfMissingFrom(node54);
        boolean boolean59 = node58.isReturn();
        boolean boolean60 = node58.isGetElem();
        node2.addChildToBack(node58);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNull();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        boolean boolean11 = node9.isString();
        node3.addChildrenToFront(node9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.new FileLevelJsDocBuilder();
        boolean boolean14 = node9.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasModifies();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        java.lang.String str12 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "(([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]))");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssign();
        boolean boolean6 = node3.isStringKey();
        boolean boolean7 = node3.isAssign();
        boolean boolean8 = node3.isTypeOf();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isQualifiedName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        node22.addChildrenToBack(node27);
        boolean boolean38 = node22.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = node17.copyInformationFromForTree(node22);
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node42 = node13.clonePropsFrom(node22);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        boolean boolean48 = node46.isTrue();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node57.setJSType(jSType59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        com.google.javascript.rhino.Node node66 = node57.clonePropsFrom(node64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 0, node22, node46, node52, node66, 10, (int) (byte) -1);
        node22.putIntProp((int) (short) 0, (int) (byte) -1);
        boolean boolean73 = node22.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node22.children();
        boolean boolean75 = node22.isContinue();
        com.google.javascript.rhino.Node node76 = node3.useSourceInfoIfMissingFrom(node22);
        int int77 = node3.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        boolean boolean24 = serializableList17.isEmpty();
        boolean boolean25 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = serializableList17.reverse();
        java.util.stream.Stream<java.io.Serializable> serializableStream27 = serializableList17.parallelStream();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertNotNull(serializableStream27);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.isLocalResultCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node node7 = node2.cloneTree();
        boolean boolean8 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(0, node7, 1, (int) '#');
        int int12 = node11.getChildCount();
        com.google.javascript.rhino.Node node13 = node11.cloneTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100);
        node1.setSourceEncodedPosition(9);
        boolean boolean4 = node1.isLabelName();
        boolean boolean5 = node1.isCase();
        boolean boolean6 = node1.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-8));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isAssign();
        boolean boolean33 = node29.isIn();
        boolean boolean34 = node29.isThis();
        boolean boolean35 = node29.isOr();
        com.google.javascript.rhino.Node node36 = node3.useSourceInfoFrom(node29);
        boolean boolean37 = node36.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        int int54 = serializableList47.size();
        int int55 = serializableList47.size();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable57 = serializableList47.get(63);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (63) must be less than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 16 + "'", int55 == 16);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray9 = strSet8.toArray();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        boolean boolean55 = serializableList27.contains((java.lang.Object) node37);
        java.io.Serializable[] serializableArray72 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList73 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray72);
        boolean boolean74 = serializableList27.containsAll((java.util.Collection<java.io.Serializable>) serializableList73);
        java.util.Iterator<java.io.Serializable> serializableItor75 = serializableList27.iterator();
        boolean boolean76 = serializableList27.isEmpty();
        boolean boolean77 = strSet8.containsAll((java.util.Collection<java.io.Serializable>) serializableList27);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strSet8.spliterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableArray72);
        org.junit.Assert.assertNotNull(serializableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(serializableItor75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSpliterator78);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        boolean boolean47 = jSDocInfo0.hasFileOverview();
        java.lang.String str48 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        boolean boolean76 = node58.isParamList();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(38, node58, 51, 38);
        boolean boolean80 = node79.isStringKey();
        jSDocInfo0.setAssociatedNode(node79);
        com.google.javascript.rhino.Node node82 = node79.cloneNode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable77 = node44.getAncestors();
        com.google.javascript.rhino.jstype.JSType jSType78 = node44.getJSType();
        boolean boolean79 = node44.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable80 = node44.getAncestors();
        int int81 = node44.getSideEffectFlags();
        boolean boolean82 = node44.isParamList();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = node44.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(ancestorIterable77);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(ancestorIterable80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(staticSourceFile83);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isQualifiedName();
        java.lang.Object obj19 = node12.getProp(48);
        java.lang.Object obj21 = node12.getProp((int) (byte) 1);
        boolean boolean22 = node12.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        int int19 = jSDocInfo18.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = null;
        jSDocInfo18.setVisibility(visibility20);
        boolean boolean22 = jSDocInfo18.hasFileOverview();
        boolean boolean23 = jSDocInfo18.isJavaDispatch();
        boolean boolean24 = jSDocInfo18.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo18.getExtendedInterfaces();
        boolean boolean27 = jSDocInfo18.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo18.getMeaning();
        jSDocInfo18.addSuppression("hi!");
        node12.setJSDocInfo(jSDocInfo18);
        int int32 = node12.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        boolean boolean3 = node1.isTypeOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NAME 51", 4095, 27);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        node63.setOptionalArg(false);
        boolean boolean68 = node63.isSetterDef();
        com.google.javascript.rhino.Node node69 = node63.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder70 = node69.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder70);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isQualifiedName();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node66.copyInformationFromForTree(node71);
        boolean boolean89 = node13.hasChild(node88);
        node13.putBooleanProp(30, false);
        int int93 = node13.getSourceOffset();
        boolean boolean94 = node13.isVarArgs();
        boolean boolean95 = node13.isParamList();
        node13.setSourceEncodedPosition(49);
        boolean boolean98 = node13.isOr();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        java.io.Serializable serializable26 = serializableList17.get(13);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) -1 + "'", serializable26, (short) -1);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isIn();
        boolean boolean22 = node3.isEquivalentTo(node16);
        boolean boolean23 = node16.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = null;
        jSDocInfo24.setVisibility(visibility26);
        boolean boolean28 = jSDocInfo24.hasFileOverview();
        java.lang.String str29 = jSDocInfo24.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo24.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo24.getThisType();
        boolean boolean32 = jSDocInfo24.shouldPreserveTry();
        node16.setJSDocInfo(jSDocInfo24);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo24.getParameterType("java.io.IOException");
        java.lang.String str37 = jSDocInfo24.getDescriptionForParameter("STRING STRING Unknown class name 15");
        boolean boolean38 = jSDocInfo24.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(visibility30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNull();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        boolean boolean11 = node9.isString();
        node3.addChildrenToFront(node9);
        boolean boolean13 = node9.hasMoreThanOneChild();
        boolean boolean14 = node9.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.asList();
        java.util.LinkedHashSet[] linkedHashSetArray59 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray60 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray59;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList61 = com.google.common.collect.ImmutableList.copyOf(strSetArray60);
        boolean boolean62 = serializableList24.contains((java.lang.Object) strSetList61);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator63 = serializableList24.spliterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList64 = serializableList24.asList();
        int int65 = serializableList24.size();
        java.lang.Object obj66 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = serializableList24.remove(obj66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(linkedHashSetArray59);
        org.junit.Assert.assertNotNull(strSetArray60);
        org.junit.Assert.assertNotNull(strSetList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator63);
        org.junit.Assert.assertNotNull(serializableList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 16 + "'", int65 == 16);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        boolean boolean24 = serializableList17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        jSDocInfo0.addSuppression("false");
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.hasModifies();
        boolean boolean12 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        int int9 = jSDocInfo8.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = null;
        jSDocInfo8.setVisibility(visibility10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo8.getEnumParameterType();
        java.lang.String str13 = jSDocInfo8.getReturnDescription();
        boolean boolean14 = jSDocInfo8.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo8.getTemplateTypeNames();
        java.lang.String str16 = jSDocInfo8.getMeaning();
        java.lang.String str18 = jSDocInfo8.getDescriptionForParameter("");
        jSDocInfo8.addSuppression("InputId: true");
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isNoAlias();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo21.getModifies();
        boolean boolean24 = jSDocInfo21.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        int int26 = jSDocInfo25.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = null;
        jSDocInfo25.setVisibility(visibility27);
        java.lang.String str29 = jSDocInfo25.getMeaning();
        java.lang.String str30 = jSDocInfo25.getLicense();
        boolean boolean31 = jSDocInfo25.hasType();
        boolean boolean32 = jSDocInfo25.isConstructor();
        int int33 = jSDocInfo25.getExtendedInterfacesCount();
        boolean boolean34 = jSDocInfo25.shouldPreserveTry();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList35 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo21, jSDocInfo25);
        boolean boolean36 = jSDocInfo8.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo8.getTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        java.util.Iterator<java.io.Serializable> serializableItor65 = serializableList17.iterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator66 = serializableList17.spliterator();
        boolean boolean67 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        int int69 = jSDocInfo68.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection70 = jSDocInfo68.getTypeNodes();
        java.lang.String str71 = jSDocInfo68.getDescription();
        boolean boolean72 = jSDocInfo68.hasModifies();
        boolean boolean73 = jSDocInfo68.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = jSDocInfo68.getVisibility();
        java.lang.String str75 = jSDocInfo68.getReturnDescription();
        int int76 = serializableList17.lastIndexOf((java.lang.Object) jSDocInfo68);
        int int77 = serializableList17.size();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableItor65);
        org.junit.Assert.assertNotNull(serializableSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(nodeCollection70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(visibility74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16 + "'", int77 == 16);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        boolean boolean26 = node3.hasChildren();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags28.setMutatesGlobalState();
        sideEffectFlags28.setThrows();
        sideEffectFlags28.setAllFlags();
        sideEffectFlags28.setReturnsTainted();
        sideEffectFlags28.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags35 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags35.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags38 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean39 = sideEffectFlags38.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean42 = sideEffectFlags41.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags44 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags44.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags49 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags49.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags52 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList53 = com.google.common.collect.ImmutableList.of(sideEffectFlags35, sideEffectFlags38, sideEffectFlags41, sideEffectFlags44, sideEffectFlags47, sideEffectFlags49, sideEffectFlags52);
        sideEffectFlags35.setMutatesArguments();
        sideEffectFlags35.setThrows();
        sideEffectFlags35.setThrows();
        sideEffectFlags35.setThrows();
        sideEffectFlags35.setThrows();
        sideEffectFlags35.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags61 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int62 = sideEffectFlags61.valueOf();
        sideEffectFlags61.setMutatesArguments();
        sideEffectFlags61.clearAllFlags();
        int int65 = sideEffectFlags61.valueOf();
        boolean boolean66 = sideEffectFlags61.areAllFlagsSet();
        sideEffectFlags61.clearAllFlags();
        boolean boolean68 = sideEffectFlags61.areAllFlagsSet();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList69 = com.google.common.collect.ImmutableList.of(sideEffectFlags28, sideEffectFlags35, sideEffectFlags61);
        int int70 = sideEffectFlags28.valueOf();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList53);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 31 + "'", int70 == 31);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator54 = serializableList17.spliterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator55 = serializableList17.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        int int57 = jSDocInfo56.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = null;
        jSDocInfo56.setVisibility(visibility58);
        boolean boolean60 = jSDocInfo56.isJavaDispatch();
        java.lang.String str62 = jSDocInfo56.getDescriptionForParameter("hi!");
        boolean boolean64 = jSDocInfo56.hasParameterType("");
        java.lang.Class<?> wildcardClass65 = jSDocInfo56.getClass();
        int int66 = serializableList17.indexOf((java.lang.Object) wildcardClass65);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator54);
        org.junit.Assert.assertNotNull(serializableSpliterator55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30])");
        boolean boolean12 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.lang.Object[] objArray66 = serializableList36.toArray();
        boolean boolean67 = serializableList36.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList36.reverse();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator69 = serializableList36.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList36.subList(8240, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (8240) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertNotNull(serializableSpliterator69);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        boolean boolean5 = node3.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        boolean boolean8 = node3.isDec();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.new FileLevelJsDocBuilder();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        boolean boolean17 = node15.isDec();
        boolean boolean18 = node15.isNoSideEffectsCall();
        boolean boolean19 = node15.isIf();
        boolean boolean20 = node15.isFalse();
        boolean boolean21 = node15.isObjectLit();
        node11.addChildToFront(node15);
        node11.removeProp(0);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        int int45 = node28.getLength();
        boolean boolean46 = node28.isSwitch();
        node28.putBooleanProp(32, false);
        boolean boolean50 = node28.isNull();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        boolean boolean56 = node54.isDec();
        boolean boolean57 = node54.isAssign();
        boolean boolean58 = node54.isIn();
        boolean boolean59 = node54.isThis();
        boolean boolean60 = node54.isOr();
        com.google.javascript.rhino.Node node61 = node28.useSourceInfoFrom(node54);
        com.google.javascript.rhino.Node node62 = node54.getLastSibling();
        boolean boolean63 = node54.isWhile();
        com.google.javascript.rhino.Node node64 = node11.clonePropsFrom(node54);
        com.google.javascript.rhino.Node node65 = node3.useSourceInfoIfMissingFrom(node11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = node65.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        java.lang.String str11 = jSDocInfo0.getLicense();
        int int12 = jSDocInfo0.getParameterCount();
        java.lang.String str13 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
    }
}


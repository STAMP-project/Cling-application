import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        boolean boolean52 = node49.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = node49.cloneTree();
        boolean boolean54 = node49.isFromExterns();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node72.isTry();
        com.google.javascript.rhino.Node node74 = node72.getLastSibling();
        com.google.javascript.rhino.InputId inputId76 = new com.google.javascript.rhino.InputId("java.io.IOException: java.io.IOException");
        java.lang.String str77 = inputId76.toString();
        node72.setInputId(inputId76);
        java.lang.String str79 = inputId76.getIdName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "InputId: java.io.IOException: java.io.IOException" + "'", str77, "InputId: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str79, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setSourceEncodedPosition(52);
        boolean boolean30 = node19.isCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        int int39 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node40 = node34.srcrefTree(node37);
        boolean boolean41 = node34.isWhile();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isAnd();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node58 = node48.getNext();
        java.lang.String[] strArray62 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        java.lang.Object[] objArray65 = strSet63.toArray();
        boolean boolean67 = strSet63.equals((java.lang.Object) 12);
        java.lang.Object[] objArray68 = strSet63.toArray();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        boolean boolean74 = node72.isDec();
        boolean boolean75 = node72.isNoSideEffectsCall();
        boolean boolean76 = node72.isIf();
        com.google.javascript.rhino.Node node77 = node72.getLastSibling();
        node77.setLineno(45);
        boolean boolean80 = node77.isNoSideEffectsCall();
        int int82 = node77.getIntProp(42);
        boolean boolean83 = strSet63.equals((java.lang.Object) node77);
        // The following exception was thrown during execution in test generation
        try {
            node34.replaceChild(node58, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        int int3 = jSDocInfo2.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo2.getTypeNodes();
        java.lang.String str5 = jSDocInfo2.getDescription();
        boolean boolean6 = jSDocInfo2.isExterns();
        node1.setJSDocInfo(jSDocInfo2);
        boolean boolean9 = jSDocInfo2.hasDescriptionForParameter("(InputId: true)");
        boolean boolean10 = jSDocInfo2.hasBaseType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.javascript.rhino.Node node72 = node33.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList17.iterator();
        boolean boolean47 = serializableList17.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        node35.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        boolean boolean78 = node55.isLabelName();
        java.lang.Object obj80 = node55.getProp(10);
        com.google.javascript.rhino.Node node81 = node55.cloneNode();
        java.util.Set<java.lang.String> strSet82 = node81.getDirectives();
        boolean boolean83 = node81.isNull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        boolean boolean3 = node1.isRegExp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = new com.google.javascript.rhino.JSTypeExpression(node1, "InputId: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeExpression5.evaluate(jSTypeStaticScope6, jSTypeRegistry7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isTry();
        boolean boolean82 = node79.isSetterDef();
        boolean boolean83 = node79.isIn();
        com.google.javascript.rhino.Node node84 = node79.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = node84.isNull();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        node10.addChildrenToBack(node15);
        boolean boolean26 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node27 = node5.copyInformationFromForTree(node10);
        boolean boolean28 = node10.isParamList();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(38, node10, 51, 38);
        node10.putIntProp(12, 54);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isQualifiedName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        node48.addChildrenToBack(node53);
        boolean boolean64 = node48.isLocalResultCall();
        com.google.javascript.rhino.Node node65 = node43.copyInformationFromForTree(node48);
        node48.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node68 = node39.clonePropsFrom(node48);
        com.google.javascript.rhino.Node node69 = node68.getLastSibling();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node68, node71, (-1), 43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) ' ', node10, node75, 10, 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        boolean boolean26 = node3.hasChildren();
        boolean boolean27 = node3.isInc();
        com.google.javascript.rhino.Node node28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        boolean boolean32 = node30.isCase();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isComma();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = node7.isCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList71.asList();
        boolean boolean73 = serializableList71.isEmpty();
        com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray74 = new com.google.javascript.rhino.jstype.StaticSourceFile[] {};
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray75 = serializableList71.toArray(staticSourceFileArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(staticSourceFileArray74);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node15 = node12.getLastSibling();
        boolean boolean16 = node15.hasMoreThanOneChild();
        boolean boolean17 = node15.isOr();
        boolean boolean18 = node15.isAdd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        int int77 = node55.getChildCount();
        boolean boolean78 = node55.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        int int80 = jSDocInfo79.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = null;
        jSDocInfo79.setVisibility(visibility81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo79.getEnumParameterType();
        java.lang.String str85 = jSDocInfo79.getReturnDescription();
        node55.setJSDocInfo(jSDocInfo79);
        boolean boolean88 = node55.getBooleanProp(35);
        boolean boolean89 = node55.isTry();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        com.google.common.collect.ImmutableList.Builder<java.util.AbstractCollection[]> abstractCollectionArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(abstractCollectionArrayBuilder0);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList6 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.io.Serializable[] serializableArray30 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList31 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray30);
        boolean boolean32 = serializableList31.isEmpty();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isQualifiedName();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node55 = node46.clonePropsFrom(node53);
        node41.addChildrenToBack(node46);
        boolean boolean57 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = node36.copyInformationFromForTree(node41);
        boolean boolean59 = serializableList31.contains((java.lang.Object) node41);
        java.util.Iterator<java.io.Serializable> serializableItor60 = serializableList31.iterator();
        boolean boolean61 = strSet11.containsAll((java.util.Collection<java.io.Serializable>) serializableList31);
        java.lang.Object[] objArray62 = serializableList31.toArray();
        boolean boolean63 = serializableList31.isEmpty();
        java.lang.Object[] objArray64 = serializableList31.toArray();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList31.reverse();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = serializableList31.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = serializableList6.addAll((java.util.Collection<java.io.Serializable>) serializableList31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableList6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray30);
        org.junit.Assert.assertNotNull(serializableList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(serializableItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertNotNull(serializableList66);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        java.lang.String[] strArray5 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.Object[] objArray8 = strSet6.toArray();
        boolean boolean9 = inputId1.equals((java.lang.Object) strSet6);
        boolean boolean10 = strSet6.isEmpty();
        boolean boolean12 = strSet6.add("InputId: true");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int14 = stringPosition13.getStartLine();
        int int15 = stringPosition13.getPositionOnEndLine();
        int int16 = stringPosition13.getPositionOnEndLine();
        int int17 = stringPosition13.getPositionOnEndLine();
        int int18 = stringPosition13.getPositionOnStartLine();
        stringPosition13.setItem("Not declared as a type name");
        int int21 = stringPosition13.getPositionOnEndLine();
        java.lang.String str22 = stringPosition13.getItem();
        boolean boolean23 = strSet6.equals((java.lang.Object) stringPosition13);
        boolean boolean25 = strSet6.add("Not declared as a constructor");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Not declared as a type name" + "'", str22, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNull();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        boolean boolean33 = node15.isParamList();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(38, node15, 51, 38);
        int int37 = node36.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node42 = node36.copyInformationFrom(node41);
        boolean boolean43 = node36.isNoSideEffectsCall();
        node3.addChildToBack(node36);
        node36.setType((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        boolean boolean91 = node89.isString();
        boolean boolean92 = node89.isStringKey();
        com.google.javascript.rhino.Node node93 = node76.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node94 = node93.getNext();
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFrom(node93);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder97 = node3.getJsDocBuilderForNode();
        boolean boolean98 = node3.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isLabel();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        int int72 = node54.getSourcePosition();
        com.google.javascript.rhino.Node node73 = node31.srcref(node54);
        com.google.javascript.rhino.Node node74 = node25.clonePropsFrom(node73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean92 = node91.isContinue();
        boolean boolean93 = node91.isString();
        boolean boolean94 = node91.isStringKey();
        com.google.javascript.rhino.Node node95 = node78.copyInformationFrom(node91);
        boolean boolean96 = node78.isIn();
        int int97 = node25.getIndexOfChild(node78);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder98 = node25.getJsDocBuilderForNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable99 = node25.siblings();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder98);
        org.junit.Assert.assertNotNull(nodeIterable99);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        boolean boolean28 = serializableList26.equals((java.lang.Object) 10.0d);
        java.io.Serializable serializable30 = serializableList26.get(0);
        java.lang.Object[] objArray31 = serializableList26.toArray();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        boolean boolean52 = serializableList26.contains((java.lang.Object) node51);
        java.io.Serializable[] serializableArray69 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray69);
        boolean boolean71 = serializableList70.isEmpty();
        boolean boolean73 = serializableList70.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor74 = serializableList70.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator75 = serializableList70.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor77 = serializableList70.listIterator((int) (short) 10);
        com.google.javascript.rhino.InputId inputId79 = new com.google.javascript.rhino.InputId("JSDocInfo");
        int int80 = serializableList70.lastIndexOf((java.lang.Object) inputId79);
        boolean boolean81 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList70);
        java.util.ListIterator<java.io.Serializable> serializableItor82 = serializableList26.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 1.0d + "'", serializable30, 1.0d);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableArray69);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(serializableSpliterator75);
        org.junit.Assert.assertNotNull(serializableItor77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(serializableItor82);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean6 = sideEffectFlags4.areAllFlagsSet();
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean8 = strSet2.remove((java.lang.Object) sideEffectFlags4);
        int int9 = strSet2.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int11 = typePosition10.getStartLine();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        node26.addChildrenToBack(node31);
        boolean boolean42 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node43 = node21.copyInformationFromForTree(node26);
        node26.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node46 = node17.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isTrue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node26, node50, node56, node70, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, node73);
        typePosition10.setItem(node73);
        boolean boolean76 = typePosition10.hasBrackets();
        int int77 = typePosition10.getPositionOnEndLine();
        int int78 = typePosition10.getPositionOnEndLine();
        boolean boolean79 = strSet2.equals((java.lang.Object) typePosition10);
        int int80 = strSet2.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        boolean boolean8 = node3.isFunction();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList24.parallelStream();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableStream56);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        int int3 = node1.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CALL is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        int int9 = jSDocInfo8.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = null;
        jSDocInfo8.setVisibility(visibility10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo8.getEnumParameterType();
        java.lang.String str13 = jSDocInfo8.getReturnDescription();
        boolean boolean14 = jSDocInfo8.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo8.getTemplateTypeNames();
        java.lang.String str16 = jSDocInfo8.getMeaning();
        java.lang.String str18 = jSDocInfo8.getDescriptionForParameter("");
        jSDocInfo8.addSuppression("InputId: true");
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isNoAlias();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo21.getModifies();
        boolean boolean24 = jSDocInfo21.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        int int26 = jSDocInfo25.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = null;
        jSDocInfo25.setVisibility(visibility27);
        java.lang.String str29 = jSDocInfo25.getMeaning();
        java.lang.String str30 = jSDocInfo25.getLicense();
        boolean boolean31 = jSDocInfo25.hasType();
        boolean boolean32 = jSDocInfo25.isConstructor();
        int int33 = jSDocInfo25.getExtendedInterfacesCount();
        boolean boolean34 = jSDocInfo25.shouldPreserveTry();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList35 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo21, jSDocInfo25);
        boolean boolean36 = jSDocInfo25.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        boolean boolean14 = node12.isString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isAssign();
        boolean boolean22 = node12.isEquivalentTo(node18);
        boolean boolean23 = node18.isDelProp();
        jSDocInfo0.setAssociatedNode(node18);
        boolean boolean25 = node18.isNew();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isWith();
        boolean boolean27 = node3.isContinue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean4 = node3.isCase();
        boolean boolean5 = node3.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isTrue();
        boolean boolean12 = node9.isNoSideEffectsCall();
        boolean boolean13 = node9.isCase();
        boolean boolean14 = node9.isVar();
        int int15 = node9.getSourcePosition();
        boolean boolean16 = node9.isAnd();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        boolean boolean30 = node29.isQuotedString();
        boolean boolean31 = node29.isOptionalArg();
        boolean boolean32 = node29.isLabelName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(9, node3, node9, node29);
        boolean boolean34 = node9.isAssign();
        boolean boolean35 = node9.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node21.isTrue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        node21.setIsSyntheticBlock(true);
        boolean boolean75 = node21.isString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "()" + "'", str1, "()");
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node81 = node80.removeFirstChild();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, node37, node80, 53, 50);
        boolean boolean85 = node37.isVoid();
        boolean boolean86 = node37.isThis();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNull();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        boolean boolean33 = node15.isParamList();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(38, node15, 51, 38);
        int int37 = node36.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node42 = node36.copyInformationFrom(node41);
        boolean boolean43 = node36.isNoSideEffectsCall();
        node3.addChildToBack(node36);
        node36.setSourceFileForTesting("TYPEOF 97\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator26 = serializableList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator26);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node38.isEmpty();
        com.google.javascript.rhino.Node node40 = node38.cloneNode();
        boolean boolean41 = node38.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = node38.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node15 = node12.getLastSibling();
        int int16 = node12.getLength();
        boolean boolean17 = node12.isArrayLit();
        boolean boolean18 = node12.isNumber();
        node12.setLength(1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(30);
        java.lang.String str2 = node1.toString();
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        boolean boolean39 = node37.isSetterDef();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "JSDocInfo");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("CALL hi!", 41, 43);
        node46.setQuotedString();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 100, node37, node42, node46);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node3, node42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NEW" + "'", str2, "NEW");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isNumber();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        boolean boolean9 = node7.isDec();
        boolean boolean10 = node7.isNoSideEffectsCall();
        boolean boolean11 = node7.isIf();
        boolean boolean12 = node7.isFalse();
        boolean boolean13 = node7.isObjectLit();
        node3.addChildToFront(node7);
        node3.setLineno((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING [0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(java.io.IOException: java.io.IOException)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        int int7 = node3.getSourceOffset();
        boolean boolean8 = node3.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = node3.getExistingIntProp(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 35");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        // The following exception was thrown during execution in test generation
        try {
            node3.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isLabel();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        int int72 = node54.getSourcePosition();
        com.google.javascript.rhino.Node node73 = node31.srcref(node54);
        com.google.javascript.rhino.Node node74 = node25.clonePropsFrom(node73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean92 = node91.isContinue();
        boolean boolean93 = node91.isString();
        boolean boolean94 = node91.isStringKey();
        com.google.javascript.rhino.Node node95 = node78.copyInformationFrom(node91);
        boolean boolean96 = node78.isIn();
        int int97 = node25.getIndexOfChild(node78);
        boolean boolean98 = node25.isGetProp();
        boolean boolean99 = node25.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node13.isArrayLit();
        node13.setIsSyntheticBlock(true);
        java.lang.Object obj33 = node13.getProp(41);
        boolean boolean34 = node13.isExprResult();
        boolean boolean35 = node13.isNoSideEffectsCall();
        boolean boolean36 = node13.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        boolean boolean67 = node57.isEquivalentTo(node64);
        node57.putIntProp(12, 53);
        boolean boolean71 = node57.hasChildren();
        com.google.javascript.rhino.Node node72 = node57.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = node72.isScript();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags13.setAllFlags();
        sideEffectFlags13.setMutatesArguments();
        sideEffectFlags13.setMutatesThis();
        sideEffectFlags13.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        boolean boolean55 = serializableList24.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable57 = serializableList24.remove(43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor22 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int25 = stringPosition24.getPositionOnStartLine();
        int int26 = stringPosition24.getPositionOnEndLine();
        int int27 = stringPosition24.getPositionOnStartLine();
        boolean boolean28 = serializableList17.equals((java.lang.Object) stringPosition24);
        java.util.LinkedHashSet[] linkedHashSetArray30 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray31 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray30;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList32 = com.google.common.collect.ImmutableList.copyOf(strSetArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.String>[] strSetArray33 = serializableList17.toArray((java.util.Set<java.lang.String>[]) strSetArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(linkedHashSetArray30);
        org.junit.Assert.assertNotNull(strSetArray31);
        org.junit.Assert.assertNotNull(strSetList32);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<java.io.Serializable>> serializableListBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<java.io.Serializable>>();
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        boolean boolean67 = node57.isEquivalentTo(node64);
        node57.setVarArgs(false);
        java.lang.Object obj71 = null;
        node57.putProp(37, obj71);
        boolean boolean73 = node57.isAdd();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        int int19 = serializableList17.size();
        java.util.Iterator<java.io.Serializable> serializableItor20 = serializableList17.iterator();
        boolean boolean21 = serializableList17.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(serializableItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        int int2 = typePosition0.getPositionOnEndLine();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        boolean boolean20 = node17.isStringKey();
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node17);
        boolean boolean22 = node4.isIn();
        node4.setType(42);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        boolean boolean45 = node41.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node41.siblings();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, node4, node41);
        node4.setVarArgs(true);
        boolean boolean50 = node4.isGetProp();
        int int51 = node4.getSourcePosition();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        boolean boolean17 = booleanLiteralSet15.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet13.intersection(booleanLiteralSet15);
        boolean boolean20 = booleanLiteralSet13.contains(false);
        boolean boolean22 = booleanLiteralSet13.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean2 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean7 = node6.isCase();
        boolean boolean8 = node6.isBlock();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        boolean boolean14 = node12.isTrue();
        boolean boolean15 = node12.isNoSideEffectsCall();
        boolean boolean16 = node12.isCase();
        boolean boolean17 = node12.isVar();
        int int18 = node12.getSourcePosition();
        boolean boolean19 = node12.isAnd();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node32 = node23.clonePropsFrom(node30);
        boolean boolean33 = node32.isQuotedString();
        boolean boolean34 = node32.isOptionalArg();
        boolean boolean35 = node32.isLabelName();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(9, node6, node12, node32);
        boolean boolean37 = node12.isAssign();
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoIfMissingFromForTree(node12);
        boolean boolean39 = node38.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node3.isOnlyModifiesThisCall();
        boolean boolean40 = node3.isScript();
        boolean boolean41 = node3.hasChildren();
        java.lang.Appendable appendable42 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        int int8 = jSDocInfo7.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo7.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo7.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo7.getBaseType();
        boolean boolean12 = jSTypeExpression6.equals((java.lang.Object) jSDocInfo7);
        boolean boolean13 = jSTypeExpression6.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Marker marker14 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker15.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker17 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker17.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker21 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker24 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker26 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList27 = com.google.common.collect.ImmutableList.of(marker14, marker15, marker17, marker19, marker21, marker22, marker23, marker24, marker25, marker26);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker23.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker23.getNameNode();
        boolean boolean30 = jSTypeExpression6.equals((java.lang.Object) nodeSourcePosition29);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression6);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeExpression31.evaluate(jSTypeStaticScope32, jSTypeRegistry33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNotNull(markerList27);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression31);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int4 = node3.getCharno();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId33 = node13.getInputId();
        node13.setOptionalArg(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean40 = node13.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node41 = node3.srcref(node39);
        boolean boolean42 = node39.isOr();
        boolean boolean43 = node39.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        node3.detachChildren();
        boolean boolean7 = node3.isContinue();
        com.google.javascript.rhino.Node node9 = node3.getChildAtIndex(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(java.io.IOException: Unknown class name)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.removeFirstChild();
        boolean boolean80 = node55.isFalse();
        boolean boolean81 = node55.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        boolean boolean62 = node13.isDec();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node13.children();
        int int64 = node13.getCharno();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        boolean boolean6 = node3.isStringKey();
        int int7 = node3.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        boolean boolean29 = node27.isDec();
        boolean boolean30 = node27.isScript();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node22, node27, node34, 0, (int) (short) 0);
        boolean boolean38 = node34.isLabel();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean41 = node40.isBreak();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        int int81 = node63.getSourcePosition();
        com.google.javascript.rhino.Node node82 = node40.srcref(node63);
        com.google.javascript.rhino.Node node83 = node34.clonePropsFrom(node82);
        int int84 = node3.getIndexOfChild(node83);
        boolean boolean85 = node3.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSDocInfo8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        boolean boolean8 = node3.isFunction();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isInc();
        int int11 = node3.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("JSDocInfo");
        int int6 = stringPosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(100, 38, 40, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 40");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("(java.io.IOException: NUMBER -1.0 12)");
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = node13.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(typePosition16);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        boolean boolean60 = node57.isFunction();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags62 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags62.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags65 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean66 = sideEffectFlags65.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean69 = sideEffectFlags68.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags71 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags71.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags74 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags76 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags76.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags79 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList80 = com.google.common.collect.ImmutableList.of(sideEffectFlags62, sideEffectFlags65, sideEffectFlags68, sideEffectFlags71, sideEffectFlags74, sideEffectFlags76, sideEffectFlags79);
        sideEffectFlags74.setAllFlags();
        sideEffectFlags74.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node57.setSideEffectFlags(sideEffectFlags74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got GT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList80);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        com.google.common.collect.ImmutableList.Builder<java.util.Iterator<java.io.Serializable>[]> serializableItorArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.Iterator<java.io.Serializable>[]>();
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        boolean boolean48 = node46.isString();
        com.google.javascript.rhino.Node node49 = node33.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.InputId inputId50 = null;
        node49.setInputId(inputId50);
        java.lang.Object obj53 = node49.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node49.getJSDocInfo();
        node49.setVarArgs(true);
        boolean boolean57 = node49.isFor();
        node49.setWasEmptyNode(false);
        com.google.javascript.rhino.InputId inputId60 = node49.getInputId();
        boolean boolean61 = node49.isCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node49.siblings();
        node19.addChildrenToFront(node49);
        int int64 = node49.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(inputId60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        int int65 = node46.getSourcePosition();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isLabelName();
        boolean boolean71 = node69.isDec();
        boolean boolean72 = node69.isNoSideEffectsCall();
        node46.addChildToBack(node69);
        boolean boolean74 = serializableList17.equals((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList75 = serializableList17.asList();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean80 = node79.isCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node79.siblings();
        boolean boolean82 = node79.isAssignAdd();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean87 = node86.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType88 = null;
        node86.setJSType(jSType88);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean94 = node93.isContinue();
        com.google.javascript.rhino.Node node95 = node86.clonePropsFrom(node93);
        int int96 = node95.getLineno();
        boolean boolean97 = node79.isEquivalentTo(node95);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable98 = serializableList75.set((int) (short) 10, (java.io.Serializable) boolean97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(serializableList75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean22 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId49 = node29.getInputId();
        com.google.javascript.rhino.Node node50 = node12.srcref(node29);
        boolean boolean51 = node12.isWith();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean12 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isComma();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        node3.setOptionalArg(false);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isQualifiedName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        node22.addChildrenToBack(node27);
        boolean boolean38 = node22.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = node17.copyInformationFromForTree(node22);
        node22.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node42 = node13.clonePropsFrom(node22);
        boolean boolean43 = node13.isReturn();
        com.google.javascript.rhino.Node node44 = node13.cloneTree();
        node3.addChildToBack(node44);
        boolean boolean46 = node44.isCase();
        int int47 = node44.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        boolean boolean4 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        boolean boolean31 = node13.isString();
        int int32 = node13.getChildCount();
        boolean boolean33 = node13.isObjectLit();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isQualifiedName();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node52.setJSType(jSType54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node61 = node52.clonePropsFrom(node59);
        node47.addChildrenToBack(node52);
        boolean boolean63 = node47.isLocalResultCall();
        com.google.javascript.rhino.Node node64 = node42.copyInformationFromForTree(node47);
        node47.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node67 = node38.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        boolean boolean73 = node71.isTrue();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isContinue();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        node82.setJSType(jSType84);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        com.google.javascript.rhino.Node node91 = node82.clonePropsFrom(node89);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (byte) 0, node47, node71, node77, node91, 10, (int) (byte) -1);
        boolean boolean95 = node94.isNull();
        com.google.javascript.rhino.Node node96 = node13.clonePropsFrom(node94);
        boolean boolean97 = node13.isNumber();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor5 = strSet4.iterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean4 = booleanLiteralSet2.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet2.intersection(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet9.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList32 = com.google.common.collect.ImmutableList.of(booleanLiteralSet7, booleanLiteralSet14, booleanLiteralSet29, booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet0.union(booleanLiteralSet29);
        boolean boolean35 = booleanLiteralSet0.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean39 = booleanLiteralSet37.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean43 = booleanLiteralSet41.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet41.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet37.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean52 = booleanLiteralSet50.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet50.intersection(booleanLiteralSet54);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean59 = booleanLiteralSet57.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet57.intersection(booleanLiteralSet61);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean66 = booleanLiteralSet64.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean70 = booleanLiteralSet68.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet68.intersection(booleanLiteralSet72);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = booleanLiteralSet64.intersection(booleanLiteralSet72);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet74.union(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList80 = com.google.common.collect.ImmutableList.of(booleanLiteralSet55, booleanLiteralSet62, booleanLiteralSet77, booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = booleanLiteralSet48.union(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = booleanLiteralSet37.intersection(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet0.intersection(booleanLiteralSet77);
        boolean boolean85 = booleanLiteralSet83.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList32);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList80);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = node79.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(4095);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        boolean boolean32 = node9.isStringKey();
        java.lang.String str33 = node3.checkTreeEquals(node9);
        boolean boolean34 = node9.isNull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId3 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList8 = com.google.common.collect.ImmutableList.of(inputId1, inputId3, inputId5, inputId7);
        java.lang.String str9 = inputId5.getIdName();
        java.lang.String str10 = inputId5.getIdName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node23.setSourceFileForTesting("hi!");
        boolean boolean26 = node23.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node23.getStaticSourceFile();
        java.lang.String str28 = staticSourceFile27.getName();
        boolean boolean29 = inputId5.equals((java.lang.Object) staticSourceFile27);
        int int31 = staticSourceFile27.getLineOfOffset(0);
        int int33 = staticSourceFile27.getColumnOfOffset(47);
        int int35 = staticSourceFile27.getColumnOfOffset(39);
        boolean boolean36 = staticSourceFile27.isExtern();
        org.junit.Assert.assertNotNull(inputIdList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(staticSourceFile27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node38 = node29.clonePropsFrom(node36);
        node24.addChildrenToBack(node29);
        boolean boolean40 = node24.isLocalResultCall();
        com.google.javascript.rhino.Node node41 = node19.copyInformationFromForTree(node24);
        node24.setSourceEncodedPosition((int) (short) -1);
        boolean boolean44 = node24.isName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        boolean boolean50 = node48.isDec();
        boolean boolean51 = node48.isNoSideEffectsCall();
        boolean boolean52 = node48.isIf();
        com.google.javascript.rhino.Node node53 = node48.getLastSibling();
        com.google.javascript.rhino.Node node54 = node24.srcref(node48);
        com.google.javascript.rhino.Node node55 = node3.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean56 = node48.isLabel();
        int int57 = node48.getType();
        // The following exception was thrown during execution in test generation
        try {
            node48.setString("InputId: Unknown class name");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        boolean boolean16 = booleanLiteralSet14.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean20 = booleanLiteralSet18.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean24 = booleanLiteralSet22.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet22.intersection(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet18.intersection(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet28.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean35 = booleanLiteralSet33.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean39 = booleanLiteralSet37.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet37.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet33.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet43.union(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet28.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean50 = booleanLiteralSet48.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet46.union(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean55 = booleanLiteralSet53.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet53.intersection(booleanLiteralSet57);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList59 = com.google.common.collect.ImmutableList.of(booleanLiteralSet14, booleanLiteralSet51, booleanLiteralSet57);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean62 = booleanLiteralSet60.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean66 = booleanLiteralSet64.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean70 = booleanLiteralSet68.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet68.intersection(booleanLiteralSet72);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = booleanLiteralSet64.intersection(booleanLiteralSet72);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet74.union(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet60.intersection(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = booleanLiteralSet14.intersection(booleanLiteralSet60);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList59);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.isParamList();
        boolean boolean7 = node3.isTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isIn();
        boolean boolean22 = node3.isEquivalentTo(node16);
        boolean boolean23 = node3.isObjectLit();
        boolean boolean24 = node3.isName();
        boolean boolean25 = node3.isOr();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "InputId: true", 45, 39);
        com.google.javascript.rhino.Node node31 = node3.useSourceInfoFromForTree(node30);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor22 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int25 = stringPosition24.getPositionOnStartLine();
        int int26 = stringPosition24.getPositionOnEndLine();
        int int27 = stringPosition24.getPositionOnStartLine();
        boolean boolean28 = serializableList17.equals((java.lang.Object) stringPosition24);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition24.setPositionInformation(100, 52, 53, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 53");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isQualifiedName();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node25 = node16.clonePropsFrom(node23);
        node11.addChildrenToBack(node16);
        boolean boolean27 = node11.isLocalResultCall();
        com.google.javascript.rhino.Node node28 = node6.copyInformationFromForTree(node11);
        node11.setSourceEncodedPosition((int) (short) -1);
        boolean boolean31 = node11.isName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        boolean boolean37 = node11.hasChild(node35);
        node35.setLength(36);
        boolean boolean41 = node35.getBooleanProp(4);
        java.lang.String str42 = node35.getSourceFileName();
        typePosition0.setItem(node35);
        int int44 = node35.getCharno();
        boolean boolean45 = node35.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        java.lang.String str81 = node80.getQualifiedName();
        boolean boolean82 = node80.isSyntheticBlock();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        node31.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isComma();
        boolean boolean58 = node22.isEquivalentTo(node55);
        boolean boolean59 = node55.isComma();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) '#', node18, node55, 42, (int) ' ');
        boolean boolean63 = node62.isComma();
        com.google.javascript.rhino.Node node64 = node62.cloneTree();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(16, node12, node62);
        boolean boolean66 = node65.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node67 = node65.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        int int88 = node71.getLength();
        com.google.javascript.rhino.Node node89 = node71.getFirstChild();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node4, node67, node71, 4, 31);
        boolean boolean93 = node4.isBlock();
        boolean boolean94 = node4.isInc();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("true");
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation((int) (byte) 100, 48, 0, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        node8.setLineno(45);
        boolean boolean11 = node8.isParamList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        boolean boolean8 = strSet4.equals((java.lang.Object) 12);
        java.util.Iterator<java.lang.String> strItor9 = strSet4.iterator();
        int int10 = strSet4.size();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        boolean boolean16 = node14.isFromExterns();
        boolean boolean17 = strSet4.equals((java.lang.Object) node14);
        int int18 = node14.getLineno();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList9 = com.google.common.collect.ImmutableList.of(ternaryValue5, ternaryValue6, ternaryValue7, ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue1.xor(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList15 = com.google.common.collect.ImmutableList.of(ternaryValue11, ternaryValue12, ternaryValue13, ternaryValue14);
        java.lang.String str16 = ternaryValue13.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue13.or(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue22.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue1.and(ternaryValue23);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder25 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList26 = ternaryValueEnumBuilder25.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray27 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder28 = ternaryValueEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        java.lang.String str34 = ternaryValue31.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue31.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue40.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder42 = ternaryValueEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder44 = ternaryValueEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue23.xor(ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue23.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue23.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue23.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValueList9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValueList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "true" + "'", str16, "true");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueEnumList26);
        org.junit.Assert.assertNotNull(ternaryValueArray27);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 45, 30);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.asList();
        java.util.LinkedHashSet[] linkedHashSetArray59 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray60 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray59;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList61 = com.google.common.collect.ImmutableList.copyOf(strSetArray60);
        boolean boolean62 = serializableList24.contains((java.lang.Object) strSetList61);
        boolean boolean63 = serializableList24.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(linkedHashSetArray59);
        org.junit.Assert.assertNotNull(strSetArray60);
        org.junit.Assert.assertNotNull(strSetList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId52 = node32.getInputId();
        node32.setLineno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node32.getAncestors();
        int int56 = serializableList17.indexOf((java.lang.Object) node32);
        boolean boolean57 = node32.isSyntheticBlock();
        java.lang.Class<?> wildcardClass58 = node32.getClass();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.lang.Throwable[] throwableArray32 = iOException25.getSuppressed();
        java.lang.String str33 = iOException25.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.io.IOException: Unknown class name" + "'", str33, "java.io.IOException: Unknown class name");
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node52 = node23.clonePropsFrom(node32);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isInstanceOf();
        boolean boolean58 = node56.isComma();
        boolean boolean59 = node23.isEquivalentTo(node56);
        boolean boolean60 = node56.isComma();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) '#', node19, node56, 42, (int) ' ');
        boolean boolean64 = node63.isComma();
        com.google.javascript.rhino.Node node65 = node63.cloneTree();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(16, node13, node63);
        node66.detachChildren();
        boolean boolean68 = node66.isQuotedString();
        boolean boolean69 = node66.isScript();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node70 = node3.getChildBefore(node66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        boolean boolean19 = node16.isStringKey();
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node16);
        boolean boolean21 = node3.isIn();
        boolean boolean22 = node3.isEmpty();
        boolean boolean23 = node3.isGetElem();
        boolean boolean24 = node3.isNew();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        com.google.common.collect.ImmutableList<java.util.Iterator<java.io.Serializable>> serializableItorList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(serializableItorList0);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.isExterns();
        jSDocInfo0.setLicense("");
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        node3.setWasEmptyNode(true);
        boolean boolean8 = node3.isAdd();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        int int23 = node21.getCharno();
        com.google.javascript.rhino.Node node24 = node3.useSourceInfoFrom(node21);
        boolean boolean25 = node21.isFunction();
        boolean boolean26 = node21.isGetProp();
        node21.setCharno((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isWhile();
        java.lang.Object obj83 = node79.getProp(53);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = node79.getExistingIntProp(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 30");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node14 = node5.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        boolean boolean20 = node18.isString();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.InputId inputId22 = null;
        node21.setInputId(inputId22);
        java.lang.Object obj25 = node21.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node38 = node29.clonePropsFrom(node36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        boolean boolean44 = node42.isString();
        com.google.javascript.rhino.Node node45 = node29.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.InputId inputId46 = null;
        node45.setInputId(inputId46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isQualifiedName();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node56.addChildrenToBack(node61);
        boolean boolean72 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node73 = node51.copyInformationFromForTree(node56);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(0, node21, node45, node56, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId77 = node56.getInputId();
        boolean boolean78 = node56.isReturn();
        com.google.javascript.rhino.Node node79 = node56.getFirstChild();
        com.google.javascript.rhino.Node node80 = node56.cloneNode();
        java.lang.Object obj82 = node56.getProp((-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(9, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor56 = serializableList24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor56);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet14.intersection(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean34 = booleanLiteralSet32.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean38 = booleanLiteralSet36.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet36.intersection(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet32.intersection(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet42.union(booleanLiteralSet44);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        boolean boolean48 = booleanLiteralSet46.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet44.intersection(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean53 = booleanLiteralSet51.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet51.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet46.union(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean61 = booleanLiteralSet59.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean65 = booleanLiteralSet63.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet63.intersection(booleanLiteralSet67);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = booleanLiteralSet59.intersection(booleanLiteralSet67);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet69.union(booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean76 = booleanLiteralSet74.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean80 = booleanLiteralSet78.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet78.intersection(booleanLiteralSet82);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = booleanLiteralSet74.intersection(booleanLiteralSet82);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = booleanLiteralSet84.union(booleanLiteralSet86);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet69.union(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean91 = booleanLiteralSet89.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = booleanLiteralSet87.union(booleanLiteralSet89);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = booleanLiteralSet57.intersection(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = booleanLiteralSet30.intersection(booleanLiteralSet57);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node25 = node16.clonePropsFrom(node23);
        node11.addChildrenToBack(node16);
        boolean boolean27 = node11.isLocalResultCall();
        int int28 = node11.getLength();
        boolean boolean29 = node11.isSwitch();
        node11.putBooleanProp(32, false);
        boolean boolean33 = node11.isNull();
        boolean boolean34 = node11.hasChildren();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        boolean boolean61 = node60.isArrayLit();
        node60.putBooleanProp(44, false);
        boolean boolean65 = node60.isIf();
        com.google.javascript.rhino.Node node66 = node11.useSourceInfoFromForTree(node60);
        com.google.javascript.rhino.Node node67 = node60.cloneNode();
        jSDocInfo0.setAssociatedNode(node67);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(visibility69);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        boolean boolean66 = serializableList65.isEmpty();
        java.lang.String str67 = serializableList65.toString();
        java.util.Iterator<java.io.Serializable> serializableItor68 = serializableList65.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor69 = serializableList65.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]" + "'", str67, "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(serializableItor68);
        org.junit.Assert.assertNotNull(serializableItor69);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean4 = node3.isCase();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        node18.setSourceFileForTesting("hi!");
        boolean boolean21 = node18.isIf();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(39, node18);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(54, node3, node22, 48, (int) (byte) 0);
        com.google.javascript.rhino.InputId inputId26 = node25.getInputId();
        boolean boolean27 = node25.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(51, nodeArray1, 48, 32);
        boolean boolean5 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        node46.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node66 = node37.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isInstanceOf();
        boolean boolean72 = node70.isComma();
        boolean boolean73 = node37.isEquivalentTo(node70);
        com.google.javascript.rhino.Node node74 = node13.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        boolean boolean80 = node78.isDec();
        boolean boolean81 = node78.isAssign();
        boolean boolean82 = node78.isIn();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(4095, node13, node78, 29, (int) '4');
        com.google.javascript.rhino.Node node86 = node85.getLastSibling();
        boolean boolean87 = node85.isAdd();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean9 = node8.isBreak();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        boolean boolean15 = node13.isBlock();
        node13.removeProp(12);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        boolean boolean32 = node31.isQuotedString();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        boolean boolean38 = node36.isDec();
        boolean boolean39 = node36.isScript();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(0, node31, node36, node43, 0, (int) (short) 0);
        boolean boolean47 = node31.isTrue();
        com.google.javascript.rhino.Node node48 = node13.useSourceInfoIfMissingFromForTree(node31);
        int int49 = node31.getSourcePosition();
        com.google.javascript.rhino.Node node50 = node8.srcref(node31);
        com.google.javascript.rhino.Node node51 = node3.copyInformationFrom(node50);
        boolean boolean52 = node50.isVarArgs();
        node50.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor27 = serializableList17.iterator();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node36.isParamList();
        boolean boolean48 = node36.isGetProp();
        boolean boolean49 = node36.isNumber();
        boolean boolean50 = serializableList17.contains((java.lang.Object) boolean49);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList51 = serializableList17.asList();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        boolean boolean66 = node65.isQuotedString();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isLabelName();
        boolean boolean72 = node70.isDec();
        boolean boolean73 = node70.isScript();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, node65, node70, node77, 0, (int) (short) 0);
        node65.setType(46);
        boolean boolean83 = node65.isOr();
        int int84 = serializableList51.lastIndexOf((java.lang.Object) node65);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable86 = serializableList51.remove(43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertNotNull(serializableItor27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(serializableList51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "JSDocInfo", (int) (short) 1, (-2147483648));
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.isNoAlias();
        boolean boolean5 = strSet2.equals((java.lang.Object) jSDocInfo3);
        strSet2.clear();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int8 = stringPosition7.getStartLine();
        int int9 = stringPosition7.getPositionOnEndLine();
        stringPosition7.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int15 = stringPosition7.getEndLine();
        int int16 = stringPosition7.getPositionOnStartLine();
        boolean boolean17 = strSet2.remove((java.lang.Object) stringPosition7);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition7.setPositionInformation((int) (short) 100, (-2147483648), 29, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 29");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        node14.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node34 = node5.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isInstanceOf();
        boolean boolean40 = node38.isComma();
        boolean boolean41 = node5.isEquivalentTo(node38);
        boolean boolean42 = node38.isComma();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51, node38, node46, (int) (short) 10, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(48, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException("([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30])", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("GT", (java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        iOException10.addSuppressed((java.lang.Throwable) iOException13);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        java.lang.String str17 = staticSourceFile16.getName();
        java.lang.String str18 = staticSourceFile16.getName();
        int int20 = staticSourceFile16.getLineOfOffset(29);
        int int22 = staticSourceFile16.getColumnOfOffset(37);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node67.setCharno((int) (byte) 1);
        boolean boolean70 = node67.isGetterDef();
        com.google.javascript.rhino.Node node71 = node61.copyInformationFrom(node67);
        boolean boolean72 = node61.isDelProp();
        boolean boolean73 = node61.isQuotedString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node61.new FileLevelJsDocBuilder();
        boolean boolean75 = node61.isWhile();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 39, 4);
        boolean boolean4 = node3.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        boolean boolean20 = node16.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node16.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator22 = nodeIterable21.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor68 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = serializableList17.subList(51, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (51) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor68);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node2.setJSType(jSType3);
        boolean boolean5 = node2.isCall();
        boolean boolean6 = node2.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        node58.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isQualifiedName();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isContinue();
        com.google.javascript.rhino.Node node84 = node75.clonePropsFrom(node82);
        node70.addChildrenToBack(node75);
        boolean boolean86 = node70.isLocalResultCall();
        com.google.javascript.rhino.Node node87 = node65.copyInformationFromForTree(node70);
        boolean boolean88 = node70.isParamList();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(38, node70, 51, 38);
        boolean boolean92 = node91.isStringKey();
        com.google.javascript.rhino.Node node93 = node58.srcrefTree(node91);
        int int94 = node91.getSourceOffset();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = staticSourceFile63.getName();
        boolean boolean65 = staticSourceFile63.isExtern();
        node45.setStaticSourceFile(staticSourceFile63);
        boolean boolean67 = node45.isWith();
        boolean boolean68 = node45.isIn();
        boolean boolean69 = node45.isAdd();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(staticSourceFile63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        boolean boolean21 = node18.isRegExp();
        node18.setSourceFileForTesting("java.io.IOException: java.io.IOException: Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node69.setCharno((int) (byte) 1);
        boolean boolean72 = node69.isGetterDef();
        int int73 = serializableList17.lastIndexOf((java.lang.Object) boolean72);
        java.lang.Object[] objArray74 = serializableList17.toArray();
        boolean boolean75 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList76 = serializableList17.reverse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList79 = serializableList76.subList(15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (0) must not be less than start index (15)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serializableList76);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        java.io.IOException iOException88 = new java.io.IOException("hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = serializableList86.remove((java.lang.Object) iOException88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.hasEnumParameterType();
        boolean boolean27 = jSDocInfo25.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getThrownTypes();
        boolean boolean29 = serializableList17.equals((java.lang.Object) jSTypeExpressionList28);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList30 = serializableList17.reverse();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node44.setSourceFileForTesting("hi!");
        boolean boolean47 = node44.isIf();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(39, node44);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = serializableList30.remove((java.lang.Object) node48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableList30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node18.isDec();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        boolean boolean58 = node38.isName();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node38.hasChild(node62);
        com.google.javascript.rhino.Node node65 = node18.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        boolean boolean67 = node65.isWith();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.lang.String str28 = serializableList17.toString();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = null;
        jSDocInfo30.setVisibility(visibility32);
        boolean boolean34 = jSDocInfo30.hasFileOverview();
        boolean boolean35 = jSDocInfo30.isJavaDispatch();
        boolean boolean36 = jSDocInfo30.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo30.getExtendedInterfaces();
        java.lang.String str38 = jSDocInfo30.getLicense();
        java.lang.String str40 = jSDocInfo30.getDescriptionForParameter("Not declared as a type name");
        java.lang.String str41 = jSDocInfo30.getLicense();
        int int42 = serializableList17.lastIndexOf((java.lang.Object) jSDocInfo30);
        java.lang.String str43 = jSDocInfo30.getSourceName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str28, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo24.getTypeNodes();
        boolean boolean27 = jSDocInfo24.isExpose();
        boolean boolean28 = jSDocInfo24.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo24.getExtendedInterfaces();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.common.collect.ImmutableList<java.lang.Object> objList35 = com.google.common.collect.ImmutableList.of((java.lang.Object) serializableList17, (java.lang.Object) jSDocInfo24, (java.lang.Object) boolean34);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo24.getVisibility();
        boolean boolean37 = jSDocInfo24.isConstructor();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        boolean boolean28 = serializableList26.equals((java.lang.Object) 10.0d);
        java.io.Serializable serializable30 = serializableList26.get(0);
        java.lang.Object[] objArray31 = serializableList26.toArray();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        boolean boolean52 = serializableList26.contains((java.lang.Object) node51);
        java.io.Serializable[] serializableArray69 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray69);
        boolean boolean71 = serializableList70.isEmpty();
        boolean boolean73 = serializableList70.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor74 = serializableList70.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator75 = serializableList70.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor77 = serializableList70.listIterator((int) (short) 10);
        com.google.javascript.rhino.InputId inputId79 = new com.google.javascript.rhino.InputId("JSDocInfo");
        int int80 = serializableList70.lastIndexOf((java.lang.Object) inputId79);
        boolean boolean81 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        int int83 = jSDocInfo82.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = null;
        jSDocInfo82.setVisibility(visibility84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo82.getParameterType("true");
        boolean boolean88 = jSDocInfo82.isHidden();
        boolean boolean89 = jSDocInfo82.hasBaseType();
        boolean boolean90 = jSDocInfo82.isNoSideEffects();
        jSDocInfo82.setDeprecated(true);
        boolean boolean93 = jSDocInfo82.hasBaseType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = serializableList70.add((java.io.Serializable) jSDocInfo82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 1.0d + "'", serializable30, 1.0d);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableArray69);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(serializableSpliterator75);
        org.junit.Assert.assertNotNull(serializableItor77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node3.getAncestors();
        boolean boolean22 = node3.isNoSideEffectsCall();
        node3.setSourceEncodedPositionForTree(36);
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        int int68 = typePosition0.getEndLine();
        boolean boolean69 = typePosition0.hasBrackets();
        int int70 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        int int10 = jSDocInfo9.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = null;
        jSDocInfo9.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo9.hasFileOverview();
        boolean boolean14 = jSDocInfo9.isJavaDispatch();
        boolean boolean15 = jSDocInfo9.hasType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo9.setVisibility(visibility16);
        jSDocInfo0.setVisibility(visibility16);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        int int60 = node57.getCharno();
        boolean boolean61 = node57.isWhile();
        java.util.Set<java.lang.String> strSet62 = node57.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor27 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertNotNull(serializableItor27);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        node31.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isComma();
        boolean boolean58 = node22.isEquivalentTo(node55);
        boolean boolean59 = node55.isComma();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) '#', node18, node55, 42, (int) ' ');
        boolean boolean63 = node62.isComma();
        com.google.javascript.rhino.Node node64 = node62.cloneTree();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(16, node12, node62);
        boolean boolean66 = node65.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node67 = node65.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        int int88 = node71.getLength();
        com.google.javascript.rhino.Node node89 = node71.getFirstChild();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node4, node67, node71, 4, 31);
        int int93 = node67.getSideEffectFlags();
        boolean boolean94 = node67.isParamList();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        com.google.common.collect.ImmutableList.Builder<java.util.HashSet<java.lang.String>> strSetBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(strSetBuilder0);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        node4.addChildrenToBack(node9);
        com.google.javascript.rhino.InputId inputId20 = node4.getInputId();
        boolean boolean21 = node4.isAdd();
        boolean boolean22 = node4.isBlock();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '#', node4);
        boolean boolean24 = node23.isNew();
        boolean boolean25 = node23.isAdd();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        java.lang.Object obj81 = node55.getProp((-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = node55.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        boolean boolean47 = node27.isGetProp();
        boolean boolean48 = node27.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node50 = node27.getChildAtIndex(2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQuotedString();
        node4.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        boolean boolean13 = node11.isString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = node17.isDec();
        boolean boolean20 = node17.isAssign();
        boolean boolean21 = node11.isEquivalentTo(node17);
        boolean boolean22 = node17.isDelProp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node25 = node24.getLastSibling();
        int int26 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, 54, (int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(3, node4, node17, node24, node30, 30, 31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isTrue();
        boolean boolean41 = node38.isFromExterns();
        boolean boolean42 = node38.isSwitch();
        boolean boolean43 = node38.isUnscopedQualifiedName();
        boolean boolean44 = node38.isQuotedString();
        com.google.javascript.rhino.InputId inputId45 = node38.getInputId();
        boolean boolean46 = node38.isSwitch();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        boolean boolean60 = node59.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            node30.addChildAfter(node38, node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(inputId45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        java.util.LinkedHashSet[] linkedHashSetArray1 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray2 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray1;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList3 = com.google.common.collect.ImmutableList.copyOf(strSetArray2);
        java.util.LinkedHashSet[] linkedHashSetArray5 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray6 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray5;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList7 = com.google.common.collect.ImmutableList.copyOf(strSetArray6);
        java.util.LinkedHashSet[] linkedHashSetArray9 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray10 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray9;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList11 = com.google.common.collect.ImmutableList.copyOf(strSetArray10);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection[]> abstractCollectionArrayList12 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection[]) strSetArray2, (java.util.AbstractCollection[]) strSetArray6, (java.util.AbstractCollection[]) strSetArray10);
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.copyOf((java.util.AbstractSet<java.lang.String>[]) strSetArray2);
        org.junit.Assert.assertNotNull(linkedHashSetArray1);
        org.junit.Assert.assertNotNull(strSetArray2);
        org.junit.Assert.assertNotNull(strSetList3);
        org.junit.Assert.assertNotNull(linkedHashSetArray5);
        org.junit.Assert.assertNotNull(strSetArray6);
        org.junit.Assert.assertNotNull(strSetList7);
        org.junit.Assert.assertNotNull(linkedHashSetArray9);
        org.junit.Assert.assertNotNull(strSetArray10);
        org.junit.Assert.assertNotNull(strSetList11);
        org.junit.Assert.assertNotNull(abstractCollectionArrayList12);
        org.junit.Assert.assertNotNull(strSetList13);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isInstanceOf();
        boolean boolean46 = node44.isComma();
        boolean boolean47 = node11.isEquivalentTo(node44);
        boolean boolean48 = node44.isComma();
        com.google.javascript.rhino.Node node49 = node3.clonePropsFrom(node44);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable50 = node49.getAncestors();
        boolean boolean51 = node49.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(ancestorIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList6 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo0);
        java.io.Serializable[] serializableArray24 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList25 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray24);
        boolean boolean26 = serializableList25.isEmpty();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isQualifiedName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        node35.addChildrenToBack(node40);
        boolean boolean51 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = node30.copyInformationFromForTree(node35);
        boolean boolean53 = serializableList25.contains((java.lang.Object) node35);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray70);
        boolean boolean72 = serializableList25.containsAll((java.util.Collection<java.io.Serializable>) serializableList71);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList73 = serializableList71.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        int int75 = jSDocInfo74.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = null;
        jSDocInfo74.setVisibility(visibility76);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = jSDocInfo74.getEnumParameterType();
        java.lang.String str79 = jSDocInfo74.getReturnDescription();
        boolean boolean80 = jSDocInfo74.hasEnumParameterType();
        boolean boolean81 = serializableList73.contains((java.lang.Object) jSDocInfo74);
        java.lang.Object obj82 = null;
        boolean boolean83 = serializableList73.equals(obj82);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor84 = serializableList73.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = serializableList6.addAll((int) (byte) 0, (java.util.Collection<java.io.Serializable>) serializableList73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableList6);
        org.junit.Assert.assertNotNull(serializableArray24);
        org.junit.Assert.assertNotNull(serializableList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(serializableList73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(jSTypeExpression78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(serializableItor84);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean3 = jSDocInfo0.isExterns();
        boolean boolean4 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 100, 15);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node3.useSourceInfoIfMissingFrom(node51);
        boolean boolean70 = node69.isParamList();
        int int71 = node69.getSourcePosition();
        int int72 = node69.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isInc();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int34 = node33.getCharno();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        node43.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId63 = node43.getInputId();
        node43.setOptionalArg(false);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean70 = node43.isEquivalentTo(node69);
        com.google.javascript.rhino.Node node71 = node33.srcref(node69);
        int int72 = node25.getIndexOfChild(node69);
        boolean boolean73 = node69.isThis();
        boolean boolean74 = node69.isComma();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = jSDocInfo58.getTypeNodes();
        java.lang.String str61 = jSDocInfo58.getDescription();
        boolean boolean62 = jSDocInfo58.hasModifies();
        boolean boolean63 = jSDocInfo58.isConstant();
        int int64 = serializableList24.indexOf((java.lang.Object) jSDocInfo58);
        boolean boolean65 = jSDocInfo58.isInterface();
        int int66 = jSDocInfo58.getExtendedInterfacesCount();
        boolean boolean68 = jSDocInfo58.hasDescriptionForParameter("");
        boolean boolean69 = jSDocInfo58.isDeprecated();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean4 = node3.isCase();
        boolean boolean5 = node3.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isTrue();
        boolean boolean12 = node9.isNoSideEffectsCall();
        boolean boolean13 = node9.isCase();
        boolean boolean14 = node9.isVar();
        int int15 = node9.getSourcePosition();
        boolean boolean16 = node9.isAnd();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        boolean boolean30 = node29.isQuotedString();
        boolean boolean31 = node29.isOptionalArg();
        boolean boolean32 = node29.isLabelName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(9, node3, node9, node29);
        boolean boolean34 = node9.isAssign();
        node9.putBooleanProp(40, false);
        boolean boolean38 = node9.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isDec();
        boolean boolean53 = node50.isNoSideEffectsCall();
        node27.addChildToBack(node50);
        boolean boolean55 = node50.isVoid();
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.Node node57 = node50.cloneNode();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node70.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.Node node78 = node70.copyInformationFrom(node76);
        node50.addChildToBack(node76);
        node76.addSuppression("Not declared as a constructor");
        node76.setWasEmptyNode(false);
        boolean boolean84 = node76.isWith();
        // The following exception was thrown during execution in test generation
        try {
            node76.setDouble((double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        boolean boolean81 = strSet11.add("Not declared as a constructor");
        strSet11.clear();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean88 = node87.isContinue();
        boolean boolean89 = node87.isBlock();
        node87.removeProp(12);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((-1), node87, (int) (short) 100, 0);
        boolean boolean95 = node94.isNull();
        boolean boolean96 = strSet11.remove((java.lang.Object) boolean95);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList97 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet11);
        strSet11.clear();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strCollectionList97);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        boolean boolean48 = serializableList45.contains((java.lang.Object) 52);
        int int50 = serializableList45.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor51 = serializableList45.iterator();
        java.util.List<java.io.Serializable> serializableList54 = serializableList45.subList((int) (short) 10, 16);
        int int55 = serializableList17.lastIndexOf((java.lang.Object) serializableList54);
        java.util.Iterator<java.io.Serializable> serializableItor56 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList59 = serializableList17.subList(8, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (46) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(serializableItor51);
        org.junit.Assert.assertNotNull(serializableList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(serializableItor56);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(9);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(51, nodeArray2, 48, 32);
        boolean boolean6 = node5.isSetterDef();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(53, node5, (int) ' ', (-2147483648));
        int int11 = node5.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.getAncestor(32);
        java.lang.Appendable appendable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            node5.appendStringTree(appendable14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isUnscopedQualifiedName();
        boolean boolean64 = node60.isCase();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = node60.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node67.setCharno((int) (byte) 1);
        boolean boolean70 = node67.isGetterDef();
        com.google.javascript.rhino.Node node71 = node61.copyInformationFrom(node67);
        boolean boolean72 = node71.isVarArgs();
        com.google.javascript.rhino.jstype.JSType jSType73 = node71.getJSType();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSType73);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.io.Serializable[] serializableArray39 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList40 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray39);
        boolean boolean41 = serializableList40.isEmpty();
        boolean boolean43 = serializableList40.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream44 = serializableList40.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor45 = serializableList40.listIterator();
        java.io.Serializable serializable47 = serializableList40.get(2);
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableList40.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = serializableList17.addAll(37, (java.util.Collection<java.io.Serializable>) serializableList40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableArray39);
        org.junit.Assert.assertNotNull(serializableList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(serializableStream44);
        org.junit.Assert.assertNotNull(serializableItor45);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 100 + "'", serializable47, (short) 100);
        org.junit.Assert.assertNotNull(serializableStream48);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = staticSourceFile63.getName();
        boolean boolean65 = staticSourceFile63.isExtern();
        node45.setStaticSourceFile(staticSourceFile63);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node45.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder67.append("hi!");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(staticSourceFile63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId52 = node32.getInputId();
        node32.setLineno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node32.getAncestors();
        int int56 = serializableList17.indexOf((java.lang.Object) node32);
        boolean boolean57 = node32.isSyntheticBlock();
        boolean boolean58 = node32.isVoid();
        node32.setOptionalArg(false);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId52);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.isNoAlias();
        boolean boolean5 = strSet2.equals((java.lang.Object) jSDocInfo3);
        strSet2.clear();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int8 = stringPosition7.getStartLine();
        int int9 = stringPosition7.getPositionOnEndLine();
        stringPosition7.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int15 = stringPosition7.getEndLine();
        int int16 = stringPosition7.getPositionOnStartLine();
        boolean boolean17 = strSet2.remove((java.lang.Object) stringPosition7);
        int int18 = stringPosition7.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition7.setPositionInformation(63, 15, (int) (byte) 10, 27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 63?end-line: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = null;
        jSDocInfo24.setVisibility(visibility26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo24.getParameterType("true");
        java.lang.String str30 = jSDocInfo24.getLendsName();
        java.lang.String str31 = jSDocInfo24.getDeprecationReason();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo24.getModifies();
        java.io.Serializable[] serializableArray49 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList50 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray49);
        boolean boolean51 = serializableList50.isEmpty();
        int int52 = serializableList50.size();
        boolean boolean53 = strSet32.contains((java.lang.Object) serializableList50);
        java.util.stream.Stream<java.io.Serializable> serializableStream54 = serializableList50.stream();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor56 = serializableList50.listIterator(9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = serializableList17.removeAll((java.util.Collection<java.io.Serializable>) serializableList50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(serializableArray49);
        org.junit.Assert.assertNotNull(serializableList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableStream54);
        org.junit.Assert.assertNotNull(serializableItor56);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        com.google.javascript.rhino.Node node21 = node3.getFirstChild();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node34.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.Node node37 = node34.getLastSibling();
        int int38 = node34.getLength();
        boolean boolean39 = node21.isEquivalentToTyped(node34);
        boolean boolean40 = node34.isBreak();
        boolean boolean41 = node34.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        boolean boolean44 = node43.isOptionalArg();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node58.children();
        boolean boolean60 = node58.isNull();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isContinue();
        boolean boolean79 = node77.isString();
        com.google.javascript.rhino.Node node80 = node64.useSourceInfoFromForTree(node77);
        com.google.javascript.rhino.InputId inputId81 = null;
        node80.setInputId(inputId81);
        java.lang.Object obj84 = node80.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(54, node58, node80);
        node80.setLineno(40);
        com.google.javascript.rhino.Node node88 = node43.srcref(node80);
        node43.setType((int) '#');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(45, "(java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        com.google.javascript.rhino.Node node41 = node33.getLastSibling();
        node33.setSourceEncodedPositionForTree(16);
        boolean boolean44 = node33.isSyntheticBlock();
        boolean boolean45 = node33.isComma();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isWith();
        java.io.Serializable[] serializableArray34 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList35 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray34);
        boolean boolean36 = serializableList35.isEmpty();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = node40.copyInformationFromForTree(node45);
        boolean boolean63 = serializableList35.contains((java.lang.Object) node45);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        node76.setSourceFileForTesting("hi!");
        boolean boolean79 = node76.isIf();
        boolean boolean80 = node45.isEquivalentToTyped(node76);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node81 = node12.removeChildAfter(node76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(serializableArray34);
        org.junit.Assert.assertNotNull(serializableList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        node9.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId29 = node9.getInputId();
        node9.setOptionalArg(false);
        boolean boolean32 = node9.isTrue();
        int int33 = node9.getType();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        boolean boolean39 = node37.isBlock();
        node37.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isQualifiedName();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        node50.addChildrenToBack(node55);
        boolean boolean66 = node50.isLocalResultCall();
        com.google.javascript.rhino.Node node67 = node45.copyInformationFromForTree(node50);
        node50.setSourceEncodedPosition((int) (short) -1);
        boolean boolean70 = node50.isName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        boolean boolean76 = node50.hasChild(node74);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node80.clonePropsFrom(node87);
        node89.setSourceFileForTesting("hi!");
        boolean boolean92 = node89.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile93 = node89.getStaticSourceFile();
        int int95 = staticSourceFile93.getLineOffset(31);
        boolean boolean96 = staticSourceFile93.isExtern();
        node50.setStaticSourceFile(staticSourceFile93);
        com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node((int) (short) 1, node9, node37, node50);
        boolean boolean99 = node98.isDo();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(staticSourceFile93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-2147483648) + "'", int95 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        boolean boolean7 = node5.isDec();
        boolean boolean8 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        int int36 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isDec();
        boolean boolean43 = node40.isAssign();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isQualifiedName();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node56.addChildrenToBack(node61);
        boolean boolean72 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node73 = node51.copyInformationFromForTree(node56);
        node56.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node76 = node47.clonePropsFrom(node56);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] { node5, node21, node35, node40, node47 };
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, nodeArray77, (-1), 54);
        boolean boolean81 = node80.hasChildren();
        boolean boolean82 = node80.isLocalResultCall();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(9, node80, 47, 0);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isQuotedString();
        boolean boolean91 = node89.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType92 = null;
        node89.setJSType(jSType92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = node85.checkTreeEquals(node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor27 = serializableList17.iterator();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean32 = node31.isContinue();
        int int33 = serializableList17.lastIndexOf((java.lang.Object) node31);
        com.google.javascript.rhino.Node node34 = node31.getNext();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertNotNull(serializableItor27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getEndLine();
        java.io.Serializable[] serializableArray20 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList21 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray20);
        int int22 = serializableList21.size();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList21.listIterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.or(ternaryValue32);
        java.lang.String str37 = ternaryValue32.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue24.xor(ternaryValue32);
        int int39 = serializableList21.lastIndexOf((java.lang.Object) ternaryValue24);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean44 = serializableList21.contains((java.lang.Object) node43);
        com.google.javascript.rhino.Node node45 = node43.getNext();
        typePosition0.setItem(node45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serializableArray20);
        org.junit.Assert.assertNotNull(serializableList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "true" + "'", str37, "true");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.util.Iterator<java.io.Serializable> serializableItor55 = serializableList24.iterator();
        java.io.Serializable[] serializableArray72 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList73 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray72);
        boolean boolean74 = serializableList73.isEmpty();
        boolean boolean76 = serializableList73.contains((java.lang.Object) 52);
        boolean boolean78 = serializableList73.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray79 = serializableList73.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        int int81 = jSDocInfo80.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection82 = jSDocInfo80.getTypeNodes();
        boolean boolean83 = jSDocInfo80.isExpose();
        boolean boolean84 = jSDocInfo80.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo80.getExtendedInterfaces();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        com.google.common.collect.ImmutableList<java.lang.Object> objList91 = com.google.common.collect.ImmutableList.of((java.lang.Object) serializableList73, (java.lang.Object) jSDocInfo80, (java.lang.Object) boolean90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = serializableList24.retainAll((java.util.Collection<java.io.Serializable>) serializableList73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertNotNull(serializableArray72);
        org.junit.Assert.assertNotNull(serializableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(nodeCollection82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objList91);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 8);
        boolean boolean2 = node1.isTypeOf();
        java.lang.String str3 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "NUMBER 8.0\n" + "'", str3, "NUMBER 8.0\n");
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        boolean boolean8 = node4.isIf();
        boolean boolean9 = node4.isFalse();
        boolean boolean10 = node4.isObjectLit();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        boolean boolean30 = node28.isString();
        com.google.javascript.rhino.Node node31 = node15.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.InputId inputId32 = null;
        node31.setInputId(inputId32);
        java.lang.Object obj35 = node31.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        boolean boolean54 = node52.isString();
        com.google.javascript.rhino.Node node55 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.InputId inputId56 = null;
        node55.setInputId(inputId56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isQualifiedName();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node71.setJSType(jSType73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        com.google.javascript.rhino.Node node80 = node71.clonePropsFrom(node78);
        node66.addChildrenToBack(node71);
        boolean boolean82 = node66.isLocalResultCall();
        com.google.javascript.rhino.Node node83 = node61.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(0, node31, node55, node66, (int) (short) 10, 53);
        com.google.javascript.rhino.Node node87 = node86.cloneTree();
        boolean boolean88 = node86.isScript();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) '#', node4, node86, (int) (byte) -1, 8);
        int int92 = node4.getCharno();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        int int15 = node13.getCharno();
        boolean boolean16 = node13.isDec();
        com.google.javascript.rhino.Node node17 = null;
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(49, node13, node17, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.util.Iterator<java.io.Serializable> serializableItor55 = serializableList24.iterator();
        java.lang.Object[] objArray56 = serializableList24.toArray();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isInstanceOf();
        boolean boolean46 = node44.isComma();
        boolean boolean47 = node11.isEquivalentTo(node44);
        boolean boolean48 = node44.isComma();
        com.google.javascript.rhino.Node node49 = node3.clonePropsFrom(node44);
        boolean boolean50 = node3.isWith();
        int int51 = node3.getSourcePosition();
        java.lang.String str52 = node3.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        boolean boolean28 = node8.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        boolean boolean34 = node32.isDec();
        boolean boolean35 = node32.isNoSideEffectsCall();
        boolean boolean36 = node32.isIf();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        com.google.javascript.rhino.Node node38 = node8.srcref(node32);
        node8.setSourceEncodedPositionForTree(10);
        int int42 = node8.getIntProp((int) (byte) 0);
        node8.setWasEmptyNode(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        java.lang.String str12 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList17 = com.google.common.collect.ImmutableList.of(ternaryValue13, ternaryValue14, ternaryValue15, ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList22 = com.google.common.collect.ImmutableList.of(ternaryValue18, ternaryValue19, ternaryValue20, ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue14.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList28 = com.google.common.collect.ImmutableList.of(ternaryValue24, ternaryValue25, ternaryValue26, ternaryValue27);
        java.lang.String str29 = ternaryValue26.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList34 = com.google.common.collect.ImmutableList.of(ternaryValue30, ternaryValue31, ternaryValue32, ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue26.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue35.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue14.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue7.xor(ternaryValue36);
        java.lang.String str39 = ternaryValue38.toString();
        java.lang.String str40 = ternaryValue38.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueList17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValueList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValueList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "true" + "'", str29, "true");
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValueList34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "true" + "'", str39, "true");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasReturnType();
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getPositionOnStartLine();
        int int7 = stringPosition5.getPositionOnEndLine();
        stringPosition5.setItem("java.io.IOException: JSDocInfo");
        java.lang.String str10 = stringPosition5.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int12 = stringPosition11.getStartLine();
        int int13 = stringPosition11.getEndLine();
        int int14 = stringPosition11.getPositionOnEndLine();
        stringPosition11.setItem("JSDocInfo");
        int int17 = stringPosition11.getEndLine();
        int int18 = stringPosition11.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int20 = stringPosition19.getStartLine();
        int int21 = stringPosition19.getEndLine();
        int int22 = stringPosition19.getPositionOnEndLine();
        stringPosition19.setItem("JSDocInfo");
        int int25 = stringPosition19.getEndLine();
        int int26 = stringPosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        int int28 = jSDocInfo27.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo27.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoAlias();
        boolean boolean32 = strSet29.equals((java.lang.Object) jSDocInfo30);
        strSet29.clear();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int35 = stringPosition34.getStartLine();
        int int36 = stringPosition34.getPositionOnEndLine();
        stringPosition34.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int42 = stringPosition34.getEndLine();
        int int43 = stringPosition34.getPositionOnStartLine();
        boolean boolean44 = strSet29.remove((java.lang.Object) stringPosition34);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int46 = stringPosition45.getPositionOnStartLine();
        int int47 = stringPosition45.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int49 = stringPosition48.getPositionOnStartLine();
        int int50 = stringPosition48.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int52 = stringPosition51.getStartLine();
        int int53 = stringPosition51.getPositionOnEndLine();
        stringPosition51.setPositionInformation(0, 51, 31, 48);
        stringPosition51.setItem("java.io.IOException");
        java.lang.String str61 = stringPosition51.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList62 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition5, stringPosition11, stringPosition19, stringPosition34, stringPosition45, stringPosition48, stringPosition51);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition63 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int64 = stringPosition63.getPositionOnStartLine();
        int int65 = stringPosition63.getPositionOnEndLine();
        stringPosition63.setItem("java.io.IOException: JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray68 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] { stringPosition51, stringPosition63 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList69 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray68);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: JSDocInfo" + "'", str10, "java.io.IOException: JSDocInfo");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.io.IOException" + "'", str61, "java.io.IOException");
        org.junit.Assert.assertNotNull(stringPositionList62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(stringPositionArray68);
        org.junit.Assert.assertNotNull(stringPositionList69);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        node14.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node34 = node5.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isTrue();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 0, node14, node38, node44, node58, 10, (int) (byte) -1);
        node14.putIntProp((int) (short) 0, (int) (byte) -1);
        boolean boolean65 = node14.isExprResult();
        boolean boolean67 = node14.getBooleanProp(16);
        com.google.javascript.rhino.Node node68 = node14.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((-1), node14, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        int int6 = node3.getType();
        boolean boolean7 = node3.isDec();
        boolean boolean8 = node3.isAnd();
        boolean boolean9 = node3.isLabelName();
        com.google.javascript.rhino.Node node11 = node3.getAncestor((int) '4');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(32, "JSDocInfo");
        com.google.javascript.rhino.Node node17 = node13.srcrefTree(node16);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = node27.isParamList();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(38, node27, 51, 38);
        int int49 = node48.getSideEffectFlags();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node54 = node48.copyInformationFrom(node53);
        boolean boolean55 = node48.isNoSideEffectsCall();
        boolean boolean56 = node48.isAssign();
        boolean boolean57 = node48.isDo();
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node13, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable27 = serializableList17.get(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (50) must be less than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        java.io.Serializable[] serializableArray17 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList18 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray17);
        boolean boolean19 = serializableList18.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        boolean boolean46 = serializableList18.contains((java.lang.Object) node28);
        java.io.Serializable[] serializableArray63 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList64 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray63);
        boolean boolean65 = serializableList18.containsAll((java.util.Collection<java.io.Serializable>) serializableList64);
        boolean boolean66 = serializableList18.isEmpty();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isContinue();
        com.google.javascript.rhino.Node node84 = node75.clonePropsFrom(node82);
        node70.addChildrenToBack(node75);
        int int86 = serializableList18.indexOf((java.lang.Object) node70);
        boolean boolean87 = node70.isDo();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 100L, 36, (int) (short) 0);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(50, node70, node91, (int) (byte) 100, (int) (short) 1);
        boolean boolean95 = node70.isFor();
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(serializableList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableArray63);
        org.junit.Assert.assertNotNull(serializableList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int8 = stringPosition0.getEndLine();
        java.lang.String str9 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        boolean boolean16 = node3.isIn();
        boolean boolean17 = node3.isOr();
        boolean boolean18 = node3.isOr();
        node3.setVarArgs(true);
        com.google.javascript.rhino.Node node21 = node3.removeFirstChild();
        boolean boolean22 = node3.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList55 = serializableList24.reverse();
        java.io.Serializable[] serializableArray73 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList74 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray73);
        boolean boolean75 = serializableList74.isEmpty();
        boolean boolean77 = serializableList74.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream78 = serializableList74.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream79 = serializableList74.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream80 = serializableList74.parallelStream();
        java.util.Iterator<java.io.Serializable> serializableItor81 = serializableList74.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.add(47, (java.io.Serializable) serializableList74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableList55);
        org.junit.Assert.assertNotNull(serializableArray73);
        org.junit.Assert.assertNotNull(serializableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(serializableStream78);
        org.junit.Assert.assertNotNull(serializableStream79);
        org.junit.Assert.assertNotNull(serializableStream80);
        org.junit.Assert.assertNotNull(serializableItor81);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0);
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int6 = namePosition5.getPositionOnEndLine();
        int int7 = namePosition5.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int9 = namePosition8.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList10 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition[] namePositionArray11 = new com.google.javascript.rhino.JSDocInfo.NamePosition[] { namePosition0, namePosition5, namePosition8 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.copyOf(namePositionArray11);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(namePositionList10);
        org.junit.Assert.assertNotNull(namePositionArray11);
        org.junit.Assert.assertNotNull(namePositionList12);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node49 = node20.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        boolean boolean55 = node53.isTrue();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 0, node29, node53, node59, node73, 10, (int) (byte) -1);
        boolean boolean77 = node29.isIf();
        com.google.javascript.rhino.Node node78 = node3.useSourceInfoFrom(node29);
        node78.setIsSyntheticBlock(true);
        boolean boolean81 = node78.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        int int80 = strSet4.size();
        boolean boolean81 = strSet4.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor57 = serializableList24.iterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator58 = serializableList24.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable60 = serializableList24.remove((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableItor57);
        org.junit.Assert.assertNotNull(serializableSpliterator58);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node12.getLineno();
        com.google.javascript.rhino.Node node14 = node12.getNext();
        boolean boolean15 = node12.isIn();
        node12.putIntProp(32, (int) (byte) 100);
        node12.setCharno((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        boolean boolean62 = node13.isDec();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node13.getJsDocBuilderForNode();
        java.lang.String str64 = node13.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        node1.setLineno((int) (short) 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("true", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node node8 = node1.copyInformationFromForTree(node7);
        boolean boolean9 = node7.isCatch();
        com.google.javascript.rhino.Node[] nodeArray13 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(51, nodeArray13, 48, 32);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(15, nodeArray13);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = node22.isObjectLit();
        boolean boolean46 = node22.isFor();
        // The following exception was thrown during execution in test generation
        try {
            node7.addChildAfter(node18, node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeArray13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        boolean boolean3 = node1.isRegExp();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node32 = node23.clonePropsFrom(node30);
        node18.addChildrenToBack(node23);
        boolean boolean34 = node18.isLocalResultCall();
        com.google.javascript.rhino.Node node35 = node13.copyInformationFromForTree(node18);
        node18.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node38 = node9.clonePropsFrom(node18);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        boolean boolean44 = node42.isTrue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 0, node18, node42, node48, node62, 10, (int) (byte) -1);
        boolean boolean66 = node62.isGetProp();
        boolean boolean67 = node62.isFor();
        // The following exception was thrown during execution in test generation
        try {
            node1.putProp(16, (java.lang.Object) node62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.Node cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean5 = node4.isAssign();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 42, 9);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node9.getStaticSourceFile();
        // The following exception was thrown during execution in test generation
        try {
            node9.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(staticSourceFile10);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        boolean boolean14 = node12.isOptionalArg();
        boolean boolean15 = node12.isThis();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node49 = node20.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        boolean boolean55 = node53.isTrue();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 0, node29, node53, node59, node73, 10, (int) (byte) -1);
        node29.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable81 = node29.getAncestors();
        java.lang.String str82 = node29.getSourceFileName();
        com.google.javascript.rhino.Node node83 = node12.srcref(node29);
        int int84 = node83.getSourceOffset();
        boolean boolean85 = node83.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(staticSourceFile80);
        org.junit.Assert.assertNotNull(ancestorIterable81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node3.setJSType(jSType19);
        boolean boolean21 = node3.isFor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0);
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node16 = node7.clonePropsFrom(node14);
        boolean boolean17 = node16.isAssign();
        namePosition0.setItem(node16);
        boolean boolean19 = node16.isFalse();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isTry();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        int int22 = node21.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo23.getEnumParameterType();
        java.lang.String str28 = jSDocInfo23.getReturnDescription();
        boolean boolean29 = jSDocInfo23.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node30 = jSDocInfo23.getAssociatedNode();
        boolean boolean31 = jSDocInfo23.hasThisType();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.InputId inputId52 = null;
        node51.setInputId(inputId52);
        java.lang.Object obj55 = node51.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node51.getJSDocInfo();
        node51.setVarArgs(true);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        node68.addChildrenToBack(node73);
        boolean boolean84 = node68.isLocalResultCall();
        com.google.javascript.rhino.Node node85 = node63.copyInformationFromForTree(node68);
        boolean boolean86 = node63.isWhile();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean91 = node90.isLabelName();
        boolean boolean92 = node90.isDec();
        boolean boolean93 = node90.isAssign();
        boolean boolean94 = node90.isIn();
        node90.setCharno((int) (short) 0);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList97 = com.google.common.collect.ImmutableList.of((java.io.Serializable) node3, (java.io.Serializable) node21, (java.io.Serializable) boolean31, (java.io.Serializable) node51, (java.io.Serializable) 10L, (java.io.Serializable) node63, (java.io.Serializable) (short) 0);
        boolean boolean98 = node51.isNE();
        boolean boolean99 = node51.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(serializableList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        boolean boolean8 = node3.isGetterDef();
        boolean boolean10 = node3.getBooleanProp(63);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        boolean boolean16 = node14.isDo();
        node14.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        node32.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node52 = node23.clonePropsFrom(node32);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        boolean boolean58 = node56.isTrue();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 0, node32, node56, node62, node76, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node80 = node14.useSourceInfoIfMissingFrom(node62);
        boolean boolean81 = node3.isEquivalentTo(node80);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isNull();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isFor();
        node3.putBooleanProp(63, true);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) 29, 0, 35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = node3.checkTreeEquals(node15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 63");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node3.getAncestors();
        boolean boolean22 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        boolean boolean27 = jSDocInfo23.hasFileOverview();
        boolean boolean28 = jSDocInfo23.isJavaDispatch();
        boolean boolean29 = jSDocInfo23.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo23.getExtendedInterfaces();
        java.lang.String str31 = jSDocInfo23.getLicense();
        boolean boolean32 = jSDocInfo23.isNoSideEffects();
        jSDocInfo23.setDeprecated(false);
        node3.setJSDocInfo(jSDocInfo23);
        jSDocInfo23.setLicense("NUMBER -1.0 12");
        boolean boolean38 = jSDocInfo23.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isNull();
        com.google.javascript.rhino.Node node7 = node3.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = node7.isInc();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        int int8 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isTry();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        int int22 = node21.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo23.getEnumParameterType();
        java.lang.String str28 = jSDocInfo23.getReturnDescription();
        boolean boolean29 = jSDocInfo23.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node30 = jSDocInfo23.getAssociatedNode();
        boolean boolean31 = jSDocInfo23.hasThisType();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.InputId inputId52 = null;
        node51.setInputId(inputId52);
        java.lang.Object obj55 = node51.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node51.getJSDocInfo();
        node51.setVarArgs(true);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        node68.addChildrenToBack(node73);
        boolean boolean84 = node68.isLocalResultCall();
        com.google.javascript.rhino.Node node85 = node63.copyInformationFromForTree(node68);
        boolean boolean86 = node63.isWhile();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean91 = node90.isLabelName();
        boolean boolean92 = node90.isDec();
        boolean boolean93 = node90.isAssign();
        boolean boolean94 = node90.isIn();
        node90.setCharno((int) (short) 0);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList97 = com.google.common.collect.ImmutableList.of((java.io.Serializable) node3, (java.io.Serializable) node21, (java.io.Serializable) boolean31, (java.io.Serializable) node51, (java.io.Serializable) 10L, (java.io.Serializable) node63, (java.io.Serializable) (short) 0);
        java.lang.Object[] objArray98 = serializableList97.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(serializableList97);
        org.junit.Assert.assertNotNull(objArray98);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        boolean boolean9 = jSDocInfo0.hasReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList13 = ternaryValueEnumBuilder12.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        java.lang.String str19 = ternaryValue16.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList24 = com.google.common.collect.ImmutableList.of(ternaryValue20, ternaryValue21, ternaryValue22, ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue16.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue21.xor(ternaryValue26);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder32 = ternaryValueEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue31);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder33 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList34 = ternaryValueEnumBuilder33.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        java.lang.String str40 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList45 = com.google.common.collect.ImmutableList.of(ternaryValue41, ternaryValue42, ternaryValue43, ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue37.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList51 = com.google.common.collect.ImmutableList.of(ternaryValue47, ternaryValue48, ternaryValue49, ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue42.xor(ternaryValue47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder53 = ternaryValueEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder54 = ternaryValueEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder55 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList56 = ternaryValueEnumBuilder55.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray57 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder58 = ternaryValueEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray57);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList63 = com.google.common.collect.ImmutableList.of(ternaryValue59, ternaryValue60, ternaryValue61, ternaryValue62);
        java.lang.String str64 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList69 = com.google.common.collect.ImmutableList.of(ternaryValue65, ternaryValue66, ternaryValue67, ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue61.or(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue70.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder72 = ternaryValueEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder74 = ternaryValueEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue73);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList75 = ternaryValueEnumBuilder72.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList76 = ternaryValueEnumBuilder72.build();
        com.google.common.collect.ImmutableList.Builder[] builderArray78 = new com.google.common.collect.ImmutableList.Builder[2];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[] ternaryValueEnumBuilderArray79 = (com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[]) builderArray78;
        ternaryValueEnumBuilderArray79[0] = ternaryValueEnumBuilder54;
        ternaryValueEnumBuilderArray79[1] = ternaryValueEnumBuilder72;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[] ternaryValueEnumBuilderArray84 = strSet11.toArray(ternaryValueEnumBuilderArray79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>> ternaryValueEnumBuilderList85 = com.google.common.collect.ImmutableList.copyOf((com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[]) ternaryValueEnumBuilderArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 0");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(ternaryValueEnumList13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "true" + "'", str19, "true");
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValueList24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder32);
        org.junit.Assert.assertNotNull(ternaryValueEnumList34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueList45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValueList51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder53);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder54);
        org.junit.Assert.assertNotNull(ternaryValueEnumList56);
        org.junit.Assert.assertNotNull(ternaryValueArray57);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValueList63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "true" + "'", str64, "true");
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValueList69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder74);
        org.junit.Assert.assertNotNull(ternaryValueEnumList75);
        org.junit.Assert.assertNotNull(ternaryValueEnumList76);
        org.junit.Assert.assertNotNull(builderArray78);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderArray79);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderArray84);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasModifies();
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        java.lang.String str5 = jSDocInfo0.toString();
        java.lang.String str6 = jSDocInfo0.getVersion();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        boolean boolean41 = node36.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        boolean boolean48 = node46.isTry();
        boolean boolean49 = node46.isUnscopedQualifiedName();
        int int50 = node46.getSourceOffset();
        boolean boolean51 = node46.isNumber();
        com.google.javascript.rhino.Node node52 = node36.srcref(node46);
        boolean boolean53 = node52.isParamList();
        boolean boolean54 = node52.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isQualifiedName();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node68.setJSType(jSType70);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node77 = node68.clonePropsFrom(node75);
        node63.addChildrenToBack(node68);
        boolean boolean79 = node63.isLocalResultCall();
        com.google.javascript.rhino.Node node80 = node58.copyInformationFromForTree(node63);
        boolean boolean81 = node58.isStringKey();
        node52.addChildToBack(node58);
        // The following exception was thrown during execution in test generation
        try {
            node58.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        boolean boolean5 = node4.isExprResult();
        boolean boolean6 = node4.isIf();
        boolean boolean7 = node4.isGetterDef();
        boolean boolean8 = node4.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet1.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.union(booleanLiteralSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator22 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags25 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags25.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean29 = sideEffectFlags28.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags31 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean32 = sideEffectFlags31.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags34.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags37 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags39.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags42 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList43 = com.google.common.collect.ImmutableList.of(sideEffectFlags25, sideEffectFlags28, sideEffectFlags31, sideEffectFlags34, sideEffectFlags37, sideEffectFlags39, sideEffectFlags42);
        sideEffectFlags25.setMutatesArguments();
        sideEffectFlags25.setMutatesArguments();
        sideEffectFlags25.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = serializableList17.remove((java.lang.Object) sideEffectFlags25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableSpliterator22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList43);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        int int20 = jSDocInfo19.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection21 = jSDocInfo19.getTypeNodes();
        boolean boolean22 = serializableList17.equals((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo19.getEnumParameterType();
        boolean boolean24 = jSDocInfo19.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getParameterType("Not declared as a type name");
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isInstanceOf();
        boolean boolean38 = node36.isComma();
        boolean boolean39 = node3.isEquivalentTo(node36);
        boolean boolean40 = node36.isComma();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node44.setJSType(jSType46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node53 = node44.clonePropsFrom(node51);
        boolean boolean54 = node53.isQuotedString();
        int int55 = node53.getCharno();
        boolean boolean56 = node53.isDec();
        com.google.javascript.rhino.Node node57 = node36.useSourceInfoFrom(node53);
        boolean boolean58 = node36.isFor();
        boolean boolean59 = node36.isInc();
        boolean boolean60 = node36.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(31, "Not declared as a type name", 47, 54);
        boolean boolean5 = node4.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("InputId: true");
        boolean boolean12 = jSDocInfo0.hasParameterType("[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        java.lang.String str14 = jSDocInfo0.getDescriptionForParameter("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        com.google.javascript.rhino.InputId inputId63 = null;
        node60.setInputId(inputId63);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node63 = node62.getLastSibling();
        boolean boolean64 = node60.isEquivalentTo(node62);
        boolean boolean65 = node62.isNot();
        boolean boolean66 = node62.isHook();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node62.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(staticSourceFile67);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        node3.setWasEmptyNode(true);
        boolean boolean8 = node3.isAdd();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        int int23 = node21.getCharno();
        com.google.javascript.rhino.Node node24 = node3.useSourceInfoFrom(node21);
        boolean boolean25 = node3.isCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(42, nodeArray4, 32, 12);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(12, nodeArray4);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        node30.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node50 = node21.clonePropsFrom(node30);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isInstanceOf();
        boolean boolean56 = node54.isComma();
        boolean boolean57 = node21.isEquivalentTo(node54);
        boolean boolean58 = node54.isComma();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) '#', node17, node54, 42, (int) ' ');
        int int62 = node17.getChildCount();
        boolean boolean63 = node17.isContinue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node17.siblings();
        boolean boolean65 = node17.isBreak();
        node17.putIntProp(44, 16);
        com.google.javascript.rhino.Node node69 = node12.copyInformationFrom(node17);
        node12.setCharno(54);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList19 = serializableList17.asList();
        java.lang.Object[] objArray20 = serializableList17.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableList19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor10 = strSet9.iterator();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder11 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList12 = ternaryValueEnumBuilder11.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray13 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder14 = ternaryValueEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList19 = com.google.common.collect.ImmutableList.of(ternaryValue15, ternaryValue16, ternaryValue17, ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList25 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue22, ternaryValue23, ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue17.or(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue22.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue22.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder29 = ternaryValueEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder30 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList31 = ternaryValueEnumBuilder30.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray32 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder33 = ternaryValueEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray32);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList34 = ternaryValueEnumBuilder33.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        java.lang.String str40 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList45 = com.google.common.collect.ImmutableList.of(ternaryValue41, ternaryValue42, ternaryValue43, ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue37.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList51 = com.google.common.collect.ImmutableList.of(ternaryValue47, ternaryValue48, ternaryValue49, ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue42.xor(ternaryValue47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder53 = ternaryValueEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue47);
        com.google.common.collect.ImmutableList.Builder[] builderArray55 = new com.google.common.collect.ImmutableList.Builder[2];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[] ternaryValueEnumBuilderArray56 = (com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[]) builderArray55;
        ternaryValueEnumBuilderArray56[0] = ternaryValueEnumBuilder29;
        ternaryValueEnumBuilderArray56[1] = ternaryValueEnumBuilder53;
        com.google.common.collect.ImmutableList.Builder[][] builderArray62 = new com.google.common.collect.ImmutableList.Builder[1][];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[][] ternaryValueEnumBuilderArray63 = (com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[][]) builderArray62;
        ternaryValueEnumBuilderArray63[0] = ternaryValueEnumBuilderArray56;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>[][] ternaryValueEnumBuilderArray66 = strSet9.toArray(ternaryValueEnumBuilderArray63);
        java.util.Iterator<java.lang.String> strItor67 = strSet9.iterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(ternaryValueEnumList12);
        org.junit.Assert.assertNotNull(ternaryValueArray13);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValueList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueList25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder29);
        org.junit.Assert.assertNotNull(ternaryValueEnumList31);
        org.junit.Assert.assertNotNull(ternaryValueArray32);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder33);
        org.junit.Assert.assertNotNull(ternaryValueEnumList34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueList45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValueList51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder53);
        org.junit.Assert.assertNotNull(builderArray55);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderArray56);
        org.junit.Assert.assertNotNull(builderArray62);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderArray63);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderArray66);
        org.junit.Assert.assertNotNull(strItor67);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(52, 16, 54, 35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        boolean boolean6 = node4.isBlock();
        node4.removeProp(12);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        boolean boolean29 = node27.isDec();
        boolean boolean30 = node27.isScript();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node22, node27, node34, 0, (int) (short) 0);
        boolean boolean38 = node22.isTrue();
        com.google.javascript.rhino.Node node39 = node4.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean40 = node4.isInc();
        boolean boolean41 = node4.isLabel();
        boolean boolean42 = node4.isCall();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(50, node4);
        java.lang.String str44 = node4.getQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node40.children();
        boolean boolean42 = node40.isNull();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node55 = node46.clonePropsFrom(node53);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        boolean boolean61 = node59.isString();
        com.google.javascript.rhino.Node node62 = node46.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.InputId inputId63 = null;
        node62.setInputId(inputId63);
        java.lang.Object obj66 = node62.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(54, node40, node62);
        boolean boolean68 = serializableList17.contains((java.lang.Object) node62);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags70 = new com.google.javascript.rhino.Node.SideEffectFlags(54);
        // The following exception was thrown during execution in test generation
        try {
            node62.setSideEffectFlags(sideEffectFlags70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        java.lang.Object obj56 = null;
        boolean boolean57 = serializableList24.equals(obj56);
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList24.iterator();
        java.util.Iterator<java.io.Serializable> serializableItor59 = serializableList24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertNotNull(serializableItor59);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        int int7 = node3.getCharno();
        boolean boolean8 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId37 = node17.getInputId();
        node17.setOptionalArg(false);
        boolean boolean40 = node17.isTrue();
        int int41 = node17.getLength();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isQualifiedName();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        node50.addChildrenToBack(node55);
        boolean boolean66 = node50.isLocalResultCall();
        com.google.javascript.rhino.Node node67 = node45.copyInformationFromForTree(node50);
        node50.setSourceEncodedPosition((int) (short) -1);
        boolean boolean70 = node50.isName();
        node17.addChildToBack(node50);
        com.google.javascript.rhino.Node node72 = node3.clonePropsFrom(node50);
        boolean boolean73 = node50.isExprResult();
        node50.setLineno((int) (short) 0);
        node50.setVarArgs(true);
        // The following exception was thrown during execution in test generation
        try {
            node50.setSideEffectFlags(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("hi!");
        int int4 = stringPosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(50, (-8), 35, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 50?end-line: 35");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        int int49 = node4.getChildCount();
        boolean boolean50 = node4.isContinue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node4.siblings();
        boolean boolean52 = node4.isBreak();
        boolean boolean53 = node4.isVar();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.lang.Throwable[] throwableArray10 = iOException8.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException();
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException();
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.lang.Throwable[] throwableArray17 = iOException15.getSuppressed();
        java.io.IOException iOException18 = new java.io.IOException();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException31 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList32 = com.google.common.collect.ImmutableList.of(iOException2, iOException6, iOException8, iOException12, iOException15, iOException19, iOException22, iOException24, iOException26, iOException30, iOException31);
        java.lang.Throwable[] throwableArray33 = iOException26.getSuppressed();
        java.lang.Throwable[] throwableArray34 = iOException26.getSuppressed();
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException40 = new java.io.IOException();
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException40);
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        java.lang.Throwable[] throwableArray43 = iOException41.getSuppressed();
        java.io.IOException iOException45 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException46 = new java.io.IOException();
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        java.lang.Throwable[] throwableArray49 = iOException47.getSuppressed();
        java.io.IOException iOException50 = new java.io.IOException();
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException();
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) iOException53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) iOException54);
        java.lang.Throwable[] throwableArray56 = iOException54.getSuppressed();
        java.io.IOException iOException57 = new java.io.IOException();
        java.io.IOException iOException58 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException58);
        java.io.IOException iOException61 = new java.io.IOException();
        java.io.IOException iOException63 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException65 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException66 = new java.io.IOException();
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) iOException66);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException69 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException70 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList71 = com.google.common.collect.ImmutableList.of(iOException41, iOException45, iOException47, iOException51, iOException54, iOException58, iOException61, iOException63, iOException65, iOException69, iOException70);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList72 = com.google.common.collect.ImmutableList.of(iOException37, iOException63);
        java.lang.Throwable[] throwableArray73 = iOException37.getSuppressed();
        java.io.IOException iOException74 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException75 = new java.io.IOException("Not declared as a type name", (java.lang.Throwable) iOException37);
        iOException26.addSuppressed((java.lang.Throwable) iOException75);
        java.io.IOException iOException77 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException75);
        java.lang.Throwable[] throwableArray78 = iOException77.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(iOExceptionList32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(iOExceptionList71);
        org.junit.Assert.assertNotNull(iOExceptionList72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        com.google.common.collect.ImmutableList.Builder<java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>> serializableBaseStreamBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(serializableBaseStreamBuilder0);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor68 = serializableList17.iterator();
        java.util.Collection[] collectionArray70 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.io.Serializable>[] serializableCollectionArray71 = (java.util.Collection<java.io.Serializable>[]) collectionArray70;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.io.Serializable>[] serializableCollectionArray72 = serializableList17.toArray(serializableCollectionArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor68);
        org.junit.Assert.assertNotNull(collectionArray70);
        org.junit.Assert.assertNotNull(serializableCollectionArray71);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isAssign();
        node12.setLength(0);
        boolean boolean16 = node12.isHook();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        boolean boolean81 = node80.isNull();
        com.google.javascript.rhino.Node node82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = node80.copyInformationFrom(node82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        boolean boolean3 = node1.isDelProp();
        boolean boolean4 = node1.isLocalResultCall();
        boolean boolean5 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node6 = node1.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(51, nodeArray8, 48, 32);
        boolean boolean12 = node11.isSetterDef();
        java.io.Serializable[] serializableArray30 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList31 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray30);
        boolean boolean32 = serializableList31.isEmpty();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isQualifiedName();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node55 = node46.clonePropsFrom(node53);
        node41.addChildrenToBack(node46);
        boolean boolean57 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = node36.copyInformationFromForTree(node41);
        boolean boolean59 = serializableList31.contains((java.lang.Object) node41);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node72.setSourceFileForTesting("hi!");
        boolean boolean75 = node72.isIf();
        boolean boolean76 = node41.isEquivalentToTyped(node72);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 10, 46);
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node11, node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(serializableArray30);
        org.junit.Assert.assertNotNull(serializableList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isQualifiedName();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node66.copyInformationFromForTree(node71);
        boolean boolean89 = node13.hasChild(node88);
        node13.putBooleanProp(30, false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = new com.google.javascript.rhino.JSTypeExpression(node13, "true");
        boolean boolean95 = jSTypeExpression94.isOptionalArg();
        boolean boolean96 = jSTypeExpression94.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        boolean boolean48 = node27.isIf();
        boolean boolean49 = node27.isHook();
        int int50 = node27.getCharno();
        boolean boolean51 = node27.isDec();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setSourceEncodedPosition(52);
        boolean boolean30 = node19.isCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        int int39 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node40 = node34.srcrefTree(node37);
        boolean boolean41 = node34.isWhile();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isAnd();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node34);
        boolean boolean45 = node44.isOr();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        int int31 = jSDocInfo30.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = null;
        jSDocInfo30.setVisibility(visibility32);
        boolean boolean34 = jSDocInfo30.hasFileOverview();
        boolean boolean35 = jSDocInfo30.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo30.getImplementedInterfaces();
        boolean boolean37 = jSDocInfo30.hasTypedefType();
        node19.setJSDocInfo(jSDocInfo30);
        com.google.javascript.rhino.InputId inputId40 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId42 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId44 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId46 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList47 = com.google.common.collect.ImmutableList.of(inputId40, inputId42, inputId44, inputId46);
        node19.setInputId(inputId46);
        boolean boolean49 = node19.isContinue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(inputIdList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        node13.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.Node node21 = node13.copyInformationFrom(node19);
        boolean boolean22 = node13.isDefaultCase();
        boolean boolean23 = node13.isOr();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) '4', node13);
        com.google.javascript.rhino.Node node25 = node24.getNext();
        boolean boolean26 = node24.isScript();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node27.children();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node27.setJSType(jSType49);
        node27.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        int int7 = node3.getCharno();
        boolean boolean8 = node3.isSetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node3.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQuotedString();
        node4.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        boolean boolean13 = node11.isString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = node17.isDec();
        boolean boolean20 = node17.isAssign();
        boolean boolean21 = node11.isEquivalentTo(node17);
        boolean boolean22 = node17.isDelProp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node25 = node24.getLastSibling();
        int int26 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, 54, (int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(3, node4, node17, node24, node30, 30, 31);
        boolean boolean34 = node33.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node33.setDouble((double) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray25 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray25);
        boolean boolean27 = serializableList26.isEmpty();
        int int28 = serializableList26.size();
        boolean boolean29 = strSet8.contains((java.lang.Object) serializableList26);
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean51 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        // The following exception was thrown during execution in test generation
        try {
            serializableList26.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(serializableArray25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node67.setCharno((int) (byte) 1);
        boolean boolean70 = node67.isGetterDef();
        com.google.javascript.rhino.Node node71 = node61.copyInformationFrom(node67);
        boolean boolean72 = node61.isDelProp();
        boolean boolean73 = node61.isQuotedString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node61.new FileLevelJsDocBuilder();
        boolean boolean75 = node61.isCatch();
        // The following exception was thrown during execution in test generation
        try {
            node61.setDouble((double) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList8 = com.google.common.collect.ImmutableList.of(ternaryValue4, ternaryValue5, ternaryValue6, ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList14 = com.google.common.collect.ImmutableList.of(ternaryValue10, ternaryValue11, ternaryValue12, ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue6.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder17 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder19 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList24 = com.google.common.collect.ImmutableList.of(ternaryValue20, ternaryValue21, ternaryValue22, ternaryValue23);
        java.lang.String str25 = ternaryValue22.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue22.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList36 = com.google.common.collect.ImmutableList.of(ternaryValue32, ternaryValue33, ternaryValue34, ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue27.xor(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList42 = com.google.common.collect.ImmutableList.of(ternaryValue38, ternaryValue39, ternaryValue40, ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.xor(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue32.or(ternaryValue44);
        boolean boolean47 = ternaryValue45.toBoolean(false);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder48 = ternaryValueEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValueList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValueList14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValueList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValueList36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValueList42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder48);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.lang.String[] strArray5 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = com.google.common.collect.ImmutableList.of(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = com.google.common.collect.ImmutableList.of(strArray12);
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]", "(Unknown class name)", "java.io.IOException: java.io.IOException: Unknown class name" };
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "Unknown class name", "" };
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList33 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "true", (java.lang.CharSequence) "true", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "true", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", charSequenceArray32);
        java.lang.String[] strArray39 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of(strArray39);
        java.lang.String[] strArray44 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.lang.Object[] objArray47 = strSet45.toArray();
        boolean boolean49 = strSet45.equals((java.lang.Object) 12);
        java.lang.String[] strArray55 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of(strArray55);
        java.lang.Comparable<java.lang.String>[] strComparableArray57 = strSet45.toArray((java.lang.Comparable<java.lang.String>[]) strArray55);
        com.google.common.collect.ImmutableList<java.lang.CharSequence[]> charSequenceArrayList58 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence[]) strArray12, charSequenceArray17, charSequenceArray32, (java.lang.CharSequence[]) strArray39, (java.lang.CharSequence[]) strArray55);
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList59 = com.google.common.collect.ImmutableList.of(strArray5, strArray39);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertNotNull(charSequenceList33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strComparableArray57);
        org.junit.Assert.assertNotNull(charSequenceArrayList58);
        org.junit.Assert.assertNotNull(strArrayList59);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node13.setType(46);
        boolean boolean31 = node13.isString();
        boolean boolean32 = node13.isNE();
        boolean boolean33 = node13.isDec();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        int int38 = node37.getLineno();
        com.google.javascript.rhino.Node node39 = node37.getNext();
        boolean boolean40 = node37.isString();
        int int41 = serializableList17.lastIndexOf((java.lang.Object) boolean40);
        java.util.stream.Stream<java.io.Serializable> serializableStream42 = serializableList17.stream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator43 = serializableList17.spliterator();
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.replaceAll(serializableUnaryOperator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(serializableStream42);
        org.junit.Assert.assertNotNull(serializableSpliterator43);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList22 = serializableList17.asList();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator23 = serializableList22.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableList22);
        org.junit.Assert.assertNotNull(serializableSpliterator23);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        com.google.javascript.rhino.Node node52 = node49.getNext();
        boolean boolean53 = node49.isFunction();
        boolean boolean54 = node49.isGetElem();
        // The following exception was thrown during execution in test generation
        try {
            double double55 = node49.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        int int20 = staticSourceFile16.getColumnOfOffset((int) (short) 100);
        int int22 = staticSourceFile16.getLineOfOffset((int) (byte) 10);
        boolean boolean23 = staticSourceFile16.isExtern();
        int int25 = staticSourceFile16.getLineOffset(51);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2147483648) + "'", int25 == (-2147483648));
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet11.union(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet11.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean33 = booleanLiteralSet31.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet29.union(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean38 = booleanLiteralSet36.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet34.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet39.union(booleanLiteralSet41);
        boolean boolean44 = booleanLiteralSet39.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        boolean boolean91 = node89.isString();
        boolean boolean92 = node89.isStringKey();
        com.google.javascript.rhino.Node node93 = node76.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node94 = node93.getNext();
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFrom(node93);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder97 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder98 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder97);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder98);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        boolean boolean6 = node4.isBlock();
        node4.removeProp(12);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        boolean boolean29 = node27.isDec();
        boolean boolean30 = node27.isScript();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node22, node27, node34, 0, (int) (short) 0);
        boolean boolean38 = node22.isTrue();
        com.google.javascript.rhino.Node node39 = node4.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean40 = node4.isInc();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isTry();
        boolean boolean47 = node44.isUnscopedQualifiedName();
        boolean boolean48 = node4.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node52.setJSType(jSType54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node61 = node52.clonePropsFrom(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node61.children();
        boolean boolean63 = node61.isNull();
        boolean boolean64 = node61.isThis();
        boolean boolean65 = node61.isParamList();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isQualifiedName();
        boolean boolean71 = node69.isHook();
        int int72 = node69.getLength();
        boolean boolean73 = node69.isAdd();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = null;
        node87.setStaticSourceFile(staticSourceFile88);
        java.lang.Object obj91 = node87.getProp((-2147483648));
        boolean boolean92 = node87.isNoSideEffectsCall();
        node69.putProp((int) 'a', (java.lang.Object) node87);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(15, node44, node61, node69);
        node69.putIntProp(44, 100);
        // The following exception was thrown during execution in test generation
        try {
            node69.setDouble((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 53);
        boolean boolean2 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.lang.String str9 = jSDocInfo0.getLicense();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        boolean boolean12 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean4 = booleanLiteralSet2.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet2.intersection(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet9.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean22 = booleanLiteralSet20.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet20.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet16.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet26.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList32 = com.google.common.collect.ImmutableList.of(booleanLiteralSet7, booleanLiteralSet14, booleanLiteralSet29, booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean36 = booleanLiteralSet34.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean40 = booleanLiteralSet38.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet38.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet34.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean48 = booleanLiteralSet46.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet46.intersection(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean55 = booleanLiteralSet53.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet53.intersection(booleanLiteralSet57);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean62 = booleanLiteralSet60.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean66 = booleanLiteralSet64.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = booleanLiteralSet64.intersection(booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = booleanLiteralSet60.intersection(booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet70.union(booleanLiteralSet72);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList76 = com.google.common.collect.ImmutableList.of(booleanLiteralSet51, booleanLiteralSet58, booleanLiteralSet73, booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList79 = com.google.common.collect.ImmutableList.of(booleanLiteralSet0, booleanLiteralSet31, booleanLiteralSet42, booleanLiteralSet58, booleanLiteralSet78);
        boolean boolean81 = booleanLiteralSet31.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList32);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList76);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 0);
        com.google.javascript.rhino.jstype.JSType jSType2 = null;
        node1.setJSType(jSType2);
        node1.removeProp(54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node6 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Unknown class name");
        java.io.Serializable[] serializableArray18 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList19 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray18);
        boolean boolean20 = serializableList19.isEmpty();
        boolean boolean22 = serializableList19.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList19.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList19.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream25 = serializableList19.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        int int27 = jSDocInfo26.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo26.getParameterNames();
        boolean boolean29 = serializableList19.contains((java.lang.Object) strSet28);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator30 = serializableList19.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor31 = serializableList19.iterator();
        java.io.Serializable[] serializableArray48 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList49 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray48);
        boolean boolean50 = serializableList49.isEmpty();
        boolean boolean52 = serializableList49.contains((java.lang.Object) 52);
        boolean boolean54 = serializableList49.contains((java.lang.Object) (byte) 0);
        boolean boolean55 = serializableList19.containsAll((java.util.Collection<java.io.Serializable>) serializableList49);
        int int56 = serializableList49.size();
        java.lang.String str57 = serializableList49.toString();
        boolean boolean58 = inputId1.equals((java.lang.Object) serializableList49);
        java.lang.String str59 = inputId1.toString();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node63.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        int int66 = jSDocInfo65.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection67 = jSDocInfo65.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList68 = jSDocInfo65.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo65.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo65.getEnumParameterType();
        node63.setJSDocInfo(jSDocInfo65);
        int int72 = node63.getSideEffectFlags();
        boolean boolean73 = inputId1.equals((java.lang.Object) int72);
        org.junit.Assert.assertNotNull(serializableArray18);
        org.junit.Assert.assertNotNull(serializableList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableStream25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator30);
        org.junit.Assert.assertNotNull(serializableItor31);
        org.junit.Assert.assertNotNull(serializableArray48);
        org.junit.Assert.assertNotNull(serializableList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str57, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "InputId: Unknown class name" + "'", str59, "InputId: Unknown class name");
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(nodeCollection67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node63 = node62.getLastSibling();
        boolean boolean64 = node60.isEquivalentTo(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node60.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(nodeIterable66);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        com.google.common.collect.ImmutableList.Builder<java.lang.CharSequence[][][]> charSequenceArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(charSequenceArrayBuilder0);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.Node node77 = node44.getFirstChild();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node44, "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeExpression79.evaluate(jSTypeStaticScope80, jSTypeRegistry81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        node44.setCharno(3);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean89 = node88.isContinue();
        com.google.javascript.rhino.Node node90 = node81.clonePropsFrom(node88);
        boolean boolean91 = node90.isScript();
        com.google.javascript.rhino.Node node92 = node44.copyInformationFrom(node90);
        com.google.javascript.rhino.Node node93 = node44.getLastSibling();
        int int94 = node44.getLineno();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        boolean boolean48 = node27.isIf();
        boolean boolean49 = node27.isHook();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node27.siblings();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isQualifiedName();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node68.setJSType(jSType70);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node77 = node68.clonePropsFrom(node75);
        node63.addChildrenToBack(node68);
        boolean boolean79 = node63.isLocalResultCall();
        com.google.javascript.rhino.Node node80 = node58.copyInformationFromForTree(node63);
        node63.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node83 = node54.clonePropsFrom(node63);
        int int84 = node63.getLength();
        com.google.javascript.rhino.Node node85 = node27.srcrefTree(node63);
        boolean boolean86 = node63.isLabelName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        java.io.Serializable[] serializableArray43 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList44 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray43);
        int int45 = serializableList44.size();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList44.iterator();
        boolean boolean47 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList44);
        java.io.Serializable[] serializableArray64 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray64);
        boolean boolean66 = serializableList65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        int int68 = jSDocInfo67.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection69 = jSDocInfo67.getTypeNodes();
        boolean boolean70 = serializableList65.equals((java.lang.Object) jSDocInfo67);
        java.lang.Object[] objArray71 = serializableList65.toArray();
        boolean boolean72 = serializableList44.equals((java.lang.Object) serializableList65);
        java.io.Serializable[] serializableArray90 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList91 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray90);
        boolean boolean92 = serializableList91.isEmpty();
        boolean boolean94 = serializableList91.contains((java.lang.Object) 52);
        boolean boolean96 = serializableList91.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray97 = serializableList91.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor98 = serializableList91.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = serializableList44.addAll(30, (java.util.Collection<java.io.Serializable>) serializableList91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertNotNull(serializableArray43);
        org.junit.Assert.assertNotNull(serializableList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(serializableItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(serializableArray64);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(nodeCollection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(serializableArray90);
        org.junit.Assert.assertNotNull(serializableList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor98);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(42, nodeArray4, 32, 12);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(12, nodeArray4);
        boolean boolean14 = node12.getBooleanProp(32);
        node12.setSourceEncodedPosition((-8));
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node81 = node80.removeFirstChild();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, node37, node80, 53, 50);
        boolean boolean85 = node37.isUnscopedQualifiedName();
        boolean boolean86 = node37.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType14 = node12.getJSType();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        node18.setJSDocInfo(jSDocInfo20);
        node18.detachChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        int int27 = jSDocInfo26.getImplementedInterfaceCount();
        boolean boolean28 = jSDocInfo26.hasType();
        java.lang.String str29 = jSDocInfo26.getSourceName();
        boolean boolean30 = jSDocInfo26.isDefine();
        node18.putProp(0, (java.lang.Object) boolean30);
        com.google.javascript.rhino.Node node32 = node12.copyInformationFrom(node18);
        node32.setSourceFileForTesting("unknown");
        boolean boolean35 = node32.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        boolean boolean8 = node3.wasEmptyNode();
        boolean boolean9 = node3.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isFalse();
        java.io.Serializable[] serializableArray48 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList49 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray48);
        boolean boolean50 = serializableList49.isEmpty();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isQualifiedName();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        node59.addChildrenToBack(node64);
        boolean boolean75 = node59.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = node54.copyInformationFromForTree(node59);
        boolean boolean77 = serializableList49.contains((java.lang.Object) node59);
        int int78 = node59.getSourcePosition();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isLabelName();
        boolean boolean84 = node82.isDec();
        boolean boolean85 = node82.isNoSideEffectsCall();
        node59.addChildToBack(node82);
        boolean boolean87 = node59.hasChildren();
        com.google.javascript.rhino.Node node88 = node29.srcrefTree(node59);
        com.google.javascript.rhino.Node node89 = node59.getLastChild();
        boolean boolean90 = node89.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node89.siblings();
        int int92 = serializableList17.lastIndexOf((java.lang.Object) node89);
        java.util.Iterator<java.io.Serializable> serializableItor93 = serializableList17.iterator();
        boolean boolean94 = serializableList17.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor96 = serializableList17.listIterator((int) (short) 1);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(serializableArray48);
        org.junit.Assert.assertNotNull(serializableList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(serializableItor93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(serializableItor96);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isTry();
        boolean boolean64 = node60.isVarArgs();
        com.google.javascript.rhino.Node node65 = node60.getParent();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isLabelName();
        boolean boolean71 = node69.isDec();
        boolean boolean72 = node69.isNoSideEffectsCall();
        boolean boolean73 = node69.isIf();
        com.google.javascript.rhino.Node node74 = node69.getLastSibling();
        node74.setLineno(45);
        boolean boolean77 = node74.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        int int80 = jSDocInfo79.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = null;
        jSDocInfo79.setVisibility(visibility81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getEnumParameterType();
        java.lang.String str84 = jSDocInfo79.getReturnDescription();
        boolean boolean85 = jSDocInfo79.hasEnumParameterType();
        boolean boolean86 = jSDocInfo79.isExpose();
        node74.putProp((int) (short) 0, (java.lang.Object) jSDocInfo79);
        boolean boolean88 = node74.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = node65.useSourceInfoFromForTree(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        int int59 = node50.getType();
        node50.setLineno(53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        int int63 = jSDocInfo62.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = null;
        jSDocInfo62.setVisibility(visibility64);
        java.lang.String str66 = jSDocInfo62.getMeaning();
        java.lang.String str67 = jSDocInfo62.getLicense();
        boolean boolean68 = jSDocInfo62.isConstructor();
        java.lang.String str69 = jSDocInfo62.getBlockDescription();
        boolean boolean70 = jSDocInfo62.hasFileOverview();
        node50.setJSDocInfo(jSDocInfo62);
        boolean boolean72 = jSDocInfo62.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setSourceEncodedPosition(52);
        boolean boolean30 = node19.isCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        int int39 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node40 = node34.srcrefTree(node37);
        boolean boolean41 = node34.isWhile();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isAnd();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node34);
        boolean boolean45 = node34.isCatch();
        boolean boolean46 = node34.isDo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        int int4 = typePosition0.getEndLine();
        int int5 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList5 = com.google.common.collect.ImmutableList.of(ternaryValue1, ternaryValue2, ternaryValue3, ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList11 = com.google.common.collect.ImmutableList.of(ternaryValue7, ternaryValue8, ternaryValue9, ternaryValue10);
        java.lang.String str12 = ternaryValue9.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList17 = com.google.common.collect.ImmutableList.of(ternaryValue13, ternaryValue14, ternaryValue15, ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue9.or(ternaryValue14);
        java.lang.String str19 = ternaryValue14.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue6.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList25 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue22, ternaryValue23, ternaryValue24);
        java.lang.String str26 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList31 = com.google.common.collect.ImmutableList.of(ternaryValue27, ternaryValue28, ternaryValue29, ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue23.or(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue32.not();
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue20.xor(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList42 = com.google.common.collect.ImmutableList.of(ternaryValue38, ternaryValue39, ternaryValue40, ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue20.or(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue2.and(ternaryValue40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder45 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue44);
        boolean boolean47 = ternaryValue44.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValueList5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValueList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueList17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "true" + "'", str19, "true");
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValueList31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValueList42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(stringPositionList0);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        java.lang.String[] strArray11 = new java.lang.String[] { "InputId: true", "JSDocInfo", "java.io.IOException: java.io.IOException", "(InputId: true)", "hi!", "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", "CALL hi!", "Unknown class name", "hi!", "Unknown class name", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        int int14 = strSet12.size();
        java.util.Iterator<java.lang.String> strItor15 = strSet12.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strSet12.iterator();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        node24.putIntProp((int) (short) 1, 38);
        boolean boolean47 = node24.isAssignAdd();
        boolean boolean48 = node24.isContinue();
        boolean boolean49 = node24.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: JSDocInfo");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        com.google.javascript.rhino.Node node9 = node3.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node9.detachChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node27.children();
        boolean boolean49 = node27.isGetProp();
        com.google.javascript.rhino.Node node50 = node27.removeFirstChild();
        com.google.javascript.rhino.Node node51 = node27.getLastChild();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = new com.google.javascript.rhino.JSTypeExpression(node3, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        com.google.javascript.rhino.Node node8 = jSTypeExpression7.getRoot();
        com.google.javascript.rhino.Node node9 = jSTypeExpression7.getRoot();
        boolean boolean10 = jSTypeExpression7.isVarArgs();
        com.google.javascript.rhino.Node node11 = jSTypeExpression7.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node11.toString(false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        node46.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node66 = node37.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isInstanceOf();
        boolean boolean72 = node70.isComma();
        boolean boolean73 = node37.isEquivalentTo(node70);
        com.google.javascript.rhino.Node node74 = node13.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        boolean boolean80 = node78.isDec();
        boolean boolean81 = node78.isAssign();
        boolean boolean82 = node78.isIn();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(4095, node13, node78, 29, (int) '4');
        boolean boolean86 = node78.isFor();
        boolean boolean88 = node78.getBooleanProp((int) '#');
        boolean boolean89 = node78.isReturn();
        com.google.javascript.rhino.Node node90 = node78.getLastSibling();
        boolean boolean91 = node90.isAssign();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList6 = com.google.common.collect.ImmutableList.of(ternaryValue2, ternaryValue3, ternaryValue4, ternaryValue5);
        java.lang.String str7 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList12 = com.google.common.collect.ImmutableList.of(ternaryValue8, ternaryValue9, ternaryValue10, ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue4.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.xor(ternaryValue14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList22 = ternaryValueEnumBuilder21.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        java.lang.String str28 = ternaryValue25.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue25.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue30.xor(ternaryValue35);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder41 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder42 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList43 = ternaryValueEnumBuilder20.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList44 = ternaryValueEnumBuilder20.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList45 = ternaryValueEnumBuilder20.build();
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValueList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValueList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder20);
        org.junit.Assert.assertNotNull(ternaryValueEnumList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "true" + "'", str28, "true");
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder41);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder42);
        org.junit.Assert.assertNotNull(ternaryValueEnumList43);
        org.junit.Assert.assertNotNull(ternaryValueEnumList44);
        org.junit.Assert.assertNotNull(ternaryValueEnumList45);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue7.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue12.xor(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = jSDocInfo58.getTypeNodes();
        java.lang.String str61 = jSDocInfo58.getDescription();
        boolean boolean62 = jSDocInfo58.hasModifies();
        boolean boolean63 = jSDocInfo58.isConstant();
        int int64 = serializableList24.indexOf((java.lang.Object) jSDocInfo58);
        boolean boolean65 = jSDocInfo58.isInterface();
        int int66 = jSDocInfo58.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo58.getType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(jSTypeExpression67);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean6 = sideEffectFlags4.areAllFlagsSet();
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean8 = strSet2.remove((java.lang.Object) sideEffectFlags4);
        int int9 = strSet2.size();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int11 = typePosition10.getStartLine();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        node26.addChildrenToBack(node31);
        boolean boolean42 = node26.isLocalResultCall();
        com.google.javascript.rhino.Node node43 = node21.copyInformationFromForTree(node26);
        node26.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node46 = node17.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isTrue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node26, node50, node56, node70, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) -1, node73);
        typePosition10.setItem(node73);
        boolean boolean76 = typePosition10.hasBrackets();
        int int77 = typePosition10.getPositionOnEndLine();
        int int78 = typePosition10.getPositionOnEndLine();
        boolean boolean79 = strSet2.equals((java.lang.Object) typePosition10);
        boolean boolean81 = strSet2.remove((java.lang.Object) "(Not declared as a type name)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("false");
        boolean boolean11 = jSDocInfo0.containsDeclaration();
        java.lang.String str12 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasModifies();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        int int15 = jSDocInfo14.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = null;
        jSDocInfo14.setVisibility(visibility16);
        boolean boolean18 = jSDocInfo14.hasFileOverview();
        boolean boolean19 = jSDocInfo14.isJavaDispatch();
        boolean boolean20 = jSDocInfo14.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean23 = jSDocInfo14.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean25 = jSDocInfo14.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo14.getReturnType();
        boolean boolean27 = strSet13.equals((java.lang.Object) jSDocInfo14);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo14.getType();
        int int29 = jSDocInfo14.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.lang.Object[] objArray66 = serializableList36.toArray();
        com.google.common.collect.ImmutableList<java.util.Collection<java.io.Serializable>> serializableCollectionList67 = com.google.common.collect.ImmutableList.of();
        boolean boolean68 = serializableList36.equals((java.lang.Object) serializableCollectionList67);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = serializableList36.subList((int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableCollectionList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node3.useSourceInfoIfMissingFrom(node51);
        boolean boolean70 = node3.isGetterDef();
        boolean boolean71 = node3.isNumber();
        com.google.javascript.rhino.Node node72 = node3.getFirstChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        int int4 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getEndLine();
        stringPosition0.setItem("(STRING Unknown class name 40\n)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "JSDocInfo");
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node16 = node7.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        boolean boolean22 = node20.isString();
        com.google.javascript.rhino.Node node23 = node7.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.InputId inputId24 = null;
        node23.setInputId(inputId24);
        java.lang.Object obj27 = node23.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isString();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.InputId inputId48 = null;
        node47.setInputId(inputId48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node23, node47, node58, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId79 = node58.getInputId();
        boolean boolean80 = node58.isReturn();
        boolean boolean81 = node58.isLabelName();
        com.google.javascript.rhino.Node node82 = node2.clonePropsFrom(node58);
        boolean boolean83 = node2.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(inputId79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isInc();
        boolean boolean30 = node25.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        int int89 = serializableList86.indexOf((java.lang.Object) ternaryValue88);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList94 = com.google.common.collect.ImmutableList.of(ternaryValue90, ternaryValue91, ternaryValue92, ternaryValue93);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue95 = ternaryValue88.and(ternaryValue91);
        java.lang.String str96 = ternaryValue88.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue97 = ternaryValue88.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue98 = ternaryValue88.not();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValueList94);
        org.junit.Assert.assertNotNull(ternaryValue95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "true" + "'", str96, "true");
        org.junit.Assert.assertNotNull(ternaryValue97);
        org.junit.Assert.assertNotNull(ternaryValue98);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node4.setCharno((int) (byte) 1);
        boolean boolean7 = node4.isGetterDef();
        java.lang.Object obj9 = node4.getProp(53);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isContinue();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node19 = node10.clonePropsFrom(node17);
        node5.addChildrenToBack(node10);
        boolean boolean21 = node10.isParamList();
        boolean boolean22 = node10.isAssignAdd();
        boolean boolean23 = node10.isQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, node1, node10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node3.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        java.lang.String str19 = serializableList17.toString();
        java.lang.Object[] objArray20 = serializableList17.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str19, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor25 = serializableList24.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertNotNull(serializableItor25);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node67.setCharno((int) (byte) 1);
        boolean boolean70 = node67.isGetterDef();
        com.google.javascript.rhino.Node node71 = node61.copyInformationFrom(node67);
        boolean boolean72 = node61.isDelProp();
        boolean boolean73 = node61.isQuotedString();
        boolean boolean74 = node61.isEmpty();
        node61.setVarArgs(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        int int12 = jSDocInfo11.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = null;
        jSDocInfo11.setVisibility(visibility13);
        boolean boolean15 = jSDocInfo11.hasFileOverview();
        boolean boolean16 = jSDocInfo11.isJavaDispatch();
        boolean boolean17 = jSDocInfo11.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo11.getExtendedInterfaces();
        boolean boolean19 = jSDocInfo11.hasBaseType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo11.getSuppressions();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo11.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = strSet10.remove((java.lang.Object) jSDocInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node3.getAncestors();
        boolean boolean22 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        int int24 = jSDocInfo23.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = null;
        jSDocInfo23.setVisibility(visibility25);
        boolean boolean27 = jSDocInfo23.hasFileOverview();
        boolean boolean28 = jSDocInfo23.isJavaDispatch();
        boolean boolean29 = jSDocInfo23.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo23.getExtendedInterfaces();
        java.lang.String str31 = jSDocInfo23.getLicense();
        boolean boolean32 = jSDocInfo23.isNoSideEffects();
        jSDocInfo23.setDeprecated(false);
        node3.setJSDocInfo(jSDocInfo23);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo23.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(visibility36);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator54 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray71 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray71);
        boolean boolean73 = serializableList72.isEmpty();
        boolean boolean75 = serializableList72.contains((java.lang.Object) 52);
        int int77 = serializableList72.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor78 = serializableList72.iterator();
        java.util.List<java.io.Serializable> serializableList81 = serializableList72.subList((int) (short) 10, 16);
        boolean boolean83 = serializableList81.equals((java.lang.Object) 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = serializableList17.addAll((java.util.Collection<java.io.Serializable>) serializableList81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator54);
        org.junit.Assert.assertNotNull(serializableArray71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(serializableItor78);
        org.junit.Assert.assertNotNull(serializableList81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node13.children();
        boolean boolean15 = node13.isNull();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isString();
        com.google.javascript.rhino.Node node35 = node19.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        java.lang.Object obj39 = node35.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(54, node13, node35);
        boolean boolean41 = node35.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        boolean boolean37 = node30.isNoSideEffectsCall();
        boolean boolean38 = node30.isName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = node30.isUnscopedQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NAME 1 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.reverse();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList24.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        boolean boolean61 = jSDocInfo59.hasType();
        java.lang.String str62 = jSDocInfo59.getSourceName();
        boolean boolean63 = jSDocInfo59.isDefine();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo59.getModifies();
        boolean boolean65 = serializableList24.contains((java.lang.Object) strSet64);
        strSet64.clear();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        node57.detachChildren();
        boolean boolean59 = node57.isQuotedString();
        boolean boolean60 = node57.isScript();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = node57.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        boolean boolean20 = node17.isStringKey();
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node17);
        boolean boolean22 = node4.isIn();
        node4.setType(42);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        boolean boolean45 = node41.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node41.siblings();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, node4, node41);
        java.lang.Object obj49 = node47.getProp(0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        java.lang.Comparable<java.lang.String> strComparable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList11 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "java.io.IOException", (java.lang.Comparable<java.lang.String>) "InputId: true", (java.lang.Comparable<java.lang.String>) "(STRING Unknown class name 40\n)", (java.lang.Comparable<java.lang.String>) "TYPEOF 10\n", (java.lang.Comparable<java.lang.String>) "java.io.IOException: java.io.IOException", strComparable5, (java.lang.Comparable<java.lang.String>) "java.io.IOException: NUMBER -1.0 12", (java.lang.Comparable<java.lang.String>) "(java.io.IOException: java.io.IOException)", (java.lang.Comparable<java.lang.String>) "(java.io.IOException: Unknown class name)", (java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "CALL hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 5");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = serializableList41.contains((java.lang.Object) node51);
        java.util.Iterator<java.io.Serializable> serializableItor70 = serializableList41.iterator();
        boolean boolean71 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        java.lang.Object obj72 = null;
        boolean boolean73 = serializableList41.contains(obj72);
        int int74 = serializableList41.size();
        java.lang.Object[] objArray75 = serializableList41.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 16 + "'", int74 == 16);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        boolean boolean81 = node80.isVoid();
        com.google.javascript.rhino.Node node82 = node80.getParent();
        boolean boolean83 = node82.isComma();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray9 = strSet8.toArray();
        int int10 = strSet8.size();
        java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>[] serializableBaseStreamArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.BaseStream<java.io.Serializable, java.util.stream.Stream<java.io.Serializable>>[] serializableBaseStreamArray12 = strSet8.toArray(serializableBaseStreamArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        java.lang.String str3 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        boolean boolean4 = node2.isBlock();
        com.google.javascript.rhino.Node node5 = node2.getFirstChild();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isTrue();
        boolean boolean12 = node9.isFromExterns();
        boolean boolean13 = node9.isSwitch();
        boolean boolean14 = node9.isUnscopedQualifiedName();
        boolean boolean15 = node9.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildrenToFront(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(9, 39, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        int int10 = jSDocInfo9.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo9.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo9.getEnumParameterType();
        node7.setJSDocInfo(jSDocInfo9);
        node3.setJSDocInfo(jSDocInfo9);
        boolean boolean17 = jSDocInfo9.isNoSideEffects();
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        node3.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isAssignAdd();
        boolean boolean64 = node60.isTry();
        boolean boolean65 = node60.isStringKey();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("InputId: Unknown class name");
        boolean boolean68 = node67.isDo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node69 = node60.removeChildAfter(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        java.io.Serializable[] serializableArray43 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList44 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray43);
        int int45 = serializableList44.size();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList44.iterator();
        boolean boolean47 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList44);
        java.io.Serializable[] serializableArray64 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray64);
        boolean boolean66 = serializableList65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        int int68 = jSDocInfo67.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection69 = jSDocInfo67.getTypeNodes();
        boolean boolean70 = serializableList65.equals((java.lang.Object) jSDocInfo67);
        java.lang.Object[] objArray71 = serializableList65.toArray();
        boolean boolean72 = serializableList44.equals((java.lang.Object) serializableList65);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor74 = serializableList44.listIterator(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (53) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertNotNull(serializableArray43);
        org.junit.Assert.assertNotNull(serializableList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(serializableItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(serializableArray64);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(nodeCollection69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.hasThisType();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        boolean boolean8 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        boolean boolean6 = node3.isTrue();
        java.util.Set<java.lang.String> strSet7 = null;
        node3.setDirectives(strSet7);
        boolean boolean9 = node3.isNew();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str12 = jSDocInfo0.getLendsName();
        java.lang.String str14 = jSDocInfo0.getDescriptionForParameter("hi!");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        node28.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node48 = node19.clonePropsFrom(node28);
        com.google.javascript.rhino.Node node49 = node48.getLastSibling();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean52 = node51.isBreak();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(0, node48, node51, (-1), 43);
        com.google.javascript.rhino.Node node56 = node48.getLastSibling();
        node56.putIntProp(53, (-2147483648));
        int int60 = node56.getCharno();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node73.setStaticSourceFile(staticSourceFile74);
        java.lang.Object obj77 = node73.getProp((-2147483648));
        boolean boolean78 = node73.isQualifiedName();
        java.lang.Object obj80 = node73.getProp(48);
        boolean boolean81 = node73.isLabelName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node73.siblings();
        com.google.javascript.rhino.Node node83 = node56.useSourceInfoIfMissingFromForTree(node73);
        jSDocInfo0.setAssociatedNode(node56);
        boolean boolean85 = node56.isComma();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node12, "true");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isQualifiedName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        node48.addChildrenToBack(node53);
        boolean boolean64 = node48.isLocalResultCall();
        com.google.javascript.rhino.Node node65 = node43.copyInformationFromForTree(node48);
        node48.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node68 = node39.clonePropsFrom(node48);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isInstanceOf();
        boolean boolean74 = node72.isComma();
        boolean boolean75 = node39.isEquivalentTo(node72);
        boolean boolean76 = node72.isComma();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(51, node72, node80, (int) (short) 10, (int) ' ');
        java.lang.String str84 = node72.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node72.siblings();
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildToFront(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(nodeIterable85);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node14 = node5.clonePropsFrom(node12);
        boolean boolean15 = node5.isVar();
        boolean boolean16 = node5.isCase();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(10, node5, node18);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node32 = node23.clonePropsFrom(node30);
        boolean boolean33 = node32.isQuotedString();
        int int34 = node32.getCharno();
        boolean boolean35 = node32.isDec();
        boolean boolean36 = node32.isTry();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(15, node18, node32, (int) (byte) 1, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isQualifiedName();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node66.copyInformationFromForTree(node71);
        boolean boolean89 = node13.hasChild(node88);
        node13.putBooleanProp(30, false);
        int int93 = node13.getSourceOffset();
        boolean boolean94 = node13.isVarArgs();
        java.lang.Object obj96 = null;
        node13.putProp(39, obj96);
        // The following exception was thrown during execution in test generation
        try {
            node13.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        node14.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node34 = node5.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isTrue();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 0, node14, node38, node44, node58, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) -1, node61);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node71.setJSType(jSType73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isContinue();
        com.google.javascript.rhino.Node node80 = node71.clonePropsFrom(node78);
        node66.addChildrenToBack(node71);
        boolean boolean82 = node66.isLocalResultCall();
        int int83 = node66.getLength();
        com.google.javascript.rhino.Node node84 = node66.getFirstChild();
        int int85 = node62.getIndexOfChild(node66);
        boolean boolean86 = node62.hasChildren();
        boolean boolean87 = node62.isScript();
        boolean boolean88 = node62.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node62.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(staticSourceFile89);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        int int88 = serializableList86.size();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator89 = serializableList86.spliterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream90 = serializableList86.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList93 = serializableList86.subList(41, (-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (41) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertNotNull(serializableSpliterator89);
        org.junit.Assert.assertNotNull(serializableStream90);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType14 = node12.getJSType();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        node18.setJSDocInfo(jSDocInfo20);
        node18.detachChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        int int27 = jSDocInfo26.getImplementedInterfaceCount();
        boolean boolean28 = jSDocInfo26.hasType();
        java.lang.String str29 = jSDocInfo26.getSourceName();
        boolean boolean30 = jSDocInfo26.isDefine();
        node18.putProp(0, (java.lang.Object) boolean30);
        com.google.javascript.rhino.Node node32 = node12.copyInformationFrom(node18);
        boolean boolean33 = node32.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        com.google.javascript.rhino.Node node17 = node3.getAncestor(44);
        boolean boolean18 = node3.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean5 = sideEffectFlags4.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags10.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags15 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags15.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList19 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags4, sideEffectFlags7, sideEffectFlags10, sideEffectFlags13, sideEffectFlags15, sideEffectFlags18);
        sideEffectFlags4.setReturnsTainted();
        sideEffectFlags4.setThrows();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList19);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(nodeCollection10);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isAssignAdd();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        boolean boolean69 = node67.isQuotedString();
        boolean boolean70 = node67.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        boolean boolean84 = node83.isQuotedString();
        boolean boolean85 = node83.isOptionalArg();
        boolean boolean86 = node83.isThis();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean91 = node90.isContinue();
        boolean boolean92 = node90.isDo();
        node90.setSourceEncodedPosition(2);
        int int95 = node90.getType();
        boolean boolean96 = node83.isEquivalentTo(node90);
        boolean boolean97 = node67.isEquivalentToTyped(node90);
        node60.addChildToBack(node67);
        boolean boolean99 = node60.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        boolean boolean57 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.asList();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableList58);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        java.io.IOException iOException1 = new java.io.IOException("Not declared as a constructor");
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(38, "((Not declared as a type name))");
        boolean boolean3 = node2.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        node9.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node9);
        boolean boolean30 = node9.isThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node13.children();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        boolean boolean77 = node76.isQuotedString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isLabelName();
        boolean boolean83 = node81.isDec();
        boolean boolean84 = node81.isScript();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(0, node76, node81, node88, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node92 = node91.cloneNode();
        com.google.javascript.rhino.Node node93 = node13.srcrefTree(node91);
        boolean boolean94 = node93.isContinue();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        boolean boolean25 = serializableList24.isEmpty();
        boolean boolean26 = serializableList24.isEmpty();
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException31 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = serializableList24.add((java.io.Serializable) iOException28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        int int8 = node3.getType();
        boolean boolean9 = node3.isFalse();
        int int10 = node3.getLineno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        boolean boolean7 = node3.isInc();
        java.lang.Object obj9 = node3.getProp(51);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node22.setSourceFileForTesting("hi!");
        boolean boolean25 = node22.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node22.getStaticSourceFile();
        int int28 = staticSourceFile26.getLineOffset(31);
        int int30 = staticSourceFile26.getColumnOfOffset(39);
        int int32 = staticSourceFile26.getLineOfOffset(2);
        node3.setStaticSourceFile(staticSourceFile26);
        boolean boolean34 = node3.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2147483648) + "'", int28 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator26 = serializableList17.spliterator();
        boolean boolean27 = serializableList17.isEmpty();
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        boolean boolean73 = serializableList45.contains((java.lang.Object) node55);
        java.util.Iterator<java.io.Serializable> serializableItor74 = serializableList45.iterator();
        java.lang.Object[] objArray75 = serializableList45.toArray();
        boolean boolean76 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList45);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator77 = serializableList17.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor78 = serializableList17.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator77);
        org.junit.Assert.assertNotNull(serializableItor78);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        boolean boolean41 = node33.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        boolean boolean20 = node16.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node16.siblings();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node22 = node16.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 37);
        com.google.javascript.rhino.Node node2 = node1.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssign();
        boolean boolean6 = node3.isStringKey();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getBaseType();
        node10.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isQuotedString();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        boolean boolean39 = node37.isString();
        com.google.javascript.rhino.Node node40 = node24.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.InputId inputId41 = null;
        node40.setInputId(inputId41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int49 = node47.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        int int51 = jSDocInfo50.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = null;
        jSDocInfo50.setVisibility(visibility52);
        boolean boolean54 = jSDocInfo50.hasFileOverview();
        boolean boolean55 = jSDocInfo50.isJavaDispatch();
        boolean boolean56 = jSDocInfo50.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo50.getExtendedInterfaces();
        java.lang.String str58 = jSDocInfo50.getLicense();
        boolean boolean59 = jSDocInfo50.hasBaseType();
        boolean boolean60 = jSDocInfo50.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        int int62 = jSDocInfo61.getImplementedInterfaceCount();
        boolean boolean63 = jSDocInfo61.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        int int66 = jSDocInfo65.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isQualifiedName();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        boolean boolean77 = node75.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList78 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo12, (java.io.Serializable) boolean20, (java.io.Serializable) node40, (java.io.Serializable) int49, (java.io.Serializable) boolean60, (java.io.Serializable) boolean63, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo65, (java.io.Serializable) node70, (java.io.Serializable) boolean77);
        boolean boolean79 = node70.isCatch();
        int int80 = node70.getSourcePosition();
        com.google.javascript.rhino.Node node81 = node3.srcref(node70);
        boolean boolean82 = node3.isNE();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(serializableList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isWith();
        boolean boolean27 = node3.isName();
        boolean boolean28 = node3.isAssignAdd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        node61.setWasEmptyNode(true);
        boolean boolean65 = node61.isParamList();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray25 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray25);
        boolean boolean27 = serializableList26.isEmpty();
        int int28 = serializableList26.size();
        boolean boolean29 = strSet8.contains((java.lang.Object) serializableList26);
        java.util.stream.Stream<java.io.Serializable> serializableStream30 = serializableList26.stream();
        java.util.Iterator<java.io.Serializable> serializableItor31 = serializableList26.iterator();
        java.util.Iterator<java.io.Serializable> serializableItor32 = serializableList26.iterator();
        java.io.Serializable[] serializableArray49 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList50 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray49);
        boolean boolean51 = serializableList50.isEmpty();
        boolean boolean53 = serializableList50.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream54 = serializableList50.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream55 = serializableList50.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList50.parallelStream();
        java.lang.String str57 = serializableList50.toString();
        java.io.Serializable serializable59 = serializableList50.get((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = serializableList26.retainAll((java.util.Collection<java.io.Serializable>) serializableList50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(serializableArray25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableStream30);
        org.junit.Assert.assertNotNull(serializableItor31);
        org.junit.Assert.assertNotNull(serializableItor32);
        org.junit.Assert.assertNotNull(serializableArray49);
        org.junit.Assert.assertNotNull(serializableList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableStream54);
        org.junit.Assert.assertNotNull(serializableStream55);
        org.junit.Assert.assertNotNull(serializableStream56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str57, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + 10.0f + "'", serializable59, 10.0f);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setSourceEncodedPosition(52);
        boolean boolean30 = node19.isCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        int int39 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node40 = node34.srcrefTree(node37);
        boolean boolean41 = node34.isWhile();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isAnd();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node34);
        node34.setSourceEncodedPosition(100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("Named type with empty name component");
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker10.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker10.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker10.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker10.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(typePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(nodeSourcePosition17);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        int int67 = typePosition0.getEndLine();
        int int68 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = null;
        node81.setStaticSourceFile(staticSourceFile82);
        com.google.javascript.rhino.Node node84 = node81.getLastSibling();
        typePosition0.setItem(node81);
        int int86 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        int int27 = jSDocInfo26.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = null;
        jSDocInfo26.setVisibility(visibility28);
        boolean boolean30 = jSDocInfo26.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo26.setVisibility(visibility31);
        java.lang.String str33 = jSDocInfo26.getVersion();
        boolean boolean34 = jSDocInfo26.isConstructor();
        boolean boolean35 = jSDocInfo26.isOverride();
        boolean boolean36 = serializableList24.equals((java.lang.Object) boolean35);
        java.util.Collection<java.io.Serializable> serializableCollection37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = serializableList24.containsAll(serializableCollection37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        node63.setOptionalArg(false);
        boolean boolean68 = node63.isSetterDef();
        node63.addSuppression("(STRING Unknown class name 40\n)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        int int19 = jSDocInfo18.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = null;
        jSDocInfo18.setVisibility(visibility20);
        boolean boolean22 = jSDocInfo18.hasFileOverview();
        boolean boolean23 = jSDocInfo18.isJavaDispatch();
        boolean boolean24 = jSDocInfo18.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo18.getExtendedInterfaces();
        boolean boolean27 = jSDocInfo18.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo18.getMeaning();
        jSDocInfo18.addSuppression("hi!");
        node12.setJSDocInfo(jSDocInfo18);
        boolean boolean32 = jSDocInfo18.isExpose();
        boolean boolean33 = jSDocInfo18.hasReturnType();
        boolean boolean34 = jSDocInfo18.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.util.Iterator<java.lang.String> strItor80 = strSet4.iterator();
        java.lang.Object obj81 = null;
        boolean boolean82 = strSet4.equals(obj81);
        int int83 = strSet4.size();
        boolean boolean84 = strSet4.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "TYPEOF 10\n", 43, (-1));
        java.io.Serializable[] serializableArray21 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList22 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray21);
        boolean boolean23 = serializableList22.isEmpty();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node46 = node37.clonePropsFrom(node44);
        node32.addChildrenToBack(node37);
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node49 = node27.copyInformationFromForTree(node32);
        boolean boolean50 = serializableList22.contains((java.lang.Object) node32);
        int int51 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        boolean boolean57 = node55.isDec();
        boolean boolean58 = node55.isNoSideEffectsCall();
        node32.addChildToBack(node55);
        com.google.javascript.rhino.Node node60 = node4.srcref(node32);
        com.google.javascript.rhino.InputId inputId61 = node60.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(serializableArray21);
        org.junit.Assert.assertNotNull(serializableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(inputId61);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node15 = node6.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        boolean boolean21 = node19.isString();
        com.google.javascript.rhino.Node node22 = node6.useSourceInfoFromForTree(node19);
        namePosition0.setItem(node22);
        boolean boolean24 = node22.isFromExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 44);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(48, nodeArray4, 48, 40);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(44, nodeArray4);
        boolean boolean13 = node12.isFor();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        int int3 = node1.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        boolean boolean10 = node8.isDo();
        node8.setSourceEncodedPosition(2);
        int int13 = node8.getSideEffectFlags();
        node1.addChildToFront(node8);
        java.lang.String str15 = node1.toString();
        java.lang.Appendable appendable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING Unknown class name" + "'", str15, "STRING Unknown class name");
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        int int42 = jSDocInfo41.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = null;
        jSDocInfo41.setVisibility(visibility43);
        boolean boolean45 = jSDocInfo41.hasFileOverview();
        boolean boolean46 = jSDocInfo41.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo41.getImplementedInterfaces();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        boolean boolean53 = node51.isBlock();
        node51.removeProp(12);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        boolean boolean70 = node69.isQuotedString();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        boolean boolean76 = node74.isDec();
        boolean boolean77 = node74.isScript();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(0, node69, node74, node81, 0, (int) (short) 0);
        boolean boolean85 = node69.isTrue();
        com.google.javascript.rhino.Node node86 = node51.useSourceInfoIfMissingFromForTree(node69);
        jSDocInfo41.setAssociatedNode(node86);
        node36.setJSDocInfo(jSDocInfo41);
        java.util.Collection<java.lang.String> strCollection89 = jSDocInfo41.getReferences();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(strCollection89);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        java.util.ListIterator<java.io.Serializable> serializableItor25 = serializableList17.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertNotNull(serializableItor25);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.InputId inputId4 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId6 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId8 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId10 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList11 = com.google.common.collect.ImmutableList.of(inputId4, inputId6, inputId8, inputId10);
        java.lang.String str12 = inputId8.getIdName();
        java.lang.String str13 = inputId8.getIdName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node26.setSourceFileForTesting("hi!");
        boolean boolean29 = node26.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node26.getStaticSourceFile();
        java.lang.String str31 = staticSourceFile30.getName();
        boolean boolean32 = inputId8.equals((java.lang.Object) staticSourceFile30);
        java.lang.String[] strArray36 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.Object[] objArray39 = strSet37.toArray();
        java.io.Serializable[] serializableArray56 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray56);
        boolean boolean58 = serializableList57.isEmpty();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isQualifiedName();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        node67.addChildrenToBack(node72);
        boolean boolean83 = node67.isLocalResultCall();
        com.google.javascript.rhino.Node node84 = node62.copyInformationFromForTree(node67);
        boolean boolean85 = serializableList57.contains((java.lang.Object) node67);
        java.util.Iterator<java.io.Serializable> serializableItor86 = serializableList57.iterator();
        boolean boolean87 = strSet37.containsAll((java.util.Collection<java.io.Serializable>) serializableList57);
        java.lang.Object[] objArray88 = serializableList57.toArray();
        boolean boolean89 = serializableList57.isEmpty();
        boolean boolean90 = serializableList57.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList91 = serializableList57.asList();
        boolean boolean92 = inputId8.equals((java.lang.Object) serializableList91);
        int int93 = serializableList91.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(inputIdList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "true" + "'", str13, "true");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(staticSourceFile30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray56);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(serializableItor86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(serializableList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 16 + "'", int93 == 16);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isDec();
        boolean boolean12 = node9.isAssign();
        boolean boolean13 = node3.isEquivalentTo(node9);
        boolean boolean14 = node9.isThis();
        node9.addSuppression("Named type with empty name component");
        node9.putIntProp((-1), (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        java.util.Set<java.lang.String> strSet72 = jSDocInfo5.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Marker marker73 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker74.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker76 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker76.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition79 = marker78.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker80 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker81 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker84 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker85 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList86 = com.google.common.collect.ImmutableList.of(marker73, marker74, marker76, marker78, marker80, marker81, marker82, marker83, marker84, marker85);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition87 = marker76.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition88 = marker76.getNameNode();
        boolean boolean89 = strSet72.equals((java.lang.Object) marker76);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition90 = marker76.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition91 = marker76.getNameNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNull(stringPosition75);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(stringPosition79);
        org.junit.Assert.assertNotNull(markerList86);
        org.junit.Assert.assertNull(stringPosition87);
        org.junit.Assert.assertNull(nodeSourcePosition88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(nodeSourcePosition90);
        org.junit.Assert.assertNull(nodeSourcePosition91);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(9, 39, 100);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        int int10 = jSDocInfo9.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo9.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo9.getEnumParameterType();
        node7.setJSDocInfo(jSDocInfo9);
        node3.setJSDocInfo(jSDocInfo9);
        java.util.Collection<java.lang.String> strCollection17 = jSDocInfo9.getAuthors();
        boolean boolean18 = jSDocInfo9.isInterface();
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(strCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node57.isGetProp();
        boolean boolean62 = node57.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node57.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder63.append("STRING true\n");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderList66 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilder63);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderList66);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.util.Iterator<java.io.Serializable> serializableItor49 = serializableList20.iterator();
        java.lang.Object[] objArray50 = serializableList20.toArray();
        boolean boolean51 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList20);
        java.io.Serializable[] serializableArray68 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList69 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray68);
        boolean boolean70 = serializableList69.isEmpty();
        boolean boolean72 = serializableList69.contains((java.lang.Object) 52);
        int int74 = serializableList69.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream75 = serializableList69.parallelStream();
        java.lang.Object[] objArray76 = serializableList69.toArray();
        boolean boolean77 = serializableList69.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = serializableList20.removeAll((java.util.Collection<java.io.Serializable>) serializableList69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableItor49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(serializableArray68);
        org.junit.Assert.assertNotNull(serializableList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(serializableStream75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker3.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(typePosition14);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.io.Serializable[] serializableArray65 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray65);
        boolean boolean67 = serializableList20.containsAll((java.util.Collection<java.io.Serializable>) serializableList66);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList66.reverse();
        boolean boolean69 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList68);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = serializableList68.reverse();
        java.util.stream.Stream[] streamArray72 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.io.Serializable>[] serializableStreamArray73 = (java.util.stream.Stream<java.io.Serializable>[]) streamArray72;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.io.Serializable>[] serializableStreamArray74 = serializableList68.toArray(serializableStreamArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.Integer");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableArray65);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertNotNull(streamArray72);
        org.junit.Assert.assertNotNull(serializableStreamArray73);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isQualifiedName();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        node53.addChildrenToBack(node58);
        boolean boolean69 = node53.isLocalResultCall();
        com.google.javascript.rhino.Node node70 = node48.copyInformationFromForTree(node53);
        node53.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node73 = node44.clonePropsFrom(node53);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isInstanceOf();
        boolean boolean79 = node77.isComma();
        boolean boolean80 = node44.isEquivalentTo(node77);
        com.google.javascript.rhino.Node node81 = node20.useSourceInfoFrom(node44);
        com.google.javascript.rhino.Node node82 = node3.copyInformationFrom(node81);
        boolean boolean83 = node81.isNE();
        boolean boolean84 = node81.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 37);
        boolean boolean2 = node1.isLocalResultCall();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isLabelName();
        boolean boolean8 = node6.isDec();
        boolean boolean9 = node6.isNoSideEffectsCall();
        boolean boolean10 = node6.isIf();
        boolean boolean11 = node6.wasEmptyNode();
        node6.setOptionalArg(true);
        boolean boolean14 = node6.isName();
        com.google.javascript.rhino.jstype.JSType jSType15 = node6.getJSType();
        boolean boolean16 = node6.isFalse();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node19 = node18.getLastSibling();
        boolean boolean20 = node18.isDelProp();
        boolean boolean21 = node18.isLocalResultCall();
        boolean boolean22 = node18.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node6, node18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId49 = node29.getInputId();
        com.google.javascript.rhino.Node node50 = node12.srcref(node29);
        node50.setIsSyntheticBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = node50.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        boolean boolean45 = node28.isInstanceOf();
        com.google.javascript.rhino.Node node46 = node19.clonePropsFrom(node28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = node19.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = null;
        node3.setJSDocInfo(jSDocInfo4);
        boolean boolean6 = node3.isVoid();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean11 = node10.isCase();
        boolean boolean12 = node10.isBlock();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isVar();
        int int22 = node16.getSourcePosition();
        boolean boolean23 = node16.isAnd();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        boolean boolean37 = node36.isQuotedString();
        boolean boolean38 = node36.isOptionalArg();
        boolean boolean39 = node36.isLabelName();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(9, node10, node16, node36);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        boolean boolean46 = node44.isTrue();
        boolean boolean47 = node44.isNoSideEffectsCall();
        boolean boolean48 = node44.isCase();
        boolean boolean49 = node16.hasChild(node44);
        int int50 = node16.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        boolean boolean5 = node4.isAssign();
        com.google.javascript.rhino.Node node6 = node4.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 42, 9);
        boolean boolean10 = node4.isVar();
        boolean boolean11 = node4.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        boolean boolean7 = node3.isInc();
        boolean boolean8 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int4 = node3.getCharno();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId33 = node13.getInputId();
        node13.setOptionalArg(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean40 = node13.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node41 = node3.srcref(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int46 = node45.getCharno();
        com.google.javascript.rhino.Node node47 = node39.useSourceInfoIfMissingFromForTree(node45);
        boolean boolean48 = node39.isTypeOf();
        node39.setLength(41);
        boolean boolean51 = node39.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        boolean boolean41 = node36.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        int int43 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean44 = jSDocInfo42.hasType();
        java.lang.String str45 = jSDocInfo42.getSourceName();
        int int46 = jSDocInfo42.getParameterCount();
        node36.setJSDocInfo(jSDocInfo42);
        node36.setVarArgs(false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        strSet4.clear();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean85 = node84.isLabelName();
        boolean boolean86 = node84.isDec();
        boolean boolean87 = node84.isNoSideEffectsCall();
        boolean boolean88 = node84.isLocalResultCall();
        boolean boolean89 = strSet4.remove((java.lang.Object) node84);
        boolean boolean90 = node84.isVar();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        java.io.Serializable[] serializableArray17 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList18 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray17);
        boolean boolean19 = serializableList18.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        boolean boolean46 = serializableList18.contains((java.lang.Object) node28);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        boolean boolean63 = node28.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 10, 46);
        // The following exception was thrown during execution in test generation
        try {
            node66.setString("([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30])");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 10 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(serializableList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet1.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean10 = booleanLiteralSet8.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet8.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean17 = booleanLiteralSet15.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean21 = booleanLiteralSet19.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet19.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet15.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet25.union(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList31 = com.google.common.collect.ImmutableList.of(booleanLiteralSet6, booleanLiteralSet13, booleanLiteralSet28, booleanLiteralSet30);
        boolean boolean33 = booleanLiteralSet30.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        boolean boolean13 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        node58.putIntProp(1, 32);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node63 = node62.getLastSibling();
        boolean boolean64 = node60.isEquivalentTo(node62);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node73 = node68.srcref(node71);
        com.google.javascript.rhino.Node node74 = node60.copyInformationFrom(node71);
        boolean boolean75 = node60.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("java.io.IOException: JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility8);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        node3.setSourceEncodedPositionForTree(10);
        boolean boolean6 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = node3.cloneNode();
        boolean boolean8 = node3.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor22 = serializableList17.iterator();
        boolean boolean23 = serializableList17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable25 = serializableList17.remove(48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        node44.setCharno(3);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean89 = node88.isContinue();
        com.google.javascript.rhino.Node node90 = node81.clonePropsFrom(node88);
        boolean boolean91 = node90.isScript();
        com.google.javascript.rhino.Node node92 = node44.copyInformationFrom(node90);
        com.google.javascript.rhino.Node node93 = node44.getParent();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor24 = serializableList17.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableItor24);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        node31.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isComma();
        boolean boolean58 = node22.isEquivalentTo(node55);
        boolean boolean59 = node55.isComma();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) '#', node18, node55, 42, (int) ' ');
        boolean boolean63 = node62.isComma();
        com.google.javascript.rhino.Node node64 = node62.cloneTree();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(16, node12, node62);
        boolean boolean66 = node65.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node67 = node65.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        int int88 = node71.getLength();
        com.google.javascript.rhino.Node node89 = node71.getFirstChild();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node4, node67, node71, 4, 31);
        boolean boolean93 = node71.isScript();
        node71.setSourceFileForTesting("TYPEOF");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        java.lang.String str8 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<java.io.Serializable>> serializableListBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(serializableListBuilder0);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList6 = com.google.common.collect.ImmutableList.of(ternaryValue2, ternaryValue3, ternaryValue4, ternaryValue5);
        java.lang.String str7 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList12 = com.google.common.collect.ImmutableList.of(ternaryValue8, ternaryValue9, ternaryValue10, ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue4.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.xor(ternaryValue14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList22 = ternaryValueEnumBuilder21.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        java.lang.String str28 = ternaryValue25.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue25.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue30.xor(ternaryValue35);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder41 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder42 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        java.lang.String str48 = ternaryValue45.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue45.or(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue50.xor(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue55.xor(ternaryValue62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder67 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue66);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder68 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList69 = ternaryValueEnumBuilder68.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray70 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder71 = ternaryValueEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray70);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder72 = ternaryValueEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray70);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder73 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList74 = ternaryValueEnumBuilder73.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray75 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder76 = ternaryValueEnumBuilder73.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList81 = com.google.common.collect.ImmutableList.of(ternaryValue77, ternaryValue78, ternaryValue79, ternaryValue80);
        java.lang.String str82 = ternaryValue79.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList87 = com.google.common.collect.ImmutableList.of(ternaryValue83, ternaryValue84, ternaryValue85, ternaryValue86);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue79.or(ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = ternaryValue88.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder90 = ternaryValueEnumBuilder73.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue89);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder92 = ternaryValueEnumBuilder90.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue91);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder93 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList94 = ternaryValueEnumBuilder93.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray95 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder96 = ternaryValueEnumBuilder93.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder97 = ternaryValueEnumBuilder92.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder98 = ternaryValueEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray95);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValueList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValueList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder20);
        org.junit.Assert.assertNotNull(ternaryValueEnumList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "true" + "'", str28, "true");
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder41);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "true" + "'", str48, "true");
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder67);
        org.junit.Assert.assertNotNull(ternaryValueEnumList69);
        org.junit.Assert.assertNotNull(ternaryValueArray70);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder71);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder72);
        org.junit.Assert.assertNotNull(ternaryValueEnumList74);
        org.junit.Assert.assertNotNull(ternaryValueArray75);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValueList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "true" + "'", str82, "true");
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValueList87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder92);
        org.junit.Assert.assertNotNull(ternaryValueEnumList94);
        org.junit.Assert.assertNotNull(ternaryValueArray95);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder96);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder97);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder98);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(java.io.IOException: java.io.IOException)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((java.io.IOException: java.io.IOException))" + "'", str1, "((java.io.IOException: java.io.IOException))");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        boolean boolean68 = typePosition0.hasBrackets();
        int int69 = typePosition0.getEndLine();
        boolean boolean70 = typePosition0.hasBrackets();
        int int71 = typePosition0.getPositionOnStartLine();
        int int72 = typePosition0.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList73 = com.google.common.collect.ImmutableList.of(typePosition0);
        int int74 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(typePositionList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        boolean boolean4 = node2.isNE();
        boolean boolean5 = node2.isGetterDef();
        boolean boolean6 = node2.isNE();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        boolean boolean46 = node44.isTrue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node20, node44, node50, node64, 10, (int) (byte) -1);
        boolean boolean68 = node64.isGetProp();
        boolean boolean69 = node64.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder70 = node64.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean75 = node74.isLocalResultCall();
        boolean boolean76 = node74.isDebugger();
        boolean boolean77 = node74.isNull();
        node64.addChildrenToFront(node74);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) -1, node2, node64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList6 = com.google.common.collect.ImmutableList.of(ternaryValue2, ternaryValue3, ternaryValue4, ternaryValue5);
        java.lang.String str7 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList12 = com.google.common.collect.ImmutableList.of(ternaryValue8, ternaryValue9, ternaryValue10, ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue4.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.xor(ternaryValue14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList22 = ternaryValueEnumBuilder21.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        java.lang.String str28 = ternaryValue25.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue25.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue30.xor(ternaryValue35);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder41 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder42 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        java.lang.String str48 = ternaryValue45.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue45.or(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue50.xor(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue55.xor(ternaryValue62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder67 = ternaryValueEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue66);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder68 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList69 = ternaryValueEnumBuilder68.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray70 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder71 = ternaryValueEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList76 = com.google.common.collect.ImmutableList.of(ternaryValue72, ternaryValue73, ternaryValue74, ternaryValue75);
        java.lang.String str77 = ternaryValue74.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList82 = com.google.common.collect.ImmutableList.of(ternaryValue78, ternaryValue79, ternaryValue80, ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue74.or(ternaryValue79);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = ternaryValue83.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder85 = ternaryValueEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder87 = ternaryValueEnumBuilder85.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue86);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder88 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList89 = ternaryValueEnumBuilder88.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray90 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder91 = ternaryValueEnumBuilder88.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray90);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder92 = ternaryValueEnumBuilder87.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray90);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList93 = com.google.common.collect.ImmutableList.copyOf((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray90);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder94 = ternaryValueEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray90);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList95 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray90);
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValueList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValueList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder20);
        org.junit.Assert.assertNotNull(ternaryValueEnumList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "true" + "'", str28, "true");
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder41);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "true" + "'", str48, "true");
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder67);
        org.junit.Assert.assertNotNull(ternaryValueEnumList69);
        org.junit.Assert.assertNotNull(ternaryValueArray70);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValueList76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "true" + "'", str77, "true");
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValueList82);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder87);
        org.junit.Assert.assertNotNull(ternaryValueEnumList89);
        org.junit.Assert.assertNotNull(ternaryValueArray90);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder91);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder92);
        org.junit.Assert.assertNotNull(ternaryValueEnumList93);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder94);
        org.junit.Assert.assertNotNull(ternaryValueEnumList95);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        java.util.ListIterator<java.io.Serializable> serializableItor25 = serializableList24.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor26 = serializableList24.listIterator();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node30.clonePropsFrom(node37);
        boolean boolean40 = node39.isQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType41 = node39.getJSType();
        int int42 = serializableList24.indexOf((java.lang.Object) node39);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertNotNull(serializableItor25);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        int int65 = node46.getSourcePosition();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isLabelName();
        boolean boolean71 = node69.isDec();
        boolean boolean72 = node69.isNoSideEffectsCall();
        node46.addChildToBack(node69);
        boolean boolean74 = serializableList17.equals((java.lang.Object) node69);
        boolean boolean75 = node69.isSwitch();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor24 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor25 = serializableList17.iterator();
        java.io.Serializable[] serializableArray42 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList43 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray42);
        boolean boolean44 = serializableList43.isEmpty();
        boolean boolean46 = serializableList43.contains((java.lang.Object) 52);
        boolean boolean48 = serializableList43.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray49 = serializableList43.toArray();
        java.io.Serializable[] serializableArray66 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList67 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray66);
        boolean boolean68 = serializableList67.isEmpty();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isQualifiedName();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isContinue();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        node82.setJSType(jSType84);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        com.google.javascript.rhino.Node node91 = node82.clonePropsFrom(node89);
        node77.addChildrenToBack(node82);
        boolean boolean93 = node77.isLocalResultCall();
        com.google.javascript.rhino.Node node94 = node72.copyInformationFromForTree(node77);
        boolean boolean95 = serializableList67.contains((java.lang.Object) node77);
        java.util.Iterator<java.io.Serializable> serializableItor96 = serializableList67.iterator();
        boolean boolean97 = serializableList43.containsAll((java.util.Collection<java.io.Serializable>) serializableList67);
        boolean boolean98 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList67);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator99 = serializableList17.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(serializableItor25);
        org.junit.Assert.assertNotNull(serializableArray42);
        org.junit.Assert.assertNotNull(serializableList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray66);
        org.junit.Assert.assertNotNull(serializableList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(serializableItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator99);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node21.isGetterDef();
        int int74 = node21.getChildCount();
        int int75 = node21.getCharno();
        boolean boolean76 = node21.isSwitch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isDec();
        boolean boolean53 = node50.isNoSideEffectsCall();
        node27.addChildToBack(node50);
        boolean boolean55 = node50.isVoid();
        boolean boolean56 = node50.isEmpty();
        node50.removeProp(10);
        boolean boolean59 = node50.isTrue();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        node25.setType(42);
        boolean boolean31 = node25.isFor();
        com.google.javascript.rhino.Node node32 = node25.getParent();
        node25.detachChildren();
        boolean boolean34 = node25.isThis();
        com.google.javascript.rhino.Node node35 = node25.detachFromParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node35.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node38 = node35.getAncestor((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(jSDocInfo36);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        java.io.Serializable[] serializableArray17 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList18 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray17);
        boolean boolean19 = serializableList18.isEmpty();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node23.copyInformationFromForTree(node28);
        boolean boolean46 = serializableList18.contains((java.lang.Object) node28);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        boolean boolean63 = node28.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 10, 46);
        boolean boolean67 = node59.isArrayLit();
        boolean boolean68 = node59.isSetterDef();
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(serializableList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.isVarArgs();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isQualifiedName();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node64 = node55.clonePropsFrom(node62);
        node50.addChildrenToBack(node55);
        boolean boolean66 = node50.isLocalResultCall();
        com.google.javascript.rhino.Node node67 = node45.copyInformationFromForTree(node50);
        node50.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node70 = node41.clonePropsFrom(node50);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isInstanceOf();
        boolean boolean76 = node74.isComma();
        boolean boolean77 = node41.isEquivalentTo(node74);
        boolean boolean78 = node74.isComma();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) '#', node37, node74, 42, (int) ' ');
        boolean boolean82 = node81.isComma();
        com.google.javascript.rhino.Node node83 = node81.cloneTree();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(16, node31, node81);
        node84.detachChildren();
        boolean boolean86 = node84.isNew();
        boolean boolean87 = node8.isEquivalentTo(node84);
        com.google.javascript.rhino.Node node88 = node8.getLastSibling();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node4.isVar();
        boolean boolean15 = node4.isCase();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(10, node4, node17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList24 = com.google.common.collect.ImmutableList.of(ternaryValue20, ternaryValue21, ternaryValue22, ternaryValue23);
        java.lang.String str25 = ternaryValue22.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue22.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue31.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue31.not();
        boolean boolean35 = ternaryValue31.toBoolean(true);
        node4.putProp(35, (java.lang.Object) boolean35);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValueList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isStringKey();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node3.children();
        node3.setOptionalArg(true);
        int int30 = node3.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = staticSourceFile63.getName();
        boolean boolean65 = staticSourceFile63.isExtern();
        node45.setStaticSourceFile(staticSourceFile63);
        int int67 = node45.getSourcePosition();
        boolean boolean68 = node45.isRegExp();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(staticSourceFile63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        boolean boolean57 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.asList();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node62.setJSType(jSType64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node62.clonePropsFrom(node69);
        node71.setSourceFileForTesting("hi!");
        boolean boolean74 = node71.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        java.lang.String str76 = staticSourceFile75.getName();
        boolean boolean77 = staticSourceFile75.isExtern();
        int int79 = staticSourceFile75.getColumnOfOffset(44);
        java.lang.String str80 = staticSourceFile75.getName();
        int int82 = staticSourceFile75.getLineOfOffset(31);
        int int83 = serializableList24.lastIndexOf((java.lang.Object) staticSourceFile75);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition84 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int85 = namePosition84.getPositionOnEndLine();
        int int86 = namePosition84.getPositionOnStartLine();
        int int87 = namePosition84.getPositionOnStartLine();
        boolean boolean88 = serializableList24.equals((java.lang.Object) int87);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableList58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(staticSourceFile75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("GT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(GT)" + "'", str1, "(GT)");
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        int int68 = typePosition0.getStartLine();
        boolean boolean69 = typePosition0.hasBrackets();
        int int70 = typePosition0.getEndLine();
        int int71 = typePosition0.getPositionOnStartLine();
        int int72 = typePosition0.getPositionOnEndLine();
        int int73 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        int int14 = node12.getCharno();
        boolean boolean15 = node12.isDec();
        boolean boolean16 = node12.wasEmptyNode();
        boolean boolean17 = node12.isAssign();
        com.google.javascript.rhino.Node node18 = node12.getFirstChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        jSDocInfo0.setLicense("STRING Unknown class name 40\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean8 = jSDocInfo0.hasParameterType("");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getTypedefType();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("hi!");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1), 4095, 50);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        com.google.javascript.rhino.Node node21 = node3.getFirstChild();
        boolean boolean22 = node3.isRegExp();
        node3.setType(42);
        boolean boolean25 = node3.isWith();
        int int26 = node3.getCharno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node21.getParent();
        boolean boolean70 = node69.isOr();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node75.setCharno((int) (byte) 1);
        boolean boolean78 = node75.isGetterDef();
        com.google.javascript.rhino.Node node79 = node69.copyInformationFrom(node75);
        node3.addChildrenToFront(node79);
        node3.setSourceEncodedPositionForTree((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        boolean boolean9 = node3.isQuotedString();
        com.google.javascript.rhino.InputId inputId10 = node3.getInputId();
        com.google.javascript.rhino.Node node11 = node3.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor68 = serializableList17.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList71 = serializableList17.subList((int) '4', (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (52) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor68);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        int int8 = node6.getSourcePosition();
        com.google.javascript.rhino.Node node9 = node3.srcrefTree(node6);
        boolean boolean10 = node3.isWhile();
        boolean boolean11 = node3.isWith();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId40 = node20.getInputId();
        node20.setLineno(54);
        boolean boolean43 = node20.isVoid();
        boolean boolean44 = node20.isFromExterns();
        boolean boolean45 = node20.isSwitch();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        boolean boolean73 = node55.isParamList();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(38, node55, 51, 38);
        int int77 = node76.getSideEffectFlags();
        java.lang.String str78 = node76.getSourceFileName();
        node20.addChildrenToBack(node76);
        com.google.javascript.rhino.Node node80 = node3.useSourceInfoFromForTree(node20);
        int int81 = node80.getLineno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(inputId40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 54 + "'", int81 == 54);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isOverride();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        int int20 = staticSourceFile16.getColumnOfOffset(0);
        int int22 = staticSourceFile16.getColumnOfOffset((-2147483648));
        java.lang.String str23 = staticSourceFile16.getName();
        boolean boolean24 = staticSourceFile16.isExtern();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo66.getEnumParameterType();
        java.lang.String str71 = jSDocInfo66.getReturnDescription();
        boolean boolean72 = jSDocInfo66.hasEnumParameterType();
        boolean boolean73 = serializableList65.contains((java.lang.Object) jSDocInfo66);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList74 = jSDocInfo66.getExtendedInterfaces();
        boolean boolean75 = jSDocInfo66.isHidden();
        boolean boolean76 = jSDocInfo66.hasTypedefType();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor28 = serializableList17.iterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isQualifiedName();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node56.addChildrenToBack(node61);
        boolean boolean72 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node73 = node51.copyInformationFromForTree(node56);
        boolean boolean74 = serializableList46.contains((java.lang.Object) node56);
        boolean boolean75 = serializableList46.isEmpty();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator76 = serializableList46.spliterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList77 = serializableList46.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        int int79 = jSDocInfo78.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = null;
        jSDocInfo78.setVisibility(visibility80);
        boolean boolean82 = jSDocInfo78.isNoAlias();
        boolean boolean83 = jSDocInfo78.isHidden();
        boolean boolean84 = serializableList77.contains((java.lang.Object) jSDocInfo78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = serializableList17.retainAll((java.util.Collection<java.io.Serializable>) serializableList77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableItor28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator76);
        org.junit.Assert.assertNotNull(serializableList77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isDec();
        boolean boolean12 = node9.isAssign();
        boolean boolean13 = node3.isEquivalentTo(node9);
        int int15 = node3.getIntProp(47);
        int int16 = node3.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("JSDocInfo");
        java.lang.String str10 = jSDocInfo0.getMeaning();
        jSDocInfo0.setLicense("false");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("JSDocInfo");
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        int int88 = serializableList86.size();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator89 = serializableList86.spliterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream90 = serializableList86.parallelStream();
        int int91 = serializableList86.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean93 = jSDocInfo92.hasEnumParameterType();
        boolean boolean94 = jSDocInfo92.isIdGenerator();
        boolean boolean96 = jSDocInfo92.hasParameter("true");
        boolean boolean97 = jSDocInfo92.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet98 = jSDocInfo92.getModifies();
        int int99 = serializableList86.indexOf((java.lang.Object) jSDocInfo92);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertNotNull(serializableSpliterator89);
        org.junit.Assert.assertNotNull(serializableStream90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 16 + "'", int91 == 16);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.hasType();
        java.lang.String str8 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("NAME 51");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(NAME 51)" + "'", str1, "(NAME 51)");
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node3.isVar();
        boolean boolean14 = node3.isCase();
        java.io.Serializable[] serializableArray31 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList32 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray31);
        boolean boolean33 = serializableList32.isEmpty();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isQualifiedName();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isContinue();
        com.google.javascript.rhino.Node node56 = node47.clonePropsFrom(node54);
        node42.addChildrenToBack(node47);
        boolean boolean58 = node42.isLocalResultCall();
        com.google.javascript.rhino.Node node59 = node37.copyInformationFromForTree(node42);
        boolean boolean60 = serializableList32.contains((java.lang.Object) node42);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isQualifiedName();
        int int66 = serializableList32.indexOf((java.lang.Object) node64);
        com.google.javascript.rhino.Node node67 = node64.getNext();
        boolean boolean68 = node64.isFunction();
        boolean boolean69 = node3.hasChild(node64);
        boolean boolean70 = node3.isVarArgs();
        com.google.javascript.rhino.Node node71 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(serializableArray31);
        org.junit.Assert.assertNotNull(serializableList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.lang.String str28 = serializableList17.toString();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        boolean boolean30 = serializableList17.isEmpty();
        boolean boolean31 = serializableList17.isEmpty();
        java.io.Serializable[] serializableArray49 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList50 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray49);
        boolean boolean51 = serializableList50.isEmpty();
        boolean boolean53 = serializableList50.contains((java.lang.Object) 52);
        boolean boolean55 = serializableList50.contains((java.lang.Object) (byte) 0);
        boolean boolean56 = serializableList50.isEmpty();
        boolean boolean57 = serializableList50.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = serializableList17.addAll(0, (java.util.Collection<java.io.Serializable>) serializableList50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str28, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(serializableArray49);
        org.junit.Assert.assertNotNull(serializableList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray70);
        boolean boolean72 = serializableList71.isEmpty();
        boolean boolean74 = serializableList71.contains((java.lang.Object) 52);
        boolean boolean76 = serializableList71.contains((java.lang.Object) (byte) 0);
        boolean boolean77 = serializableList47.containsAll((java.util.Collection<java.io.Serializable>) serializableList71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        int int79 = jSDocInfo78.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = null;
        jSDocInfo78.setVisibility(visibility80);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection82 = jSDocInfo78.getMarkers();
        boolean boolean83 = serializableList47.contains((java.lang.Object) markerCollection82);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator84 = serializableList47.spliterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream85 = serializableList47.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean87 = jSDocInfo86.hasModifies();
        jSDocInfo86.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo86.getThrownTypes();
        boolean boolean91 = jSDocInfo86.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo86.getBlockDescription();
        jSDocInfo86.addSuppression("java.io.IOException: TYPEOF 10\n");
        com.google.javascript.rhino.Node node95 = jSDocInfo86.getAssociatedNode();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = serializableList47.add((java.io.Serializable) jSDocInfo86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(markerCollection82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator84);
        org.junit.Assert.assertNotNull(serializableStream85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(node95);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        boolean boolean14 = node12.isString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isAssign();
        boolean boolean22 = node12.isEquivalentTo(node18);
        boolean boolean23 = node18.isDelProp();
        jSDocInfo0.setAssociatedNode(node18);
        boolean boolean25 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        java.io.IOException iOException1 = new java.io.IOException("JSDocInfo");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        java.util.Iterator<java.io.Serializable> serializableItor87 = serializableList17.iterator();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean93 = node92.isContinue();
        boolean boolean94 = node92.isString();
        boolean boolean95 = node92.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable96 = serializableList17.set((-2147483648), (java.io.Serializable) boolean95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertNotNull(serializableItor87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility8);
        boolean boolean10 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        boolean boolean86 = node69.isQualifiedName();
        com.google.javascript.rhino.InputId inputId87 = node69.getInputId();
        boolean boolean88 = node69.isThis();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = node69.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(inputId87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        java.lang.Object[] objArray24 = serializableList17.toArray();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        boolean boolean30 = node28.isDo();
        node28.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        node46.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node66 = node37.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isLabelName();
        boolean boolean72 = node70.isTrue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isContinue();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean89 = node88.isContinue();
        com.google.javascript.rhino.Node node90 = node81.clonePropsFrom(node88);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (byte) 0, node46, node70, node76, node90, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node94 = node28.useSourceInfoIfMissingFrom(node76);
        boolean boolean95 = node94.isParamList();
        boolean boolean96 = node94.isExprResult();
        boolean boolean97 = node94.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = serializableList17.add((java.io.Serializable) node94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isAssign();
        boolean boolean8 = node4.isIn();
        boolean boolean9 = node4.isThis();
        boolean boolean10 = node4.isOr();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isString();
        com.google.javascript.rhino.Node node30 = node14.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.InputId inputId31 = null;
        node30.setInputId(inputId31);
        java.lang.Object obj34 = node30.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node30.getJSDocInfo();
        node30.setVarArgs(true);
        boolean boolean38 = node30.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isNoAlias();
        boolean boolean42 = jSDocInfo39.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo39.getEnumParameterType();
        jSDocInfo39.setDeprecated(false);
        boolean boolean46 = jSDocInfo39.isImplicitCast();
        node30.setJSDocInfo(jSDocInfo39);
        node30.setSourceEncodedPositionForTree(8);
        com.google.javascript.rhino.InputId inputId50 = node30.getInputId();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(31, node4, node30, (int) (short) 0, 3);
        com.google.javascript.rhino.Node node54 = node30.removeFirstChild();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node67 = node58.clonePropsFrom(node65);
        int int68 = node67.getLineno();
        com.google.javascript.rhino.Node node69 = node67.getNext();
        com.google.javascript.rhino.InputId inputId71 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId73 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId75 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId77 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList78 = com.google.common.collect.ImmutableList.of(inputId71, inputId73, inputId75, inputId77);
        node67.setInputId(inputId71);
        boolean boolean80 = node67.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            node54.addChildToFront(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(inputIdList78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        boolean boolean31 = node9.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            node9.setString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0);
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        namePosition0.setPositionInformation(2, 47, 31, 0);
        int int9 = namePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = node3.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        node37.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node57 = node28.clonePropsFrom(node37);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        boolean boolean63 = node61.isTrue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 0, node37, node61, node67, node81, 10, (int) (byte) -1);
        node37.putIntProp((int) (short) 0, (int) (byte) -1);
        int int88 = serializableList17.lastIndexOf((java.lang.Object) (byte) -1);
        boolean boolean89 = serializableList17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList92 = serializableList17.subList(4095, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (4095) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }
}

